module request

use core.prelude.{todo, string, boolean, i32, Outcome, Display}
use core.collections.HashMap
use response.HttpResponse

public enum HttpMethod {
    Get,
    Post,
    Put,
    Delete
}

model Buffer {

}
  
public model HttpRequest {
    var _url: string
    var data: HashMap<string, string>
    new(url: string) {
        this._url = url
        this.data = HashMap()
    }
    public function pathParams -> RequestParams {
        todo()
    }
    /// Returns the method of the request,
    public function method -> string {
        todo()
    }
    /// Returns the URL route of the request.
    public function url -> string {
        return this._url
    }
    /// Gets the complete body buffer of the string asynchronously.
    public async function body -> Buffer {
        todo()
    }
    /// Returns true if the request was completed successfully.
    public function isCompleted -> boolean {
        todo()
    }
    /// Returns the headers stored in the request.
    public function headers -> RequestHeaders {
        todo()
    }
    /// Stores data on the request object.
    public function storeData(key: string, value: string) {
        var {} = this.data.set(key, value)
    }
    /// Creates a new response model from the request.
    public function respond -> HttpResponse {
        return HttpResponse.from(this)
    }
    /// Returns an error based on this request.
    public function createError(
        message: string, 
        statusCode?: i32
    ) -> HttpRequestError {
        return HttpRequestError(message, this, statusCode)
    }
}

public model RequestHeaders {
    function get(name: string) -> ?string {
        todo()
    }
    function has(name: string) -> boolean {
        todo()
    }
    /// Returns the 
    public function getOrErr(name: string) -> Outcome<string, HttpRequestError> 
    {
        todo()
    }
}
public model RequestParams {
    public function get(name: string) -> ?string {
        todo()
    }
    public function getOrErr(name: string) -> Outcome<string, HttpRequestError> 
    {
        todo()
    }
    function has(name: string) -> boolean {
        todo()
    }
}


/// An error that occurs on the HTTP server while it is active.
/// 
/// The error is non-fatal, meaning that it does not lead to the
/// crashing of the server when it happens.
public model HttpRequestError implements Display {
    var message: string
    var route: string
    var statusCode: i32
    new(message: string, request: HttpRequest, statusCode?: i32) {
        this.message = message
        this.route = request.url()
        this.statusCode = statusCode.unwrapOr(400)
    }
    public function [Display.toStr] -> string {
        return "Error: " + this.message
    }
}