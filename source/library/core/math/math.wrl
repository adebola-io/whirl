/// The math modile provides access to a wide range of commonly used
/// mathematical functions, from logarithms and trigonometry, to 
/// rounding functions such as `floor()` and `ceil()`.
module math

use core.{
    boolean.boolean,
    numeric.{f64, number, i32, int},
    ops.{Orderable, Ordering, Range},
}

import "internal:math" {
    // ---PUBLIC IMPORTS---  
    /// Returns the smallest integer greater than or equal to 
    /// the number passed in.
    /// ### Usage
    /// ```
    /// use core.math.ceil
    /// 
    /// assert(ceil(8.5)).equals(9)
    /// assert(ceil(10.23)).equals(11)
    /// ```
    "ceil" as public function ceil(x: number) -> i32
    /// Returns the largest integer smaller than or equal to
    /// the number passed in.
    /// ### Usage
    /// ```
    /// use core.math.floor
    /// 
    /// assert(floor(9.3)).equals(9)
    /// assert(floor(100.99)).equals(100)
    /// ```
    "floor" as public function floor(x: number) -> i32
    /// Returns the absolute value of a number.
    /// 
    /// ### Usage
    /// ```
    /// use core.math.abs
    /// 
    /// assert(max(-4)).equals(4)
    /// assert(max(10)).equals(10)
    /// ```
    "abs" as public function abs(a: number) -> i32
    /// Determines if a number is prime.
    /// ### Usage
    /// ```
    /// 
    /// ```
    "isPrime" as public function isPrime(x: number) -> boolean
    /// Calculates the greatest common divisor of two numbers.
    /// The GCD is the largest positive integer that divides both input 
    /// integers without a remainder.
    /// ### Usage
    /// ```
    /// use core.math.gcd
    /// 
    /// assert(gcd(12, 18)).equals(6)
    /// assert(gcd(0, 24)).equals(0)
    /// ```
    "gcd" as public function gcd(a: number, b: number) -> int
    /// Returns the approximate value of the PI constant as a double-precision
    /// 64-bit floating-point number.
    /// ### Usage
    /// ```
    /// var pi = core.math.pi() // 3.1415926536...
    /// ```
    "pi" as public function pi() -> f64

    /// Returns a random floating number in a specified range.
    "randInRange" as function randInRange(start: i32, end: i32) -> f64
}


/// Generates a single pseudo-random floating-point number within a range.
/// 
/// ### Usage
/// ```
/// use core.math.psrandom
/// var randNo = psrandom(some(0..10))
/// assert(randNo).isLessThan(11)
/// ```
/// If no range is provided, it uses the range 0 to 1 (inclusive).
/// ```
/// var randNo2 = psrandom()
/// assert(randNo2).isLessThan(2)
/// ```
public function psrandom(range?: Range<i32>) -> f64 {
    var { start, end } = range.valueOr(0..1);
    return randInRange(start, end)
}

/// Returns the minimum of two values that implement Orderable.
/// 
/// If both elements have the same value then the first value is returned.
/// 
/// ### Usage
/// ```
/// use core.math.min
/// 
/// assert(min(1, 5)).equals(1)
/// ```
public function min<T implements Orderable>(first: T, second: T) -> T {
    var ordering = first.compare(second)
    if ordering == Ordering.Less {
        return first
    } 
    if ordering == Ordering.Greater {
        return second
    }
    return first
}

/// Returns the maximum of two elements that implement Orderable.
/// 
/// If both elements have the same value, then the first value is returned.
/// 
/// ### Usage
/// ```
/// use core.math.max
/// 
/// assert(max(1, 3)).equals(3)
/// ```
public function max<T implements Orderable>(first: T, second: T) -> T {
    var ordering = first.compare(second)
    if ordering == Ordering.Less {
        return second
    } else if ordering == Ordering.Greater {
        return first
    }
    return second
}
