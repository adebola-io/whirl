/// Contains the primitive `boolean` model for representing
/// boolean values.
module boolean

use core.maybe.{none, some}
use core.interfaces.Default
use core.string.{Display, FromStr, string}

/// A representation of boolean values, `true` or `false`.
public model boolean 
    implements Display 
    + Default 
    + FromStr 
{
    static function [Default.init] -> This {
        return false
    }

    public function [Display.toStr] -> string {
        if this { "true" } else "false"
    }

    public static function [FromStr.fromStr](str: string) -> ?This {
        if str == "true" { some(true) } 
        else if str == "false" { some(false) }
        else none()
    }
    /// Creates a `Maybe<T>` based on the value.
    /// ### Usage
    /// ```
    /// var operationSuccessful = true
    /// var message = fn "Operation successful!"
    /// 
    /// var optionalMessage = operationSuccessful.ifTrue(message)
    /// 
    /// assertThat(optionalMessage.isSome())
    /// ```
    public function ifTrue<T>(consequent: fn -> T) -> ?T {
        if this { some(consequent()) } else { none() }
    }

    /// Creates a `Maybe<T>` based on the value.
    /// ### Usage
    /// ```
    /// var operationSuccessful = false
    /// var message = fn "Operation failed!"
    /// 
    /// var optionalMessage = operationSuccessful.ifFalse(message)
    /// 
    /// assertThat(optionalMessage.isSome())
    /// ```
    public function ifFalse<T>(consequent: fn -> T) -> ?T {
        if !this { some(consequent()) } else { none() }
    }
}

