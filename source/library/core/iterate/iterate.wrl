/// This module provides a collection of powerful functions, models and interfaces for looping over
/// sequences, manipulating elements and performing other various operations.
/// 
/// Its key feature is the `Iterable` interface, an intrinsic interface implemented by all models
/// that work with structured sequences.
/// 
/// The module also contains useful models that iterate with a certain behaviorial modifier, allowing for
/// a more finegrained control over iteration.
module iterate 

use core.boolean.boolean
use core.collections.Tuple
use core.maybe.{some, none}
use core.numeric.i32

/// ## The Iterable interface
/// The Iterable interface is a common abstraction that allows different types of collections to be traversed in a uniform way. 
/// It defines a set of methods that can be used to access and manipulate the elements of a collection, such as arrays, lists, sets, maps, etc.
///
/// It is specified with an associated type. 
/// The `next()` method is the core method that moves the iterator forward, returns the next element, 
/// or `none` if there are no more elements.
/// 
/// The Iterable interface also provides many other methods that are implemented based on the `next` method. 
/// These methods can perform various operations on the elements of the iterator, 
/// such as filtering, mapping, folding, counting, etc.
///  
/// Some of these methods consume the iterator and return a single value, 
/// while others return another iterator that can be chained with further methods.
/// The Iterable interface can be implemented for any type that represents a sequence of values. 
/// 
/// Optionally, one can also override some of the default methods to provide more efficient or customized behavior.
public interface Iterable<I> {
    /// Returns the next item in the iteration.
    public function next -> ?I
    /// Gathers all the items left in the iterator into an array.
    /// 
    /// Once the iterator is collected, it is exhausted and cannot produce new values.
    /// ### Usage
    /// ```
    /// var str = "Hello"
    /// var characters = str.characters()
    /// var charactersArray = characters.collect()
    /// 
    /// assert(charactersArray.length()).equals(5)
    /// assertThat(characters.next().isNone())
    /// ```
    public function collect -> []I {
        var array = []
        for item in this {
            array.push(item)
        }
        array
    }
    /// Consumes the iterator and returns the number of elements left.
    /// ### Usage
    /// ```
    /// var arr = [1, 2, 3, 4, 5]
    /// var arrIter = arr.iter()
    /// 
    /// assertThat(arrIter.count() == 5)
    /// ```
    public function count -> i32 {
        var count = 0
        while this.next().isSome() {
            count += 1
        }
        count
    }
    /// Consumes the iterator, running a callback for all the items produced by it.
    /// 
    /// ### Usage
    /// ```
    /// use system.io.print
    /// // Prints 1, 2 and 3.
    /// [1, 2, 3].iter().forEach(fn(value) print(value))
    /// ```
    public function forEach(callback: fn(value: I)) {
        for item in this {
            callback(item)
        }
    }
    /// Reduces an `Iterable` to a single value by applying a function against an
    /// accumulator and each element in the sequence. It allows combinatory or aggregative 
    /// operations to be depicted in a concise and functional way.
    /// 
    /// ### Usage
    /// ```
    /// var arr = ["this", "is", "the", "pathway"]
    /// var arrReduced = arr.iter().reduce(fn(acc, word) acc + " " + word)
    /// 
    /// assert(arrReduced).equals("this is the pathway")
    /// ```
    public function reduce(reducer: fn(acc: I, current: I) -> I, initial: I) -> I {
        var accumulated = initial
        for item in this {
            accumulated = reducer(accumulated, item)
        }
        return accumulated
    }
    /// Returns an iterator that only yields items that match a predicate.
    /// The predicate returns a boolean value indicating whether the item
    /// should be kept or discarded.
    /// ### Usage
    /// ```
    /// var values = [20, 30, 40, 50, 60, 70]
    /// // Produce only elements divisible by 4.
    /// var divBy4 = values.iter().filter(fn(x) x % 4 == 0)
    /// 
    /// assert(divBy4.next()).equals(some(20))
    /// assert(divBy4.next()).equals(some(40))
    /// assert(divBy4.next()).equals(some(60))
    /// ```
    public function filter(predicate: fn(value: I) -> boolean) -> Filter<I, This> {
        return Filter(this, predicate)
    }
    /// The `.map()` method is an iterator adapter that allows the creation of a new iterator by applying a
    /// given function to every element of the current iterator as it runs.
    /// ### Usage
    /// ```
    /// var list = [1, 2, 3, 4]
    /// var listTransformed = list.iter().map(fn(x) x * 3).collect()
    /// 
    /// assert(listTransformed).equals([3, 6, 9, 12])
    /// ```
    public function map<J>(transformer: fn(value: I) -> J) -> Map<I, J, This> {
        return Map(this, transformer)
    }
    /// Filters and maps elements in the iterable, creating a new iterator containing only the mapped
    /// values that meets a certain condition.
    /// ### Usage
    /// ```
    /// var names = ["Mary Jane", "Johnny", "Susan Ade", "Habeeb Michaels"]
    /// var lastNames = names.iter().filterMap(fn(value) value.split(' ').at(-1)).collect()
    /// 
    /// assert(lastNames).equals(["Jane", "Ade", "Michaels"])
    /// ```
    public function filterMap<J>(predicate: fn(value: I) -> ?J) -> FilterMap<I, J, This> {
        return FilterMap(this, predicate)
    }
    /// Returns the first `Maybe.some` element in the iteration.
    public function findMap<J>(predicate: fn(value: I) -> ?J) -> ?J {
        for item in this {
            var maybeValue = predicate(item)
            if maybeValue.isSome() {
                return maybeValue
            }
        }
        return none()
    }
    /// Checks if any of the elements produced by the iterator matches a predicate.
    /// 
    /// The method is shortcircuiting, therefore if there are elements left 
    /// after the target element is found, the iterator can still be used.
    /// ### Usage
    /// ```
    /// var iterator = [11, 12, 13, 14, 15].iter()
    /// 
    /// assertThat(iterator.any(fn(x) x % 2 == 0)) // Returns true at 12.
    /// // Iterator can still be used.
    /// assert(iterator.next()).equals(some(13))
    /// assert(iterator.next()).equals(some(14))
    /// ```
    public function any(predicate: fn(value: I) -> boolean) -> boolean {
        for item in this {
            if predicate(item) {
                return true
            }
        }
        return false
    }
    /// Returns true if all the elements produced by the iterator match a predicate.
    /// ### Usage
    /// ```
    /// var iter = [3, 6, 9, 12, 15].iter()
    /// 
    /// assertThat(iter.all(fn(x) x % 3 == 0)) // Consumes the entire iterator and returns true.
    /// ```
    /// Like the `.any()` method, `.all()` is also shortcircuiting, meaning it will stop advancing after the first
    /// false item, whether or not there are still items in the iterator.
    /// ```
    /// iter = [12, 14, 15, 17, 18, 20].iter()
    /// 
    /// assertThat(!iter.all(fn(x) x > 16)) // Halts at 17 and returns false.
    /// // Iterator can still be used.
    /// assert(iter.next()).equals(some(18))
    /// assert(iter.next()).equals(some(20))
    /// ```
    public function all(predicate: fn(value: I) -> boolean) -> boolean {
        for item in this {
            if !predicate(item) {
                return false
            }
        }
        return true
    }
    /// Returns a new iterator consisting of tuples, which are made up of an index value and the item type.
    /// 
    /// ### Usage
    /// ```
    /// ```
    public function enumerate -> Enumerate<I, This> {
        return Enumerate(this)
    }
    /// Finds the first item in an iterator that matches a predicate.
    /// 
    /// ### Usage
    /// ```
    /// var nameList = ["Mary", "Uche", "Abdul", "Fatima", "Bao"]
    /// var namesIter = names.iter()
    /// var startsWithA = namesIter.find(fn(name) name.startsWith("A"))
    /// 
    /// assert(startsWithA).equals(some("Abdul"))
    /// 
    /// // If there are still elements left, the iterator can still be used.
    /// assert(namesIter.next()).equals(some("Fatima"))
    /// assert(namesIter.next()).equals(some("Bao"))
    /// ```
    public function find(predicate: fn(value: I) -> boolean) -> ?I {
        for item in this {
            if predicate(item) {
                return some(item)
            }
        }
        return none()
    }
    /// Collects the next _`n`_ elements from the iterator into an array.
    /// 
    /// ### Usage
    /// ```
    /// var numbers = [2, 4, 6, 8, 10]
    /// var firstThree = numbers.iter().take(3)
    /// assert(firstThree).equals([2, 4, 6])
    /// ```
    /// If the iterator ends before the array is filled, then the incomplete array is returned.
    /// ```
    /// var firstTen = numbers.iter().take(10)
    /// assert(firstTen).equals([2, 4, 6, 8, 10])
    /// ```
    public function take(n: i32) -> []I {
        var i = n
        var taken = []
        while i > 0 {
            var maybeItem = this.next()
            if maybeItem.isNone() {
                break
            }
            var item = maybeItem.value()
            taken.push(item)
            i -= 1
        }
        return taken
    }
    /// Advances the iterator as long as a condition is false.
    /// 
    /// The iteration will stop after checking the first true item.
    /// 
    /// This means if the iteration has _n_ items that are false, then the condition 
    /// will be checked (and the underlying iterator will have to advance) _n+1_ times.
    /// 
    /// ### Usage
    /// ```
    /// var numbers = [10, 12, 14, 16, 18, 20]
    /// var iter = numbers.iter()
    /// 
    /// iter.until(fn(x) x > 15) // Stops at 16.
    /// 
    /// assertThat(iter.next() == some(18))
    /// assertThat(iter.next() == some(20))
    /// ```
    public function until(condition: fn(value: I) -> boolean) {
        for item in this {
            if condition(item) {
                break
            }
        }
    }
    /// Returns an iterator that produces elements from both iterators as a tuple.
    /// 
    /// The iteration will end if one of its components end.
    /// 
    /// ### Usage
    /// ```
    /// var numbers = [1, 2, 3, 4, 5].iter()
    /// var words = ["one", "two", "three", "four", "five"].iter()
    /// var numbersAndWords = numbers.zip(words)
    /// 
    /// assertThat(numbersAndWords.next() == some(pair(1, "one")))
    /// assertThat(numbersAndWords.next() == some(pair(2, "two")))
    /// ```
    public function zip<J, K implements Iterable<J>>(that: K) -> Zip<I, This, J, K> {
        return Zip(this, that)
    }
    /// An iterative adapter that adds a fallback value in between the items produced from the iteration.
    /// 
    /// The iteration will always end with the fallback value.
    /// ### Usage
    /// ```
    /// var numbers = [1, 2, 3, 4]
    /// var iter = numbers.iter().interleave(5)
    /// 
    /// var numbersWith5 = iter.collect()
    /// assert(numbersWith5).equals([1, 5, 2, 5, 3, 5, 4, 5])
    /// ```
    public function interleave(value: I) -> Interleave<I, This> {
        return Interleave(this, value)
    }
    /// Creates a new iterator that skips over the first _n_ elements in the iteration,
    /// returning the rest.
    /// ### Usage
    /// ```
    /// var fruits = ["apple", "banana", "cherry", "date", "elderberry"]
    /// var iter = fruits.iter().skip(2)
    /// 
    /// assert(iter.collect()).equals(["cherry", "date", "elderberry"])
    /// ```
    public function skip(n: i32) -> Skip<I, This> {
        return Skip(this, n)
    }
    /// Joins two iterators together .i.e. It starts producing values from the second iterator
    /// once the first runs out (provided they return values of the same type).
    /// 
    /// ### Usage
    /// ```
    /// var numIter = [1, 2, 3].iter()
    /// var numIter2 = [4, 5, 6].iter() 
    /// var chained = numIter.chain(numIter2)
    /// 
    /// assert(chained.collect()).equals([1, 2, 3, 4, 5, 6])
    /// ```
    public function chain<That implements Iterable<I>>(that: That) -> Chain<I, This, That> {
        return Chain(this, that)
    }
    /// Returns a new iterator that skips over repeated items, 
    /// thereby producing only unique values.
    /// 
    /// ### Usage
    /// ```
    /// var items = [1, 1, 2, 3, 4, 4, 5, 6, 6, 6]
    /// var uniqueItems = items.iter().unique()
    /// 
    /// assert(uniqueItems).equals([1, 2, 3, 4, 5, 6])
    /// ```
    public function unique -> Unique<I, This> {
        return Unique(this)
    }
}

public model Enumerate<I, J implements Iterable<I>> implements Iterable<Tuple<i32, I>>> {
    var iterator: J
    var indexer: i32
    new(iterator: J) {
        this.indexer = 0
        this.iterator = iterator
    }
    public function [Iterable.next] -> ?Tuple<i32, I> {
        var value = this.iterator.next()?
        this.indexer += 1
        return some(Tuple(this.indexer, value))
    }
}


public model Filter<I, J implements Iterable<I>> implements Iterable<I> {
    var iterator: J
    var predicate: fn(value: I) -> boolean
    new(iterator: J, predicate: fn(value: I) -> boolean){
        this.iterator = iterator
        this.predicate = predicate
    }
    public function [Iterable.next] -> ?I {
        var value = this.iterator.next()?
        while !this.predicate(value) {
            value = this.iterator.next()?
        }
        return some(value)
    }
}

public model FilterMap<I, J, K implements Iterable<I>> implements Iterable<J> {
    var iterator: K
    var predicate: fn(value: I) -> ?J
    new(iterator: K, predicate: fn(value: I) -> ?J) {
        this.iterator = iterator
        this.predicate = predicate
    }
    public function [Iterable.next] -> ?J {
        var mapped = this.predicate(this.iterator.next()?)
        while mapped.isNone() {
            mapped = this.predicate(this.iterator.next()?)
        }
        return mapped
    }
}

public model Map<I, O, J implements Iterable<I>> implements Iterable<O> {
    var iterator: J
    var transformer: fn(input: I) -> O
    new(iterator: J, transformer: fn(input: I) -> O) {
        this.iterator = iterator
        this.transformer = transformer
    }
    public function [Iterable.next] -> ?O {
        return some(this.transformer(this.iterator.next()?))
    }
}

public model Unique<I, J implements Iterable<I>> implements Iterable<I> {
    var seen: []I
    var iterator: J
    new(iterator: J) {
        this.iterator = iterator
    }
    public function [Iterable.next] -> ?I {
        var item = this.iterator.next()?
        while this.seen.contains(item) {
            item = this.iterator.next()?
        }
        this.seen.push(item)
        return some(item)
    }
}

public model Zip<I, I1 implements Iterable<I>, J, I2 implements Iterable<J>> implements Iterable<Tuple<I, J>>> 
{
    var first: I1
    var second: I2
    new(first: I1, second: I2) {
        this.first = first
        this.second = second
    }
    public function [Iterable.next] -> ?Tuple<I, J> {
        var firstItem = this.first.next()?
        var secondItem = this.second.next()?
        return some(Tuple(firstItem, secondItem))
    }
}

public model Interleave<I, J implements Iterable<I>> implements Iterable<I> {
    var delimeter: I
    var iterator: J
    var flag: boolean
    new(iterator: J, delimeter: I) {
        this.iterator = iterator
        this.delimeter = delimeter
        this.flag = false
    }
    public function [Iterable.next] -> ?I {
        if this.flag {
            return some(this.delimeter)
        } else {
            var value = this.iterator.next()?
            this.flag = true
            return some(value)
        }
    }
}

public model Reversed<I> implements Iterable<I> {
    var array: []I
    var idx: i32
    new(array: []I) {
        this.array = array
        this.idx = array.length()
    }
    public function [Iterable.next] -> ?I {
        if this.idx == 0 {
            none()
        } else {
            this.idx -= 1
            return some(this.array[this.idx])
        }
    }
}

public model Skip<I, J implements Iterable<I>> implements Iterable<I> {
    var iterator: J
    var skipCount: i32
    new(iterator: J, n: i32) {
        this.iterator = iterator
        this.skipCount = n
    }
    public function [Iterable.next] -> ?I {
        if this.skipCount == 0 {
            return this.iterator.next()
        } else {
            while this.skipCount > 0 {
                var {} = this.iterator.next()
                this.skipCount -= 1
            }
            return this.iterator.next()
        }
    }
}


public model Chain
    <I, J implements Iterable<I>, K implements Iterable<I>> 
    implements Iterable<I> 
{
    var first: J
    var second: K
    var firstEnded: boolean
    new(first: J, second: K) {
        this.first = first
        this.second = second
        this.firstEnded = false
    }
    public function [Iterable.next] -> ?I {
        if this.firstEnded {
            return this.second.next()
        }
        var nextItem = this.first.next()
        if nextItem.isNone() {
            this.firstEnded = true
            return this.second.next()
        } else {
            return nextItem
        }   
    }
}

/// This interface specifies that a model can be made into an iterator.
public interface AsIterator<I, T implements Iterable<I>> {
    /// Turn a model into an iterator.
    public function iter -> T
}