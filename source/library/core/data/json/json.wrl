module json

use core.{
    boolean.boolean, 
    collections.HashMap,
    sentinels.todo,
    string.string,
    numeric.number, 
    maybe.{none, some}
}

/// An simple union type that abstracts over underlying JSON values.
public type RawJsonVal = 
    | JsonString 
    | JsonArray 
    | JsonBool 
    | JsonNumber 
    | JsonObject
    | JsonNull

public enum JsonValueType {
    string,
    Array,
    boolean,
    number,
    Object,
    Null
}

/// A unifying, general interface for any value in the JSON format.
public interface JsonValue {
    /// Returns the type of the JSON value.
    /// ### Usage
    /// ```
    /// use core.data.JsonString
    /// 
    /// var str = JsonString()
    /// assert(str.getType()).equals(JsonValueType.string)
    /// ```
    public function getType -> JsonValueType
    /// Returns true if the JSON value is null.
    /// ### Usage
    /// ```
    /// use core.data.JsonNull
    /// 
    /// var null = JsonNull()
    /// assertThat(null.isNull())
    /// ```
    public function isNull -> boolean {
        return this.getType() == JsonValueType.Null
    }
    /// Returns true if the JSON value is a string.
    /// ### Usage
    /// ```
    /// use core.data.JsonString
    /// 
    /// var str = JsonString()
    /// assertThat(str.isString())
    /// ```
    public function isString -> boolean {
        return this.getType() == JsonValueType.string
    }
    /// Returns true if the JSON value is numeric.
    /// ### Usage
    /// ```
    /// use core.data.JsonNumber
    /// 
    /// var num = JsonNumber(some(42))
    /// assertThat(num.isNumber())
    /// ```
    public function isNumber -> boolean {
        return this.getType() == JsonValueType.number
    }
    /// Returns true if the JSON value is an array.
    /// ### Usage
    /// ```
    /// use core.data.JsonArray
    /// 
    /// var arr = JsonArray()
    /// assertThat(arr.isArray())
    /// ```
    public function isArray -> boolean {
        return this.getType() == JsonValueType.Array
    }
    /// Returns true if the JSON value is an object.
    /// ### Usage
    /// ```
    /// use core.data.JsonObject
    /// 
    /// var obj = JsonObject()
    /// assertThat(obj.isObject())
    /// ```
    public function isObject -> boolean {
        return this.getType() == JsonValueType.Object
    }
    /// Masks the underlying value as a raw json value.
    public function asValue -> RawJsonVal {
        if this.isString() { 
            return JsonString(this.asString()) 
        }
        if this.isArray() { 
            return JsonArray(this.asArray()) 
        }
        if this.isNumber() {
            return JsonNumber(this.asNumber()) 
        }
        if this.isObject() {
            return JsonObject(this.asObject()) 
        }
        if this.isNull() {
            return JsonNull()
        }
        todo()
    }
    /// Converts a JSON array to its underlying value.
    /// If the underlying value is not an array, the method returns `None()`.
    /// ### Usage
    /// ```
    /// use core.data.{JsonArray, JsonString}
    /// 
    /// var arr = JsonArray()
    /// Assert(arr.asArray()).equals(some([]))
    /// 
    /// var str = JsonString()
    /// assert(str.asArray()).equals(none())
    /// ```
    public function asArray -> ?[]RawJsonVal {
        return none()
    }
    /// Converts a JSON string to its underlying value.
    /// If the underlying value is not a string, the method return `None()`.
    /// ### Usage
    /// ```
    /// use core.data.{JsonString, JsonBool}
    /// 
    /// var str = JsonString()
    /// assert(str.asString()).equals(some(""))
    /// 
    /// var boolean = JsonBool(some(true))
    /// assert(str.asString()).equals(none())
    /// ```
    public function asString -> ?string {
        return none()
    }
    /// Converts a JSON boolean to its underlying value.
    public function asBool -> ?boolean {
        return none()
    }
    /// Converts a JSON number to its underlying value.
    public function asNumber -> ?number {
        return none()
    }
    /// Converts a JSON object to its underlying value.
    public function asObject -> ?HashMap<string, RawJsonVal> {
        return none()
    }
}

/// A string value that adheres to the JSON data format.
public model JsonString implements JsonValue {
    public var value: string
    new(value?: string) {
        this.value = value.unwrapOr("")
    }
    public function [JsonValue.getType] -> JsonValueType {
        return JsonValueType.string
    }
    public function [JsonValue.asString] -> ?string {
        return some(this.value)
    }
}

/// An ordered collection of values in the JSON format.
public model JsonArray implements JsonValue {
    public var value: []RawJsonVal
    new(value?: []RawJsonVal) {
        this.value = value.unwrapOr([])
    }
    public function [JsonValue.getType] -> JsonValueType {
        return JsonValueType.Array
    }
    public function [JsonValue.asArray] -> ?[]RawJsonVal {
        return some(this.value)
    }
}

/// A boolean value in the JSON format.
public model JsonBool implements JsonValue {
    public var value: boolean
    new(value?: boolean) {
        this.value = value.unwrapOr(false)
    }
    public function [JsonValue.getType] -> JsonValueType {
        return JsonValueType.boolean
    }
    public function [JsonValue.asBool] -> ?boolean {
        return some(this.value)
    }
}

/// A numeric value in the JSON format.
public model JsonNumber implements JsonValue {
    public var value: number
    new(value?: number) {
        this.value = value.unwrapOr(0)
    }
    public function [JsonValue.getType] -> JsonValueType {
        return JsonValueType.number
    }
    public function [JsonValue.asNumber] -> ?number {
        return some(this.value)
    }
}

/// An object in the JSON format.
public model JsonObject implements JsonValue {
    public var map: HashMap<string, RawJsonVal>
    new(map?: HashMap<string, RawJsonVal>) {
        this.map = map.unwrapOr(HashMap())
    }
    public function [JsonValue.getType] -> JsonValueType {
        return JsonValueType.Object
    }
    public function [JsonValue.asObject] -> ?HashMap<string, RawJsonVal> {
        return some(this.map)
    }      
}

public model JsonNull implements JsonValue {
    new() {}
    public function [JsonValue.getType] -> JsonValueType {
        return JsonValueType.Null
    }
}