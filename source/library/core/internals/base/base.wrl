/// This module lists all of the base interpreter instructions, 
/// providing a way to interact withthem directly from Whirlwind.
/// 
/// Note that this module is _not_ meant to be used directly.
/// All its exported functions will be replaced with single
/// instructions by the compiler.
module base

use core.internals.never
use core.numeric.{i32, i64, f32, f64}

model funcref {}

import "@base" {    
    "unreachable" as public function _unreachable -> never

    "nop" as public function _nop

    "block" as public function _block

    "loop" as public function _loop

    "if" as public function _if

    "else" as public function _else

    "end" as public function _end

    "br" as public function _br

    "br_if" as public function _br_if

    "br_table" as public function _br_table

    "return" as public function _return

    "call" as public function _call

    "call_indirect" as public function _call_indirect

    "drop" as public function _drop

    "select" as public function _select

    "local.get" as public function _local_get

    "local.set" as public function _local_set

    "local.tee" as public function _local_tee

    "global.get" as public function _global_get

    "global.set" as public function _global_set

    "table.get" as public function _table_get

    "table.set" as public function _table_set

    "i32.load" as public function _i32_load(a: i32) -> i32

    "i64.load" as public function _i64_load(a: i32) -> i64

    "f32.load" as public function _f32_load(a: i32) -> f32

    "f64.load" as public function _f64_load(a: i32) -> f64

    "i64.load8_s" as public function _i64_load8_s(a: i32) -> i64

    "i64.load8_u" as public function _i64_load8_u(a: i32) -> i64

    "i64.load16_s" as public function _i64_load16_s(a: i32) -> i64

    "i64.load16_u" as public function _i64_load16_u(a: i32) -> i64

    "i64.load32_s" as public function _i64_load32_s(a: i32) -> i64

    "i64.load32_u" as public function _i64_load32_u(a: i32) -> i64

    "i32.store" as public function _i32_store(a: i32, b: i32)

    "i64.store" as public function _i64_store(a: i32, b: i64)

    "f32.store" as public function _f32_store(a: i32, b: f32)

    "f64.store" as public function _f64_store(a: i32, b: f64)

    "i32.store8" as public function _i32_store8(a: i32, b: i32)

    "i32.store16" as public function _i32_store16(a: i32, b: i32)

    "i64.store8" as public function _i64_store8(a: i32, b: i64)

    "i64.store16" as public function _i64_store16(a: i32, b: i64)

    "i64.store32" as public function _i64_store32(a: i32, b: i64)

    "memory.size" as public function _memory_size -> i32

    "memory.grow" as public function _memory_grow(a: i32) -> i32

    "i32.const" as public function _i32_const -> i32

    "i64.const" as public function _i64_const -> i64

    "f32.const" as public function _f32_const -> f32

    "f64.const" as public function _f64_const -> f64

    "i32.eqz" as public function _i32_eqz(a: i32) -> i32

    "i32.eq" as public function _i32_eq(a: i32, b: i32) -> i32

    "i32.ne" as public function _i32_ne(a: i32, b: i32) -> i32

    "i32.lt_s" as public function _i32_lt_s(a: i32, b: i32) -> i32

    "i32.lt_u" as public function _i32_lt_u(a: i32, b: i32) -> i32

    "i32.gt_s" as public function _i32_gt_s(a: i32, b: i32) -> i32

    "i32.gt_u" as public function _i32_gt_u(a: i32, b: i32) -> i32

    "i32.le_s" as public function _i32_le_s(a: i32, b: i32) -> i32

    "i32.le_u" as public function _i32_le_u(a: i32, b: i32) -> i32

    "i32.ge_s" as public function _i32_ge_s(a: i32, b: i32) -> i32

    "i32.ge_u" as public function _i32_ge_u(a: i32, b: i32) -> i32

    "i64.eqz" as public function _i64_eqz(a: i64) -> i32

    "i64.eq" as public function _i64_eq(a: i64, b: i64) -> i32

    "i64.ne" as public function _i64_ne(a: i64, b: i64) -> i32

    "i64.lt_s" as public function _i64_lt_s(a: i64, b: i64) -> i32

    "i64.lt_u" as public function _i64_lt_u(a: i64, b: i64) -> i32

    "i64.gt_s" as public function _i64_gt_s(a: i64, b: i64) -> i32

    "i64.gt_u" as public function _i64_gt_u(a: i64, b: i64) -> i32

    "i64.le_s" as public function _i64_le_s(a: i64, b: i64) -> i32

    "i64.le_u" as public function _i64_le_u(a: i64, b: i64) -> i32

    "i64.ge_s" as public function _i64_ge_s(a: i64, b: i64) -> i32

    "i64.ge_u" as public function _i64_ge_u(a: i64, b: i64) -> i32

    "f32.eq" as public function _f32_eq(a: f32, b: f32) -> i32

    "f32.ne" as public function _f32_ne(a: f32, b: f32) -> i32

    "f32.lt" as public function _f32_lt(a: f32, b: f32) -> i32

    "f32.gt" as public function _f32_gt(a: f32, b: f32) -> i32

    "f32.le" as public function _f32_le(a: f32, b: f32) -> i32

    "f32.ge" as public function _f32_ge(a: f32, b: f32) -> i32

    "f64.eq" as public function _f64_eq(a: f64, b: f64) -> i32

    "f64.ne" as public function _f64_ne(a: f64, b: f64) -> i32

    "f64.lt" as public function _f64_lt(a: f64, b: f64) -> i32

    "f64.gt" as public function _f64_gt(a: f64, b: f64) -> i32

    "f64.le" as public function _f64_le(a: f64, b: f64) -> i32

    "f64.ge" as public function _f64_ge(a: f64, b: f64) -> i32

    "i32.clz" as public function _i32_clz(a: i32) -> i32

    "i32.ctz" as public function _i32_ctz(a: i32) -> i32

    "i32.popcnt" as public function _i32_popcnt(a: i32) -> i32

    "i32.add" as public function _i32_add(a: i32, b: i32) -> i32

    "i32.sub" as public function _i32_sub(a: i32, b: i32) -> i32

    "i32.mul" as public function _i32_mul(a: i32, b: i32) -> i32

    "i32.div_s" as public function _i32_div_s(a: i32, b: i32) -> i32

    "i32.div_u" as public function _i32_div_u(a: i32, b: i32) -> i32

    "i32.rem_s" as public function _i32_rem_s(a: i32, b: i32) -> i32

    "i32.rem_u" as public function _i32_rem_u(a: i32, b: i32) -> i32

    "i32.and" as public function _i32_and(a: i32, b: i32) -> i32

    "i32.or" as public function _i32_or(a: i32, b: i32) -> i32

    "i32.xor" as public function _i32_xor(a: i32, b: i32) -> i32

    "i32.shl" as public function _i32_shl(a: i32, b: i32) -> i32

    "i32.shr_s" as public function _i32_shr_s(a: i32, b: i32) -> i32

    "i32.shr_u" as public function _i32_shr_u(a: i32, b: i32) -> i32

    "i32.rotl" as public function _i32_rotl(a: i32, b: i32) -> i32

    "i32.rotr" as public function _i32_rotr(a: i32, b: i32) -> i32

    "i64.clz" as public function _i64_clz(a: i64) -> i32

    "i64.ctz" as public function _i64_ctz(a: i64) -> i32

    "i64.popcnt" as public function _i64_popcnt(a: i64) -> i32

    "i64.add" as public function _i64_add(a: i64, b: i64) -> i64

    "i64.sub" as public function _i64_sub(a: i64, b: i64) -> i64

    "i64.mul" as public function _i64_mul(a: i64, b: i64) -> i64

    "i64.div_s" as public function _i64_div_s(a: i64, b: i64) -> i64

    "i64.div_u" as public function _i64_div_u(a: i64, b: i64) -> i64

    "i64.rem_s" as public function _i64_rem_s(a: i64, b: i64) -> i64

    "i64.rem_u" as public function _i64_rem_u(a: i64, b: i64) -> i64

    "i64.and" as public function _i64_and(a: i64, b: i64) -> i64

    "i64.or" as public function _i64_or(a: i64, b: i64) -> i64

    "i64.xor" as public function _i64_xor(a: i64, b: i64) -> i64

    "i64.shl" as public function _i64_shl(a: i64, b: i64) -> i64

    "i64.shr_s" as public function _i64_shr_s(a: i64, b: i64) -> i64

    "i64.shr_u" as public function _i64_shr_u(a: i64, b: i64) -> i64

    "i64.rotl" as public function _i64_rotl(a: i64, b: i64) -> i64

    "i64.rotr" as public function _i64_rotr(a: i64, b: i64) -> i64

    "f32.abs" as public function _f32_abs(a: f32) -> f32

    "f32.neg" as public function _f32_neg(a: f32) -> f32

    "f32.ceil" as public function _f32_ceil(a: f32) -> f32

    "f32.floor" as public function _f32_floor(a: f32) -> f32

    "f32.trunc" as public function _f32_trunc(a: f32) -> f32

    "f32.nearest" as public function _f32_nearest(a: f32) -> f32

    "f32.sqrt" as public function _f32_sqrt(a: f32) -> f32

    "f32.add" as public function _f32_add(a: f32, b: f32) -> f32

    "f32.sub" as public function _f32_sub(a: f32, b: f32) -> f32

    "f32.mul" as public function _f32_mul(a: f32, b: f32) -> f32

    "f32.div" as public function _f32_div(a: f32, b: f32) -> f32

    "f32.min" as public function _f32_min(a: f32, b: f32) -> f32

    "f32.max" as public function _f32_max(a: f32, b: f32) -> f32

    "f32.copysign" as public function _f32_copysign(a: f32, b: f32) -> f32

    "f64.abs" as public function _f64_abs(a: f64) -> f64

    "f64.neg" as public function _f64_neg(a: f64) -> f64

    "f64.ceil" as public function _f64_ceil(a: f64) -> f64

    "f64.floor" as public function _f64_floor(a: f64) -> f64

    "f64.trunc" as public function _f64_trunc(a: f64) -> f64

    "f64.nearest" as public function _f64_nearest(a: f64) -> f64

    "f64.sqrt" as public function _f64_sqrt(a: f64) -> f64

    "f64.add" as public function _f64_add(a: f64, b: f64) -> f64

    "f64.sub" as public function _f64_sub(a: f64, b: f64) -> f64

    "f64.mul" as public function _f64_mul(a: f64, b: f64) -> f64

    "f64.div" as public function _f64_div(a: f64, b: f64) -> f64

    "f64.min" as public function _f64_min(a: f64, b: f64) -> f64

    "f64.max" as public function _f64_max(a: f64, b: f64) -> f64

    "f64.copysign" as public function _f64_copysign(a: f64, b: f64) -> f64

    "i32.wrap_i64" as public function _i32_wrap_i64(a: i64) -> i32

    "i64.trunc_f32_s" as public function _i64_trunc_f32_s(a: f32) -> i64

    "i64.trunc_f32_u" as public function _i64_trunc_f32_u(a: f32) -> i64

    "i64.trunc_f64_s" as public function _i64_trunc_f64_s(a: f64) -> i64

    "i64.trunc_f64_u" as public function _i64_trunc_f64_u(a: f64) -> i64

    "f32.convert_i32_s" as public function _f32_convert_i32_s(a: i32) -> f32

    "f32.convert_i32_u" as public function _f32_convert_i32_u(a: i32) -> f32

    "f64.convert_i32_s" as public function _f64_convert_i32_s(a: i32) -> f64

    "f64.convert_i32_u" as public function _f64_convert_i32_u(a: i32) -> f64

    "f32.convert_i64_s" as public function _f32_convert_i64_s(a: i64) -> f32

    "f32.convert_i64_u" as public function _f32_convert_i64_u(a: i64) -> f32

    "f64.convert_i64_s" as public function _f64_convert_i64_s(a: i64) -> f64

    "f64.convert_i64_u" as public function _f64_convert_i64_u(a: i64) -> f64

    "f32.demote_f64" as public function _f32_demote_f64(a: f64) -> f32

    "f64.promote_f32" as public function _f64_promote_f32(a: f32) -> f64

    "i32.reinterpret_f32" as public function _i32_reinterpret_f32(a: f32) -> i32

    "i64.reinterpret_f64" as public function _i64_reinterpret_f64(a: f64) -> i64

    "f32.reinterpret_i32" as public function _f32_reinterpret_i32(a: i32) -> f32

    "f64.reinterpret_i64" as public function _f64_reinterpret_i64(a: i64) -> f64

    "i32.extend8_s" as public function _i32_extend8_s(a: i32) -> i32

    "i32.extend16_s" as public function _i32_extend16_s(a: i32) -> i32

    "i64.extend8_s" as public function _i64_extend8_s(a: i32) -> i64

    "i64.extend16_s" as public function _i64_extend16_s(a: i32) -> i64

    "i64.extend32_s" as public function _i64_extend32_s(a: i32) -> i64

    "ref.null" as public function _ref_null -> i32

    "ref.is_null" as public function _ref_is_null(a: i32) -> i32

    "ref.func" as public function _ref_func -> funcref

    "i32.trunc_sat_f32_s" as public function _i32_trunc_sat_f32_s(a: f32) -> i32

    "i32.trunc_sat_f32_u" as public function _i32_trunc_sat_f32_u(a: f32) -> i32

    "i32.trunc_sat_f64_s" as public function _i32_trunc_sat_f64_s(a: f64) -> i32

    "i32.trunc_sat_f64_u" as public function _i32_trunc_sat_f64_u(a: f64) -> i32

    "i64.trunc_sat_f32_s" as public function _i64_trunc_sat_f32_s(a: f32) -> i64

    "i64.trunc_sat_f32_u" as public function _i64_trunc_sat_f32_u(a: f32) -> i64

    "i64.trunc_sat_f64_s" as public function _i64_trunc_sat_f64_s(a: f64) -> i64

    "i64.trunc_sat_f64_u" as public function _i64_trunc_sat_f64_u(a: f64) -> i64

    "memory.init" as public function _memory_init(a: i32, b: i32, c: i32)
    
    "data.drop" as public function _data_drop

    "memory.copy" as public function _memory_copy(a: i32, b: i32, c: i32)

    "memory.fill" as public function _memory_fill(a: i32, b: i32, c: i32)

    "table.init" as public function _table_init(a: i32, b: i32, c: i32)

    "elem.drop" as public function _elem_drop

    "table.copy" as public function _table_copy(a: i32, b: i32, c: i32)

    "table.grow" as public function _table_grow(a: i32, b: i32) -> i32

    "table.size" as public function _table_size(a: i32) -> i32
    
    "table.fill" as public function _table_fill(a: i32, b: i32, c: i32)

    
}

import "@utils" {
    "rand" as public function _rand(start: i32, end: i32) -> f64

    "print" as public function _print(ptr: i32, length: i32)

    "stdout.flush" as public function _stdout_flush

    "stdout.error" as public function _stdout_error() -> i32
}

import "@control" {
    "exit" as public function _exit(code?: i32) -> never

    "seq.stop" as public function _seq_stop(id: i32, messageOffset: i32, messageLength: i32, code: i32) -> never

    "seq.id" as public function _seq_id -> i32

    "seq.count" as public function _seq_count -> i32

    "seq.create" as public function _seq_create -> i32

    "seq.stacktrace_size" as public function _seq_stacktrace_size(seqId: i32) -> i32

    "seq.stacktrace" as public function _seq_stacktrace(seqId: i32, bufferPtr: i32, bufferSize: i32) -> i32

    "seq.yield" as public function _seq_yield

    "evtl.resolve" as public function _evtl_resolve(id: i32, valuePtr: i32, valueSize: i32)

    "evtl.abort" as public function _evtl_abort(id: i32)

    "prospect.run" as public function _prospect_run(funcPtr: i32) -> i32

    "atomic.compare_exchange" as public function _atomic_compare_exchange(ptr: i32, expected: i32, desired: i32) -> i32

    "mutex.lock" as public function _mutex_lock(mutex_id: i32)

    "mutex.unlock" as public function _mutex_unlock(mutex_id: i32)

    "time.now" as public function _time_now -> i64

    "time.set_timeout" as public function _set_timeout(timeout: i32, callbackPtr: i32)
}
