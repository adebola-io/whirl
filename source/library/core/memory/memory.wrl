module memory

use core.bool.Bool
use core.internals.builtin
use core.internals.never
use core.numeric.Int32
use core.sentinels.todo

public use ref.WeakRef

import "internal:mem" {
    /// Returns the value at a particular offset in linear memory.
    "at" as public function at(offset: Int32) -> Int32;
}

/// Returns the address of an object instance in linear memory.
public function getOffset<T>(value: T) -> Int32 {
    // False recursion. The implementation of this function
    // is built into the compiler.
    return getOffset(value)
}


/// Returns the last value on the call stack.
/// 
/// It will crash the program if it is called when 
/// the call stack has more than one value in it,
/// or when the call stack is empty.
public function stackLast() -> never {
    // False recursion. The implementation of this function
    // is built into the compiler.
    return stackLast()
}


/// Determines whether two variables point to the same location in memory
/// by comparing their pointer values.
/// 
/// This function is unlike regular equality with the `==` operator, which 
/// compares values by matching their bytes.
/// ### Usage
/// ```
/// use core.memory.same
/// var arr1 = []
/// var arr2 = arr1
/// 
/// assertThat(same(arr1, arr2))
/// assertThat(same(arr2, arr1))
/// ```
public function same<T>(left: T, right: T) -> Bool {
    todo()
}


/// Swaps the memory address of two values.
/// # Usage
/// ```
/// use core.memory.swap
/// 
/// var a = [1, 2, 3]
/// var b = [4, 5, 6]
/// swap(a, b)
/// 
/// assert(a).equals([4, 5, 6])
/// assert(b).equals([1, 2, 3])
/// ```
public function swap<T>(a: T, b: T) {
    builtin.swap(a, b)
}