/// Provides the fundamental `Array` model for storing and managing
/// ordered collections of values.
module array

use core.bool.Bool
use core.interfaces.Default
use core.iterate.{AsIterator, Iterable, Reversed}
use core.math.{max, min, psrandom}
use core.maybe.{none, some}
use core.numeric.Int32
use core.ops.{Addition, Orderable}
use core.sentinels.todo
use core.string.{Display, String}

public use uInt8Array.UInt8Array

/// A contiguous, growable list of items of the same type.
public model Array<T> 
    implements Addition
        + AsIterator<T, ArrayIter<T>> 
        + Default
        + Display|=(T implements Display)
{
    /// The number of items in the array.
    var len: Int32
    /// The current maximum amount of elements that can be in the array.
    var capacity: Int32
    /// The start of the array in the memory buffer.
    var offset: Int32
    /// The size of each element in the array.
    var elementSize: Int32
    /// Returns an iterator over elements in this array.
    /// ### Usage
    /// ```
    /// var arr = [1, 2, 3]
    /// var iter = arr.iter()
    /// 
    /// assert(iter.next()).equals(some(1))
    /// assert(iter.next()).equals(some(2))
    /// assert(iter.next()).equals(some(3))
    /// ```
    public function [AsIterator.iter] -> ArrayIter<T> {
        return ArrayIter(this)
    }
    /// Adds two arrays together.
    /// ### Usage
    /// ```
    /// var arr1 = [1, 2, 3, 4]
    /// var arr2 = [5, 6, 7, 8]
    /// var newArr = arr1 + arr2
    /// 
    /// assert(newArr).equals([1, 2, 3, 4, 5, 6, 7, 8])
    /// ```
    public function [Addition.add](other: []T) -> This {
        var newArray = [];
        this.iter().chain(other.iter()).forEach(fn(element) newArray.push(element))
        return newArray
    }
    /// Implementation of the default trait.
    /// ### Usage
    /// ```
    /// var empty: []Int32
    /// 
    /// assert(empty).equals([])
    /// ```
    static function [Default.init] -> This {
        return []
    }
    /// Converts an array to a string representation,
    /// given that its elements implement `Display`.
    /// ### Usage
    /// ```
    /// var arr = [1, 6, 7, 8, 10]
    /// var arrAsStr = arr.toStr()
    /// 
    /// assert(arrAsStr).equals("[1, 6, 7, 8, 10]")
    /// ```
    public function [Display.toStr]|=(T implements Display) -> String {
        var string = "["
        var i = 0
        for element in this {
            var elementStr = this[i].toStr()
            string.append(elementStr)
            if i + 1 != this.len { 
                string.append(", ")
            }
            i += 1
        }
        string.append("]")
        return string
    }
    /// Sorts the current array in place, given that its elements are orderable.
    /// ### Usage
    /// ```
    /// var arr = [34, 21, 89, 11, 20, 46]
    /// arr.sortInPlace()
    /// assert(arr).equals([11, 20, 21, 34, 46, 89])
    /// ```
    public function sortInPlace|=(T implements Orderable) {
        todo()
    }
    /// Returns a sorted version of an array
    /// given that its elements are orderable.
    /// 
    /// Sorting is stable, meaning that elements that have equal ordering 
    /// remain in their original position.
    /// ### Usage
    /// ```
    /// var arr = [26, 10, 8, 35, 16, 87, 1, 12]
    /// var arrSorted = arr.sort()
    /// 
    /// assert(arrSorted).equals([1, 8, 10, 12, 16, 26, 35, 87])
    /// ```
    public function sort|=(T implements Orderable) -> []T {
        todo()
    }
    /// Fills an array with default values, given that the element type can be defaulted.
    /// ### Usage
    /// ```
    /// var arr = [1, 2, 3]
    /// arr.reset()
    /// assert(arr).equals([0, 0, 0])
    /// ```
    public function reset|=(T implements Default) {
        var i = 0
        while i < this.len {
            var default: T
            this[i] = default
            i += 1
        }
    }
    /// Returns the largest value in an array.
    /// It returns an empty value if the array is empty.
    /// ### Usage
    /// ```
    /// var array = [2, 3, 4, 5, 6, 7]
    /// var largest = array.max()
    /// 
    /// assert(largest).equals(some(7))
    /// ```
    public function max|=(T implements Orderable) -> ?T {
        var maximum = this.first()?
        this.iter().forEach(fn(value) maximum = max(maximum, value))
        some(maximum)
    }
    /// Returns the smallest value in an array.
    /// It returns an empty value if the array is empty.
    /// ### Usage
    /// ```
    /// var array = [2, 3, 4, 5, 6, 7]
    /// var smallest = array.min()
    /// 
    /// assert(smallest).equals(some(2))
    /// ```
    public function min|=(T implements Orderable) -> ?T {
        var minimum = this.first()?
        this.iter().forEach(fn(value) minimum = min(minimum, value))
        some(minimum)
    }
    /// Returns the sum of all the elements in the array.
    /// If there are no elements in the array, it returns the default value of
    /// the given type.
    /// ### Usage
    /// ```
    /// var array = [1, 2, 3, 4]
    /// summed = array.sum()
    /// 
    /// assertThat(summed == 10)
    /// ```
    public function sum|=(T implements Addition + Default) -> T {
        var sum: T
        this.iter().forEach(fn(item) sum += item)
        sum
    }
    /// Concatenates the elements in an array into one string and returns it.
    /// 
    /// If no separator argument is specified, a single whitespace will be used instead.
    /// ### Usage
    /// ```
    /// var array = ["Best", "believe", "I'm", "still", "bejeweled"]
    /// var joined = array.join()
    /// 
    /// assertThat(joined == "Best believe I'm still bejeweled")
    /// 
    /// var array2 = [1, 2, 3, 4, 5]
    /// var joined2 = array2.join("+")
    /// 
    /// assertThat(joined2 == "1+2+3+4+5")
    /// ```
    public function join|=(T implements Display)(separator?: String) -> String {
        var separatorValue = separator.unwrapOr(" ")
        var string = ""
        var i = 0
        while i < this.len {
            string += this[i].toStr()
            if i + 1 != this.len {
                string += separatorValue
            }
        }
        return string
    }
    /// Appends the contents of one array to the end of the current array.
    /// ### Usage
    /// ```
    /// var array1 = [1, 2, 3, 4]
    /// var array2 = [5, 6, 7]
    /// 
    /// array1.append(array2)
    /// 
    /// assert(array1).equals([1, 2, 3, 4, 5, 6, 7])
    /// ```
    public function append(other: []T) {
        var i = 0
        while i < other.len {
            this.push(other[i])
            i += 1
        }
    }
    /// Returns the item at a particular index in the array, if it exists.
    /// 
    /// Indexes are zero-based, meaning that the first item is at index 0.
    /// ### Usage
    /// ```
    /// var arr = [1, 2, 3, 4]
    /// assertThat(arr.at(0) == some(1))
    /// assertThat(arr.at(1) == some(2))
    /// ```
    /// Elements can also be indexed from behind the array.
    /// Backward indexes are one-based, meaning the index -1 is the
    /// last item in the array.
    /// ```
    /// var arr = [15, 25, 35, 45, 55]
    /// assertThat(arr.at(-1) == some(55))
    /// ```
    public function at(index: Int32) -> ?T {
        if index >= 0 && index < this.len {
            return some(this[index])
        }
        index = this.len - index
        if index < this.len {
            return some(this[index])
        }
        return none()
    }
    /// Checks if an item is contained in the array.
    /// ### Usage
    /// ```
    /// var str = "Hello, world"
    /// var array = []
    /// array.push(str)
    /// 
    /// assertThat(array.contains(str))
    /// ```
    public function contains(value: T) -> Bool {
        this.indexOf(value).isSome()
    }
    /// Removes all elements in the array.
    /// ### Usage
    /// ```
    /// var arr = [1, 2, 3, 4]
    /// 
    /// arr.clear()
    /// assertThat(arr.length() == 0)
    /// assertThat(arr == [])
    /// ```
    public function clear {
        this = []
    }
    /// Returns the first item in the array, if it exists.
    /// ### Usage
    /// ```
    /// var arr = [20, 30, 40, 50, 60]
    /// assert(arr.first().unwrap()).equals(20)
    /// 
    /// var empty: []Int32 = []
    /// assertThat(empty.first() == none())
    /// ```
    public function first -> ?T {
        if this.len == 0 { none() } 
        else some(this[0])
    }
    /// Determines whether a given sub-array is contained within
    /// a main array. The order in the sub-array must be preserved
    /// in the main array for the result to be true.
    /// 
    /// ### Usage
    /// ```
    /// var mainArray = [1, 2, 3, 4, 5, 6]
    /// var subArray = [4, 5, 6]
    /// 
    /// assertThat(mainArray.includes(subArray))
    /// 
    /// var anotherSubArray = [4, 6, 5]
    /// assertThat(!mainArray.includes(anotherSubArray))
    /// ```
    public function includes(subarray: []T) -> Bool {
        if subarray.len == 0 {
            return true
        }
        for element in this {
            todo()
        }
        return false
    }
    /// Returns the zero-based index of a value in the array.
    /// 
    /// ### Usage
    /// ```
    /// var str1 = "Hello, world!"
    /// var str2 = "Welcome to a new era!"
    /// var str3 = "This is the future!"
    /// 
    /// var arr = [str1, str2, str3]
    /// assert(arr.indexOf(str2) == some(1)).
    /// ```
    public function indexOf(value: T) -> ?Int32 {
        var i = 0
        while i < this.len {
            if this[i] == value {
                return some(i)
            }
            i += 1
        }
        return none()
    }
    /// Inserts an element at an index in the array,
    /// shifting all suceeding elements forward.
    /// ### Usage
    /// ```
    /// var arr = [1, 3, 4, 5]
    /// arr.insert(1, 2)
    /// assert(arr.at(1) == some(2))
    /// ```
    public function insert(index: Int32, value: T) {
        todo()
    }
    /// Inserts all the items from another array at the start of this array,
    /// shifting all its prior elements forward.
    /// ### Usage
    /// ```
    /// var arr = [5, 6, 7, 8]
    /// arr.prepend([1, 2, 3, 4])
    /// assertThat(arr == [1, 2, 3, 4, 5, 6, 7, 8])
    /// ```
    public function prepend(prefix: []T) {
        var newArray = prefix
        newArray.append(this)
        this = newArray
    }
    /// Returns the element before the last element in this array,
    /// if it exists.
    /// ### Usage
    /// ```
    /// var arr = [5, 6, 7, 8]
    /// assertThat(arr.penultimate() == some(7))
    /// ```
    public function penultimate -> ?T {
        if this.len < 2 { none() } else { some(this[this.len - 2]) }
    }
    /// Divides the array into two new arrays: one containing elements that pass
    /// a test function, and another with elements that don't.
    /// ### Usage
    /// ```
    /// var arr = ["Arnold", "Daniel", "Harriet", "Donald", "Dele"]
    /// var [startsWithD, others] = arr.partition(fn(x) x.startsWith("D"))
    /// 
    /// assertThat(startsWithD == ["Donald", "Dele", "Daniel"])
    /// assertThat(others == ["Arnold", "Harriet"])
    /// ```
    public function partition(check: fn(item: T) -> Bool) -> [][]T {
        var trueItems = []
        var falseItems = []
        for item in this {
            if check(item) {
                trueItems.push(item)
            } else {
                falseItems.push(item)
            }
        }
        return [trueItems, falseItems]
    }
    /// Returns the number of items in the array.
    /// ### Usage
    /// ```
    /// var arr = [1, 2, 3, 4]
    /// assert(arr.length()).equals(4)
    /// ```
    public function length -> Int32 {
        return this.len
    }
    /// Adds an item to the end of the array.
    /// 
    /// ### Usage
    /// ```
    /// var array = [2, 4, 6, 8]
    /// assert(array.length()).equals(4)
    /// 
    /// array.push(10)
    /// assert(array).equals([2, 4, 5, 8, 10])
    /// assert(array.length()).equals(5)
    /// ```
    public function push(value: T) {
        if this.len == this.capacity {
            // todo.
        }
    }
    /// Removes an item from the end of the array.
    /// ### Usage
    /// ```
    /// var array = [1, 2, 3]
    /// 
    /// array.pop()
    /// assert(array).equals([1, 2])
    /// 
    /// array.pop()
    /// assert(array).equals([1])
    /// ```
    public function pop -> ?T {
        if this.len == 0 {
            return none()
        }
        var last = this[this.len - 1]
        this.len -= 1
        return some(last)
    }
    /// Returns an iterator that produces elements from the end of the array
    /// to the start.
    /// ### Usage
    /// ```
    /// var array = [7, 8, 9]
    /// var rev = array.reverse()
    /// 
    /// assertThat(rev.next() == some(9))
    /// assertThat(rev.next() == some(8))
    /// assertThat(rev.next() == some(7))
    /// 
    /// assertThat(rev.next() == none())
    /// ```
    public function reverse -> Reversed<T> {
        return Reversed(this)
    }
    /// Randomly selects a specific number of elements from
    /// the array.
    /// 
    /// If the length given is larger than the length of the
    /// original array, then it will be ignored, and a shuffled
    /// version of the whole array will be returned.
    /// ### Usage
    /// ```
    /// var arr = [1, 2, 3, 4, 5]
    /// var twoItems = arr.sample(2)
    /// ```
    public function sample(n: Int32) -> []T {
        if this.len == 0 {
            return []
        }
        if n > this.len {
            return this.shuffled()
        }
        var indices = []
        var chosen = []
        while chosen.len < n {
            var nextSelect = (psrandom() * 100).toFixed()
            var selected = Int32.fromStr(nextSelect)! % this.len
            if indices.contains(selected) {
                continue
            }
            indices.push(selected)
            chosen.push(this[selected])
            if (chosen.len == this.len) {
                break
            }
        }
        return chosen
    }
    /// Creates a new array consisting of a scalar value added 
    /// to each element of the current array.
    /// ### Usage
    /// ```
    /// var array = [1, 2, 3, 4, 5]
    /// var newArray = array.scalarAdd(5)
    /// 
    /// assert(newArray).equals([6, 7, 8, 9, 10])
    /// ```
    public function scalarAdd|=(T implements Addition)(value: T) -> []T{
        var newArray = []
        for element in this {
            newArray.push(element + value)
        }
        return newArray
    }
    /// Performs element-wise addition between this array and another array.
    /// ### Usage
    /// ```
    /// var array = [6, 4, 3, 4]
    /// var array2 = [5, 5, 3, 4]
    /// 
    /// var newArray = array.vectorAdd(array2)
    /// assert(newArray).equals([10, 9, 6, 8]) // adds the pairs of elements at indices.
    /// ```
    /// If both arrays are not the same size, it will copy the remaining elements from
    /// the bigger array and return an array that is its size.
    /// ```
    /// var array3 = [1, 2]
    /// var array4 = [4, 5, 6, 8]
    /// 
    /// var newArray2 = array3.scalarAdd(array4)
    /// assert(newArray).equals([5, 7, 6, 8]); // copies 6 and 8.
    /// ```
    public function vectorAdd|=(T implements Addition)(other: []T) -> []T {
        var newArray = []
        var i = 0
        while i < other.len or i < this.len {
            var a = this.at(i)
            var b = other.at(i)
            if a.isNone() && b.isNone() {
                break
            }
            if a.isNone() {
                newArray.push(b!)
            } else if b.isNone() {
                newArray.push(a!)
            } else {
                newArray.push(a! + b!)
            }
        }
        return newArray
    }
    /// Removes the first item in the array
    /// and shifts all the other items backward
    /// by one index.
    /// 
    /// This operation has a time complexity of _O(n)_.
    /// ### Usage
    /// ```
    /// var arr = [1, 2, 3, 4]
    /// var firstItem = arr.shift()
    /// 
    /// assert(arr).equals([2, 3, 4])
    /// assert(firstItem).equals(some(1))
    /// ```
    /// If there is no element in the array,
    /// then `none()` is returned, and the operation 
    /// does nothing.
    /// ```
    /// var arr = []
    /// var firstItem = arr.shift()
    /// 
    /// assert(arr).equals([])
    /// assert(firstItem).equals(none())
    /// ```
    public function shift -> ?T {
        if this.len == 0 {
            return none()
        }
        var first = this[0]
        this.offset += this.elementSize
        this.len -= 1
        return some(first)
    }
    /// Returns a new, shuffled version of the array.
    /// ### Usage
    /// ```
    /// var arr = [1, 2, 3]
    /// var shuffledArray = arr.shuffled()
    /// ```
    public function shuffled -> []T {
        return this.sample(this.len)
    }  
    /// Returns a reference to the last item in the array.
    public function last -> ?T {
        if this.len == 0 { none() } 
        else some(this[this.len - 1])
    }
}


/// An iterator built from the elements of an array.
public model ArrayIter<T> implements Iterable<T> {
    var array: Array<T>
    var idx: Int32
    
    new(array: Array<T>) {
        this.array = array
        this.idx = 0
    }

    public function [Iterable.next] -> ?T {
        var length = this.array.length()
        if length == this.idx {
            return none()
        }
        var nextItem = this.array[this.idx]
        this.idx += 1
        return some(nextItem)
    }
}
