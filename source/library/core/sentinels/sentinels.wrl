/// ## Control Flow Sentinels.
/// 
/// This module provides a collection of special functions that handle edge cases,
/// explain unconventional control flow, handle unexpected conditions and provide 
/// utility.
module sentinels

use core.{
    string.{Display, String},
    internals.never,
    maybe.{none, some},
    memory.Ptr,
    numeric.i32,
}

/// Indicates that the current piece of code is unfinished.
/// 
/// Developers can use this function as a temporary marker for incomplete work.
/// It is also useful for satisfying the type system when implementing other functionality.
/// 
/// Calling this function will *always* cause a sequence to crash.
/// ### Usage
/// ```
/// function positiveSquare(a: i32) -> Outcome<i32, String> {
///     if a >= 0 {
///         return ok(a * a)
///     } else {
///         todo() // will implement later.
///     }
/// }
/// ```
public function todo<M implements Display>(message?: M) -> never {
    var messageStr = message.map(fn (message) message.toString())
    return fatal(messageStr.orElse(fn some("Entered unfinished code.")))
}

/// Marks a point that should never be reached by normal execution flow.
/// 
/// It serves as a fallback mechanism to explicitly denote a code path that cannot be
/// encountered while running the program, but may not be written in a way that is provable by
/// the typechecker.
/// 
/// ### Usage
/// ```
/// use core.sentinels.unreachable
/// 
/// function validateInput(x: i32) {
///     if x != 0 {
///         return
///     }
///     if x < 0 {
///         unreachable() // unsigned integers are always positive.
///     }
///     // proceed with validation.
/// }
/// ```
/// 
/// The `unreachable` function will always cause an error, signifying an unexpected condition.
public function unreachable(message?: String) -> never {
    return fatal(message.orElse(fn some("Entered unreachable code.")))
}

/// Enters an infinite loop, effectively halting the current execution sequence until the program
/// ends. It is typically used to signal terminal conditions that should not immediately terminate, 
/// such as unrecoverable errors. 
/// 
/// Once called, it never returns, preventing any further code (within the same sequence) from being
/// executed.
public function forever -> never {
    while true {}
    unreachable()
}

import "internals:control" {
    /// Immediately halts the execution of the sequence with a given ID.
    "stop" as function stop(id: i32, messageOffset: i32, messageLength: i32) -> never

    /// Closes all sequences and exits the program with a given code.
    /// ### Usage
    /// ```
    /// use core.sentinels.exit
    /// exit(0)
    /// ```
    "exit" as public function exit(code?: i32) -> never
    /// Returns the ID of the current sequence.
    "getSeqId" as public function getSequenceID -> i32
}

/// Called when an execution sequence encounters an unrecoverable or
/// unexpected condition. It causes the sequence to
/// abruptly terminate or crash, unwinding the sequence's stack.
/// 
/// If the sequence has no recover callback attached, 
/// then the crash will bubble up, crashing the parent sequence, and then its parent,
/// up until it encounters a recovery, or it crashes the main program sequence.
///
/// ### Usage
/// ```
/// function divide(number: i32, divisor: i32) -> Float {
///     if divisor == 0 {
///         fatal(some("Cannot divide by zero!"))
///     } else {
///         return a / b
///     }
/// }
/// ```
public function fatal(message?: String) -> never {
    var errorMessage = message.unwrapOr("Fatal Sequence error.")
    // todo: generate stack trace.
    var messageOffset = Ptr.getOffset(errorMessage)
    var messageLength = errorMessage.length()
    var id = getSequenceID()
    stop(id, messageOffset, messageLength)
}

/// Called when an execution sequence encounters a recoverable error. It displays a
/// message at runtime, and continues execution with the normal flow.
public function nonfatal(message: String) {
    todo()
}

/// Caches the return value of a function based on its arguments. Subsequent
/// calls return the cached value instead of reexecuting the function.
/// 
/// It is useful for performance-sensitove scenarios where functions are 
/// repeatedly called with predictable outputs.
/// 
/// ### Usage
/// ```
/// use core.sentinels.memoize
/// 
/// function doStuff -> number {
///     print("Computing value...")
///     // Perform computations.
///     return 42
/// }
/// 
/// var memoized = memoize(doStuff)
/// 
/// assertThat(memoized() == 42) // prints "Computing value."
/// assertThat(memoized() == 42) // returns the value withut running the function again.
/// 
/// ```
public function memoize<T>(func: fn -> T) -> fn -> T {
    var value = none()
    return fn {
        if value.isNone() {
            value = some(func())
        }
        return value.unwrap()
    }
}

/// Wraps a function to ensures that it can only called once, and subsequent
/// calls have no effect.
/// 
/// It is useful for initilialization routines or event handlers that should
/// only run on the first trigger.
/// 
/// ### Usage
/// ```
/// use core.sentinels.once
/// 
/// var initializeApp = once(fn {
///     // perform initialization tasks.
/// })
/// initializeApp() // Runs the tasks.
/// initializeApp() // Does nothing.
/// ```
public function once(func: fn) -> fn {
    var hasRun = false
    return fn {
        if !hasRun { return }
        hasRun = true
        func()
    }
}

/// Performs no operation and returns void. Used as a placeholder or to
/// simply acknowledge a function call without any processing.
/// 
/// ### Usage
/// ```
/// use core.sentinels.noop
/// 
/// function handleTask<T>(value: T, optionalCallback: fn()) {
///     // tasks handling..
/// }
/// handleTask("", noop)
/// ```
public function noop {}

/// Returns a function that always returns the same value.
/// 
/// It can be used to simplify conditional logic or create
/// 'constant' functions.
/// 
/// ### Usage
/// ```
/// use core.sentinels.always
/// 
/// var alwaysTrue = always(true)
/// var alwaysFalse = always(false)
/// 
/// if (alwaysTrue()) { // condition will always be true.
///     // ...
/// }
/// ```
public function always<T>(value: T) -> fn -> T {
    return fn value
}

/// The identity function simply returns whatever value is passed
/// as an argument into it. Its best use is in cases where you need
/// a function as an argument, but don't want to modify the input.
/// 
/// ### Usage
/// ```
/// var originalValue = 42
/// var returnedValue = identity(originalValue)
/// 
/// assert(originalValue).equals(returnedValue)
/// ```
public function identity<T>(value: T) -> T {
    return value
}
