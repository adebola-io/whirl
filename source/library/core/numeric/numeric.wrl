module numeric

use core.boolean.boolean
use core.collections.Hash
use core.interfaces.Default
use core.internals.wasm
use core.maybe.some
use core.ops.{
    Addition, Sequenced, Subtraction, 
    Multiplication, Division, Orderable,
    Ordering, Bitwise
}
use core.string.{string, Display, FromStr}

/// Interface for rendering 
public interface FixedPoint {
    /// Returns a string representing a number in fixed-point notation.
    /// ### Usage
    /// ```
    /// ```
    public function toFixed(digits?: i32) -> string
}

public interface Convertible {
    /// Inteprets the number as a floating 32-bit number.
    public function f32 -> f32 {
        core.sentinels.todo()
    }

    public function i64 -> i64 {
        core.sentinels.todo()
    }

    /// Converts the current number into a floating 64-bit number.
    public function f64 -> f64 {
        core.sentinels.todo()
    }
}

/// An 32-bit integer.
public model i32 
    implements Display 
        + Addition 
        + Subtraction
        + Multiplication
        + Division
        + Bitwise
        + Sequenced 
        + Default 
        + Orderable 
        + FromStr
        + Hash
        + Convertible
{
    /// Adds two i32 values.
    /// ### Usage
    /// ```
    /// var a = 1
    /// var b = 2
    /// 
    /// assertThat(a.add(b) == 3)
    /// ```
    public function [Addition.add](other: i32) -> i32 {
        return wasm.__i32_add(this, other)
    }

    /// Subtracts two i32 values.
    /// ### Usage
    /// ```
    /// var a = 3
    /// var b = 2
    /// 
    /// assertThat(a.sub(b) == 1) // 3 - 2 
    /// ```
    public function [Subtraction.sub](other: i32) -> i32 {
        return wasm.__i32_sub(this, other)
    }

    /// Multiplies this value by another.
    /// ### Usage
    /// ```
    /// var a = 2
    /// var b = 3
    /// 
    /// assertThat(a.mul(b) == 3)
    /// ```
    public function [Multiplication.mul](other: i32) -> i32 {
        return wasm.__i32_mul(this, other)
    }

    /// Divides this i32 by another i32.
    /// ### Usage
    /// ```
    /// var a = 4
    /// var b = 2
    /// 
    /// assertThat(a.div(b) == 2)
    /// ```
    public function [Division.div](other: i32) -> i32 {
        return wasm.__i32_div_s(this, other)
    }

    /// Returns the remainder after dividing this i32 by another i32.
    /// ### Usage
    /// ```
    /// var a = 5
    /// var b = 3
    /// 
    /// assertThat(a.rem(b) == 2)
    /// ```
    public function rem(other: i32) -> i32 {
        return wasm.__i32_rem_s(this, other)
    }

    /// Returns the bitwise AND of this i32 and another.
    /// ### Usage
    /// ```
    /// var a = 5
    /// var b = 3
    /// 
    /// assertThat(a.bitwiseAnd(b) == 1)
    /// ```
    public function [Bitwise.bitand](other: i32) -> i32 {
        return wasm.__i32_and(this, other)
    }

    /// Returns the bitwise OR of this i32 and another.
    /// ### Usage
    /// ```
    /// var a = 5
    /// var b = 3
    /// 
    /// assertThat(a.bitwiseOr(b) == 7)
    /// ```
    public function [Bitwise.bitor](other: i32) -> i32 {
        return wasm.__i32_or(this, other)
    }

    /// Returns the bitwise XOR of this i32 and another.
    /// ### Usage
    /// ```
    /// var a = 5
    /// var b = 3
    /// 
    /// assertThat(a.bitwiseXor(b) == 6)
    /// ```
    public function [Bitwise.bitxor](other: i32) -> i32 {
        return wasm.__i32_xor(this, other)
    }

    /// Returns the bitwise left shift of this i32 and another.
    /// ### Usage
    /// ```
    /// var a = 5
    /// var b = 3
    /// 
    /// assertThat(a.bitwiseLShift(b) == 10)
    /// ```
    public function [Bitwise.lshift](other: i32) -> i32 {
        return wasm.__i32_shl(this, other)
    }

    /// Returns the bitwise right shift of this i32 and another.
    /// ### Usage
    /// ```
    /// var a = 5
    /// var b = 3
    /// 
    /// assertThat(a.bitwiseRShift(b) == 1)
    /// ```
    public function [Bitwise.rshift](other: i32) -> i32 {
        return wasm.__i32_shr_s(this, other)
    }

    /// Returns the next item in a sequence.
    /// ### Usage
    /// ```
    /// var a = 1
    /// assertThat(a.nextItem() == 2)
    /// ```
    public function [Sequenced.nextItem] -> ?i32 {
        return some(wasm.__i32_add(this, 1))
    }

    static function [Default.init] -> i32 {
        return 0
    }

    /// Returns the ordering of this `i32` in relation to another `i32`.
    /// ### Usage
    /// ```
    /// var x = 1
    /// var y = 2
    /// 
    /// assertThat(x.compare(y) == Ordering.Less)
    /// assertThat(y.compare(x) == Ordering.Greater)
    /// ```
    public function [Orderable.compare](other: i32) -> Ordering {
        if wasm.__i32_gt_s(this, other) == 1 {
            return Ordering.Greater
        }
        if wasm.__i32_lt_s(this, other) == 1 {
            return Ordering.Less
        }
        return Ordering.Equal
    }

    /// Returns true if the value is 0.
    /// ### Usage
    /// ```
    /// var x = 0
    /// assertThat(x.isZero())
    /// ```
    public function isZero -> boolean {
        return wasm.__i32_eqz(this) == 1
    }

    /// Returns true if the value is greater than 0.
    /// ### Usage
    /// ```
    /// var x = 1
    /// assertThat(x.isPositive())
    /// ```
    public function isPositive -> boolean {
        return this.isZero() or wasm.__i32_gt_s(this, 0) == 1
    }

    /// Returns true if the value is less than 0.
    /// ### Usage
    /// ```
    /// var x = -1
    /// assertThat(x.isNegative())
    /// ```
    public function isNegative -> boolean {
        return wasm.__i32_lt_s(this, 0) == 1
    }

    public static function fromi64(x: i64) -> i32 {
        return wasm.__i32_wrap_i64(x)
    }
}

public model i64
    implements Display 
        + Addition 
        + Subtraction
        + Multiplication
        + Division
        + Bitwise
        + Sequenced 
        + Default 
        + Orderable 
        + FromStr
        + Hash
        + Convertible
{
    /// Adds two i64 values.
    /// ### Usage
    /// ```
    /// var a: i64 = 1
    /// var b: i64 = 2
    /// 
    /// assertThat(a.add(b) == 3)
    /// ```
    public function [Addition.add](other: i64) -> i64 {
        return wasm.__i64_add(this, other)
    }

    /// Subtracts two i64 values.
    /// ### Usage
    /// ```
    /// var a: i64 = 3
    /// var b: Int63 = 2
    /// 
    /// assertThat(a.sub(b) == 1) // 3 - 2 
    /// ```
    public function [Subtraction.sub](other: i64) -> i64 {
        return wasm.__i64_sub(this, other)
    }

    /// Multiplies this value by another.
    /// ### Usage
    /// ```
    /// var a: i64 = 2
    /// var b: i64 = 3
    /// 
    /// assertThat(a.mul(b) == 3)
    /// ```
    public function [Multiplication.mul](other: i64) -> i64 {
        return wasm.__i64_mul(this, other)
    }

    /// Divides this i64 by another i64.
    /// ### Usage
    /// ```
    /// var a: i64 = 4
    /// var b: i64 = 2
    /// 
    /// assertThat(a.div(b) == 2)
    /// ```
    public function [Division.div](other: i64) -> i64 {
        return wasm.__i64_div_s(this, other)
    }

    /// Returns the remainder after dividing this i64 by another i64.
    /// ### Usage
    /// ```
    /// var a: i64 = 5
    /// var b: i64 = 3
    /// 
    /// assertThat(a.rem(b) == 2)
    /// ```
    public function rem(other: i64) -> i64 {
        return wasm.__i64_rem_s(this, other)
    }

    /// Returns the bitwise AND of this i64 and another.
    /// ### Usage
    /// ```
    /// var a: i64 = 5
    /// var b: i64 = 3
    /// 
    /// assertThat(a.bitwiseAnd(b) == 1)
    /// ```
    public function [Bitwise.bitand](other: i64) -> i64 {
        return wasm.__i64_and(this, other)
    }

    /// Returns the bitwise OR of this i64 and another.
    /// ### Usage
    /// ```
    /// var a: i64 = 5
    /// var b: i64 = 3
    /// 
    /// assertThat(a.bitor(b) == 7)
    /// ```
    public function [Bitwise.bitor](other: i64) -> i64 {
        return wasm.__i64_or(this, other)
    }

    /// Returns the bitwise XOR of this i64 and another.
    /// ### Usage
    /// ```
    /// var a: i64 = 5
    /// var b: i64 = 3
    /// 
    /// assertThat(a.bitxor(b) == 6)
    /// ```
    public function [Bitwise.bitxor](other: i64) -> i64 {
        return wasm.__i64_xor(this, other)
    }

    /// Returns the bitwise left shift of this i64 and another.
    /// ### Usage
    /// ```
    /// var a: i64 = 5
    /// var b: i64 = 3
    /// 
    /// assertThat(a.lshift(b) == 10)
    /// ```
    public function [Bitwise.lshift](other: i64) -> i64 {
        return wasm.__i64_shl(this, other)
    }

    /// Returns the bitwise right shift of this i32 and another.
    /// ### Usage
    /// ```
    /// var a = (5).i64()
    /// var b = (3).i64()
    /// 
    /// assertThat(a.rshift(b) == 1)
    /// ```
    public function [Bitwise.rshift](other: i64) -> i64 {
        return wasm.__i64_shr_s(this, other)
    }

    /// Returns the next item in a sequence.
    /// ### Usage
    /// ```
    /// var a = (1).asf64()
    /// assertThat(a.nextItem() == 2)
    /// ```
    public function [Sequenced.nextItem] -> ?i64 {
        return some(wasm.__i64_add(this, (1).i64()))
    }

    /// Returns the default value of `i64`.
    /// 
    /// ### Usage
    /// ```
    /// var x: i64
    /// 
    /// assertThat(x == (0).i64())
    /// ```
    static function [Default.init] -> i64 {
        return (0).i64()
    }

    /// Returns the ordering of this `i32` in relation to another `i32`.
    /// ### Usage
    /// ```
    /// var x = (1).i64()
    /// var y = (2).i64()
    /// 
    /// assertThat(x.compare(y) == Ordering.Less)
    /// assertThat(y.compare(x) == Ordering.Greater)
    /// ```
    public function [Orderable.compare](other: i64) -> Ordering {
        if wasm.__i64_gt_s(this, other) == 1 {
            return Ordering.Greater
        }
        if wasm.__i64_lt_s(this, other) == 1 {
            return Ordering.Less
        }
        return Ordering.Equal
    }

    /// Returns true if the value is 0.
    /// ### Usage
    /// ```
    /// var x = (0).i64()
    /// assertThat(x.isZero())
    /// ```
    public function isZero -> boolean {
        return wasm.__i64_eqz(this) == 1
    }

    /// Returns true if the value is greater than 0.
    /// ### Usage
    /// ```
    /// var x = (1).i64()
    /// assertThat(x.isPositive())
    /// ```
    public function isPositive -> boolean {
        return this.isZero() or wasm.__i64_gt_s(this, (0).i64()) == 1
    }

    /// Returns true if the value is less than 0.
    /// ### Usage
    /// ```
    /// var x = (-1).i64()
    /// assertThat(x.isNegative())
    /// ```
    public function isNegative -> boolean {
        return wasm.__i64_lt_s(this, (0).i64()) == 1
    }
}

/// A 32-bit floating number.
public model f32
    implements Display 
    + Addition
    + Subtraction
    + Multiplication
    + Division 
    + Default 
    + Orderable 
    + FromStr
    + FixedPoint
    + Hash
    + Convertible
{
    public function [Addition.add](other: f32) -> f32 {
        return wasm.__f32_add(this, other)
    }

    public function [Subtraction.sub](other: f32) -> f32 {
        return wasm.__f32_sub(this, other)
    }

    public function [Division.div](other: f32) -> f32 {
        return wasm.__f32_div(this, other)
    }

    public function [Multiplication.mul](other: f32) -> f32 {
        return wasm.__f32_mul(this, other)
    }

    public function [Bitwise.bitand](other: f32) -> f32 {
        core.sentinels.todo()
    }

    // Compiler built in.
}


/// A 64-bit floating number.
public model f64 
    implements Display 
    + Addition
    + Subtraction
    + Multiplication
    + Division 
    + Default 
    + Orderable 
    + FromStr
    + FixedPoint
    + Hash
    + Convertible
{
    // Compiler built in.
}

/// A union type for integers.
public type int = i32 | i64
/// A union type for floats.
public type float = f32 | f64

/// A union data type to represent a number.
public type number = int | float