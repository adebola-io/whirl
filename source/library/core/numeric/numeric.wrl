module numeric

use core.{
    bool.Bool,
    collections.Hash,
    interfaces.Default,
    internals.wasm,
    ops.{
        Addition, Sequenced, Subtraction, 
        Multiplication, Division, Orderable,
        Bitwise
    },
    string.{String, Display, FromStr},
}

/// Interface for rendering 
public interface FixedPoint {
    /// Returns a string representing a number in fixed-point notation.
    /// ### Usage
    /// ```
    /// ```
    public function toFixed(digits?: Int32) -> String
}

/// An 32-bit integer.
public model Int32 
    implements Display 
        + Addition 
        + Subtraction
        + Multiplication
        + Division
        + Bitwise
        + Sequenced 
        + Default 
        + Orderable 
        + FromStr
        + Hash
{
    /// Adds two Int32 values.
    /// ### Usage
    /// ```
    /// var a = 1
    /// var b = 2
    /// 
    /// assertThat(a.add(b) == 3)
    /// ```
    public function [Addition.add](other: Int32) -> Int32 {
        return wasm.__i32_add(this, other)
    }

    /// Subtracts two Int32 values.
    /// ### Usage
    /// ```
    /// var a = 3
    /// var b = 2
    /// 
    /// assertThat(a.sub(b) == 1) // 3 - 2 
    /// ```
    public function [Subtraction.sub](other: Int32) -> Int32 {
        return wasm.__i32_sub(this, other)
    }

    /// Multiplies this value by another.
    /// ### Usage
    /// ```
    /// var a = 2
    /// var b = 3
    /// 
    /// assertThat(a.mul(b) == 3)
    /// ```
    public function [Multiplication.mul](other: Int32) -> Int32 {
        return wasm.__i32_mul(this, other)
    }

    /// Divides this Int32 by another Int32.
    /// ### Usage
    /// ```
    /// var a = 4
    /// var b = 2
    /// 
    /// assertThat(a.div(b) == 2)
    /// ```
    public function [Division.div](other: Int32) -> Int32 {
        return wasm.__i32_div_s(this, other)
    }


    /// Returns true if the value is less than 0.
    /// ### Usage
    /// ```
    /// var x = -1
    /// assertThat(x.isNegative())
    /// ```
    public function isNegative -> Bool {
        return wasm.__i32_lt_s(this, 0) == 1
    }
    // Compiler built in.
}

public model Int64
    implements Display 
        + Addition 
        + Subtraction
        + Multiplication
        + Division
        + Bitwise
        + Sequenced 
        + Default 
        + Orderable 
        + FromStr
        + Hash
{
    /// Returns true if the value is less than 0.
    /// ### Usage
    /// ```
    /// var x: Int64 = -1
    /// assertThat(x.isNegative())
    /// ```
    public function isNegative -> Bool {
        return wasm.__i64_lt_s(this, 0) == 1
    }
    // Compiler built-in.
}

/// A 32-bit floating number.
public model Float32
    implements Display 
    + Addition
    + Subtraction
    + Multiplication
    + Division 
    + Default 
    + Orderable 
    + FromStr
    + FixedPoint
    + Hash
{
    // Compiler built in.
}


/// A 64-bit floating number.
public model Float64 
    implements Display 
    + Addition
    + Subtraction
    + Multiplication
    + Division 
    + Default 
    + Orderable 
    + FromStr
    + FixedPoint
    + Hash
{
    // Compiler built in.
}

/// A union type for integers.
public type Int = Int32 | Int64
/// A union type for floats.
public type Float = Float32 | Float64

/// A union data type to represent a number.
public type Number = Int | Float