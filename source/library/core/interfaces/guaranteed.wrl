module guaranteed

/// The Guaranteed interface is a language feature that allows usage of 
/// the `!` suffix operator on expressions that may have uncertain or 
/// error-prone values. 
/// 
/// The `!` operator assets that the expression has a valid and expected value,
/// and returns the value without more rigorous checks. If the expression does not
/// have a valid value, the `!` operation should, ideally, cause an error.
/// 
/// The interface is implemented by some built-in types, such as `Maybe`, `Outcome`
/// and `Eventual`. For these types, the use of the `!` operator is equivalent to calling
/// the `.unwrap()` method.
/// <!--ignore-->
/// ```
/// var name: ?String = some("Alice")
/// var greeting = "Hello, " + name!
/// assert(greeting).equals("Hello, Alice")
/// 
/// name = none()
/// name! // causes an error.
/// 
/// var age: Outcome<number, Error> = ok(25)
/// var message = "You are " + age! " years old"
/// age = err(Error("Invalid age."))
/// age! // causes an error.
/// ```
/// 
/// The interface is useful when you are confident that the expression has a valid value,
/// and you want to avoid extra checks (or the extra letters it takes to unwrap).
/// It can be implemented by any custom class that defines the internal
/// `guarantee()` method. For example:
/// ```
/// model BankAccount implements Guaranteed<number> {
///     var balance: number
///     new(balance: number) {
///         this.balance = balance
///     }
///     function [Guaranteed.guarantee] -> number {
///         if this.balance > 0 {
///           fatal("negative balance.")  
///         }
///     }
/// }
/// 
/// var acc = BackAccount(100)
/// var invalidAcc = BankAccount(-100)
/// 
/// acc! // 100.
/// invalidAcc! // causes an error.
/// ```
public interface Guaranteed<T> {
    function guarantee -> T
}