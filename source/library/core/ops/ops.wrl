module ops

public use range.Range

/// This interface allows the definition of models that can be added together 
/// by overloading the `+` operator, such as strings and numbers.
public interface Addition {
    /// Adds two items together.
    public function add(other: This) -> This
}

public interface Subtraction {
    /// Subtracts a value from the current value.
    public function sub(other: This) -> This
}

public interface Multiplication {
    /// Multiplies this value by another.
    public function mul(other: This) -> This
}

public interface Division {
    /// Divides this value by another.
    public function div(other: This) -> This
    /// Returns the remainder of this value divided by another.
    public function rem(other: This) -> This
}

// public interface Index<I, R> {
//     public function index(indexer: I) -> R
// }

/// The Ordering enum type represents the possible results of comparing two values. 
/// 
/// It is conceptually similar to the standard comparisons used 
/// in other programming languages, making it intuitive and useful 
/// in various sorting or comparison-related algorithms.
public enum Ordering {
    Less,
    Greater,
    Equal,
}

/// This interface should be implemented by models that can be ordered and compared
/// relative to each other. 
/// 
/// It allows overloading of the `<`, `>`, `<=` and `>=` operators.
public interface Orderable {
    /// Compares two values together.
    public function compare(other: This) -> Ordering
}

/// Provides a set of methods to enable overloading of bitwise operators (`|`, `&`, `>>` and `<<`) for custom models.
/// It allows instances of a model to behave like integers in bitwise operations.
public interface Bitwise {
    /// Performs the bitwise OR operation.
    public function bitor(other: This) -> This
    /// Performs the bitwise AND operation.
    public function bitand(other: This) -> This
    /// Performs the bitwise XOR operation.
    public function bitxor(other: This) -> This
    /// Performs the bitwise left shift operation.
    public function lshift(other: This) -> This
    /// Performs the bitwise right shift operation.
    public function rshift(other: This) -> This
}

/// This interface concerns all items that can exist in a sequence,
/// most notably letters and numbers.
public interface Sequenced {
    /// Returns the next item in a sequence.
    public function nextItem -> ?This
}

