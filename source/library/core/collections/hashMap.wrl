module hashMap

use core.sentinels.todo
use core.interfaces.Default
use core.iterate.{AsIterator, Iterable}
use core.numeric.Int32
use ntuple.Tuple

public interface Hasher {

}

public interface Hash {
    /// Feeds this value into a given hasher.
    // public function hash<H implements Hasher>(state: H)
}

import "internal:map" {
    /// Creates a new Hashmap and returns its unique identifier.
    "newMap" as function newMap() -> Int32;
}

/// An interface to be implemented by models that can be transformed into
/// a hashmap of sorts.
public interface ToMap<K implements Hash, V> {
    public function toMap -> HashMap<K, V>
}

/// A hashmap implementation in Whirlwind.
/// 
/// Hashmaps are used to store key-value pairs. 
public model HashMap<K implements Hash, V> 
    implements AsIterator<Tuple<K, V>, HashMapIterable<K, V>> 
    + Default
{
    var id: Int32

    new(){
        this.id = newMap()
    }

    public function [AsIterator.iter] -> HashMapIterable<K, V> {
        return HashMapIterable(this)
    }
    static function [Default.init] -> This {
        return HashMap()
    }
    /// Inserts a key-value pair into the hashmap.
    /// 
    /// If the key is already present in the map, then it will be replaced.
    /// ### Usage
    /// ```
    /// var map = HashMap()
    /// map.set("hello", "world")
    /// 
    /// assert(map.get("hello")).equals(some("world"))
    /// ```
    public function set(key: K, value: V) -> V {
        todo()
    }
    /// Retrieves a value from the hashmap.
    /// ### Usage
    /// ```
    /// var map = HashMap()
    /// map.set(10, "greetings")
    /// 
    /// var value = map.get(10)
    /// assert(value).equals(some("greetings"))
    /// ```
    public function get(key: K) -> ?V {
        todo()
    }
    /// Removes a key-value pair from the hashmap.
    /// ### Usage
    /// ```
    /// 
    /// ```
    public function remove(key: K) -> ?V {
        todo()
    }
    /// Returns the number of elements in the map.
    public function length -> Int32 {
        todo()
    }
}

public model HashMapIterable<K implements Hash, V> implements Iterable<Tuple<K, V>> {
    var _map: HashMap<K, V>

    new(map: HashMap<K, V>) {
        this._map = map
    }

    public function [Iterable.next] -> ?Tuple<K, V> {
        todo()
    }
}


