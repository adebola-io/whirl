module set

use core.boolean.boolean
use core.iterate.{AsIterator, Iterable}
use core.numeric.i32
use core.string.{Display, String}

use super.{Hash, HashMap, HashMapKeys}


public model SetIterator<T implements Hash> implements Iterable<T> {
    var inner: HashMapKeys<T>

    new(inner: HashMapKeys<T>) {
        this.inner = inner
    }

    public function [Iterable.next] -> ?T {
        return this.inner.next()
    }
}

/// An unordered data structure that stores a collection 
/// of unique elements, akin to the mathematical concept of a set.
// todo: replace with bitset representation.
public model Set<T implements Hash> 
    implements AsIterator<T, SetIterator<T>> 
    + Display|=(T implements Display)
    + Hash
{
    var items: HashMap<T, boolean>
    new(data?: []T) {
        var dataVal = data.valueOrDefault()
        this.items = HashMap()
        var i = 0
        while i < dataVal.length() {
            var {} = this.items.set(dataVal[i], true)
        }
    }

    public function [AsIterator.iter] -> SetIterator<T> {
        return SetIterator(this.items.keys())
    }
    public function [Display.toString]|=(T implements Display) -> String {
        var str = "Set { "
        for { a as idx, b as tuple } in this.items.iter().enumerate() {
            var { a as item } = tuple
            str += item.toString()
            if idx + 1 != this.items.length() {
                str += ", "
            }
        }
        str += " }"
        return str
    }
    /// Adds an element to the set.
    /// 
    /// ### Usage
    /// ```
    /// var set = Set()
    /// set.add("hello")
    /// 
    /// assertThat(set.has("hello"))
    /// ```
    public function add(element: T) {
        var {} = this.items.set(element, true)
    }
    /// Checks if an element is contained within the current set.
    public function has(element: T) -> boolean {
        this.items.get(element).isSome()
    }
    /// Returns true if the set has no elements.
    public function isEmpty -> boolean {
        this.items.length() == 0
    }
    /// Removes an element from the set. 
    /// If the element is not in the set, then nothing happens.
    /// ### Usage
    /// ```
    /// var set = Set()
    /// 
    /// set.add(1)
    /// set.add(2)
    /// set.remove(1)
    /// 
    /// assertThat(!set.has(1))
    /// ```
    public function remove(element: T) {
        var {} = this.items.remove(element)
    }
    /// Returns true if the current set contains the exact same 
    /// elements as the other.
    public function equals(other: This) -> boolean {
        for key in this.items.keys() {
            if !other.has(key) {
                return false
            }
        }
        for key in other.items.keys() {
            if !this.has(key) {
                return false
            }
        }
        return true
    }
    /// Returns a new set consisting of the elements from the current
    /// set that are not in another set.
    public function difference(other: This) -> This {
        var difference = Set()
        for element in this.items.keys() {
            if !other.has(element) {
                difference.add(element)
            }
        }
        return difference
    }
    /// Returns true if the current set has no elements in common with 
    /// another set.
    public function isDisjointFrom(other: This) -> boolean {
        this.intersection(other).isEmpty()
    }
    /// Generates a union set by combining the elements of the 
    /// current set with the elements of another set.
    /// ### Usage
    /// ```
    /// var setA = Set([1, 2, 3, 4])
    /// var setB = Set([3, 4, 5, 6])
    /// 
    /// var union = setA.union(setB)
    /// 
    /// assertThat(union.equals(Set([1, 2, 3, 4, 5, 6])))
    /// ```
    public function union(other: This) -> This {
        var unionSet = Set()
        for item in this.items.keys().chain(other.items.keys()) {
            unionSet.add(item)
        }
        return unionSet
    }
    /// Generates an intersection set by selecting the common elements
    /// between the current set and another set.
    /// ### Usage
    /// ```
    /// var setA = Set([1, 2, 3, 4])
    /// var setB = Set([3, 4, 5, 6])
    /// var union = setA.intersection(setB)
    /// 
    /// assertThat(union.equals(Set([3, 4])))
    /// ```
    public function intersection(other: This) -> This {
        var unionSet = Set()
        for { a as element} in this.items {
            if other.has(element) {
                unionSet.add(element)
            }
        }
        return unionSet
    }
    /// Returns the count of elements in the set.
    /// ### Usage
    /// ```
    /// var set = Set([1, 2, 8, 9])
    /// 
    /// assert(set.cardinality()).equals(4)
    /// ```
    public function cardinality -> i32 {
        return this.items.length()
    }
    /// Returns the number of elements in the set.
    /// ### Usage
    /// ```
    /// ```
    public function length -> i32 {
        return this.items.length()
    }
    /// Returns the power set of the current set, i.e.
    /// the set of all possible subsets.
    public function powerSet -> Set<Set<T>> {
        var result = Set()
        var elements = []
        for element in this.items.keys() {
            elements.push(element)
        }
        var n = elements.length()
        var powerSetSize = 1 << n  // 2^n

        for i in 0..powerSetSize {
            var subset = Set()
            for j in 0..n {
                if (i & (1 << j)) != 0 {
                    subset.add(elements[j]);
                }
            }
            result.add(subset)
        }
        return result
    }
    /// Returns true if the current set can be found within
    /// another.
    /// ### Usage
    /// ```
    /// var setA = Set([1, 2, 3, 4, 5])
    /// var setB = Set([2, 3, 5])
    /// 
    /// assertThat(setB.isSubsetOf(setA))
    /// ```
    public function isSubsetOf(other: This) -> boolean {
        for { a as element } in this.items {
            if !other.has(element) {
                return false
            }
        }
        return true
    }
    /// Returns true if the current set contains all the elements
    /// from another.
    /// ### Usage
    /// ```
    /// var setA = Set([1, 2, 3, 4, 5])
    /// var setB = Set([2, 3, 5])
    /// 
    /// assertThat(setA.isSupersetOf(setB))
    /// ```
    public function isSupersetOf(other: This) -> boolean {
        other.isSubsetOf(this)
    }
}
