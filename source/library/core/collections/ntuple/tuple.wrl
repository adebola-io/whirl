module tuple

use ntuple.NTuple
use core.string.{Display, string}
use core.maybe.some

/// A simple ordered pair of items. Elements within a tuple can be of any type,
/// and the order in which they are defined is preserved.
public model Tuple<T, U> 
    implements Display|=(T implements Display and U implements Display)
    + NTuple<T, U> 
{
    public var a: T
    public var b: U
    
    new(first: T, second: U) {
        this.a = first
        this.b = second
    }

    /// Converts the tuple to a string, provided that its elements implement
    /// Display.
    /// ### Usage
    /// ```
    /// var tuple = pair(true, 123)
    /// var str = tuple.toStr()
    /// 
    /// assert(str).equals("Tuple(true, 123)")
    /// ```
    public function [Display.toStr]|=(
        T implements Display and U implements Display
    ) -> string {
        return string.fmt("Tuple(%, %)")
            .add(this.a)
            .add(this.b)
            .finish()
    }

    public function [NTuple.first] -> ?T {
        return some(this.a)
    }
    public function [NTuple.second] -> ?U {
        return some(this.b)
    }

    /// Returns a tuple with the position of the two items in the tuple reversed.
    /// ### Usage
    /// ```
    /// use core.collections.Tuple
    /// 
    /// var tuple = Tuple(true, "story")
    /// var swapped = tuple.swap()
    /// assertThat(swapped == Tuple("story", true))
    /// ```
    public function swap -> Tuple<U, T> {
        Tuple(this.b, this.a)
    }
}

/// Takes two arguments of any type and returns a `Tuple` containing them.
/// 
/// It is useful for grouping related data or for passing multiple values 
/// as a single unit.
/// 
/// ### Usage
/// ```
/// var pair1 = pair(1, "apple")
/// var pair2 = pair(true, [1, 2, 3])
/// 
/// // Accessing elements of the tuple.
/// var first = pair1.a 
/// assert(first).equals(1)
/// 
/// var second = pair1.b
/// assert(second).equals("apple")
/// ```
public function pair<T, U>(a: T, b: U) -> Tuple<T, U> {
    return Tuple(a, b)
}