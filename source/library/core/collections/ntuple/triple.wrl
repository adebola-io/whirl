module triple

use core.maybe.some
use core.string.{Display, String}
use core.interfaces.Default

use ntuple.NTuple


/// A set containing four individual items.
public model Triple<T, U, V> 
    implements Display|=(
            T implements Display
            and U implements Display 
            and V implements Display
        ) + Default|=(T implements Default
            and U implements Default
            and V implements Default) 
        + NTuple<T, U, V>
{
    public var a: T
    public var b: U
    public var c: V

    new(first: T, second: U, third: V) {
        this.a = first
        this.b = second
        this.c = third
    }

    public function [Display.toString]|=(
        T implements Display 
            and U implements Display
            and V implements Display
        ) -> String
    {
        return String.fmt("Triple(%, %, %)")
            .add(this.a)
            .add(this.b)
            .add(this.c)
            .finish()
    }

    static function [Default.init]|=(
        T implements Default
            and U implements Default
            and V implements Default) -> This {
        var a: T;
        var b: U;
        var c: V;
        return Triple(a, b, c)
    }

    public function [NTuple.first] -> ?T {
        return some(this.a)
    }
    public function [NTuple.second] -> ?U {
        return some(this.b)
    }
    public function [NTuple.third] -> ?V {
        return some(this.c)
    }
    /// Reverses the triple from `Triple<T, U, V>` to
    /// `Triple<V, U, T>`.
    /// ### Usage
    /// ```
    /// use core.collections.Triple
    /// 
    /// var quadruple = Triple("hello", false, some(9))
    /// var transposed = triple.transpose()
    /// 
    /// assert(transposed).equals(Triple(some(9), false, "hello"))
    /// ```
    public function transpose -> Triple<V, U, T> {
        return Triple(this.c, this.b, this.a)
    }
}

