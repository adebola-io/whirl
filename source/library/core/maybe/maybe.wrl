module maybe

use core.{
    boolean.boolean,
    interfaces.{Guaranteed, Try, Default},
    internals.never,
    outcome.{ok, err, Outcome},
    string.{Display, string},
    sentinels.fatal
}

/// Creates a `Maybe` with no value.
public function none<T> -> ?T {
    // False recursion. The function is transformed by the compiler.
    return none()
}

/// Creates a `Maybe` with an internal value.
public function some<T>(value: T) -> ?T {
    return Maybe(value)
}

/// A value that may or may not exist.
public model Maybe<T> 
    implements Default
    + Display|=(T implements Display)
    + Guaranteed<T> 
    + Try<T, ?never> 
{
    /// A simple flag for marking existence or non-existence.
    var exists: boolean
    /// The internal value.
    /// 
    /// This will point to the void value if 
    /// if it is retrieved from an empty `Maybe`. 
    /// 
    /// It should **never** be accessed outside of the 
    /// internals of the model, or without first checking the
    /// flag.
    var value: T
    new(value: T) {
        this.exists = true
        this.value = value
    }
    /// Implementation of the Default interface.
    static function [Default.init] -> This {
        return none()
    }
    /// Converts the Maybe to a string.
    /// ### Usage
    /// ```
    /// var maybeInt = some(90)
    /// assert(maybeInt.toStr()).equals("Maybe.some(90)")
    /// 
    /// maybeInt = none()
    /// assert(maybeInt.toStr()).equals("Maybe.none")
    /// ```
    public function [Display.toStr]|=(T implements Display) -> string {
        if this.isNone() {
            return "Maybe.none"
        }
        return string.fmt("Maybe.some(%)").add(this.value).finish()
    }
    /// Implementation of the `Guaranteed` interface.
    function [Guaranteed.guarantee] -> T {
        return this.unwrap()
    }
    /// Implementation of the `Try` interface.
    function [Try.try] -> Outcome<T, ?never> {
        if this.isSome() {
            return ok(this.value)
        }
        return err(none())
    }
    /// Combines two `Maybe` values into one, computing the second from the first,
    /// if and only if the first exists, and nothing otherwise.
    /// ### Usage
    /// ```
    /// ```
    public function andThen<U>(conjunct: fn(former: T) -> ?U) -> ?U {
        if this.isSome() { conjunct(this.value) } else { none() }
    }
    /// Unwraps the Maybe value if it exists, or crashes the running sequence 
    /// if otherwise. 
    /// 
    /// It takes in an error message that will be displayed if the
    /// later is the case.
    /// ### Usage
    /// ```
    /// var maybeVal = some("Hello, world!")
    /// assert(maybeVal.expect("No value!!")).equals("Hello, world!")
    /// ```
    public function expect(error: string) -> T {
        if this.isNone() { fatal(some(error)) } else { this.value }
    }
    /// Returns a boolean indicating if the Maybe contains no value.
    /// ### Usage
    /// ```
    /// var noValue: ?string = none()
    /// assertThat(noValue.isNone())
    /// 
    /// var stringValue = some("boy")
    /// assertThat(!stringValue.isNone())
    /// ```
    public function isNone -> boolean {
        this.exists
    }
    /// Returns a boolean indicating whether there is a value contained or not.
    /// ### Usage
    /// ```
    /// var stringValue = some("boy")
    /// assertThat(stringValue.isSome())
    /// 
    /// var noValue: ?string = none()
    /// assertThat(!noValue.isSome())
    /// ```
    public function isSome -> boolean {
       !this.exists
    }
    /// Returns a boolean indicating whether there is a value contained, and it
    /// upholds a given predicate.
    /// ### Usage
    /// ```
    /// var predicate = fn(value: i32) value == 42
    /// 
    /// var maybeInt = some(42)
    /// assertThat(maybeInt.isSomeAnd(predicate))
    /// 
    /// var maybeInt2 = some(100)
    /// assertThat(!maybeInt2.isSomeAnd(predicate))
    /// 
    /// var maybeInt3: ?i32 = none()
    /// assertThat(!maybeInt3.isSomeAnd(predicate))
    /// ```
    public function isSomeAnd(predicate: fn(value: T) -> boolean) -> boolean {
        this.isSome() and predicate(this.value)
    }
    /// Performs a computation if there is an internal value contained.
    /// ### Usage
    /// ```
    /// var maybeValue = some(42)
    /// var message: string;
    /// 
    /// maybeValue.isSomeThen(fn(value) {
    ///     message = string
    ///         .fmt("The value is %")
    ///         .add(value)
    ///         .finish()
    /// })
    /// 
    /// assert(message).equals("The value is 42");
    /// ```
    public function isSomeThen(consequent: fn(value: T)) {
        if this.isNone() {
            return
        }
        consequent(this.value)
    }
    /// Performs a computation if there is no value contained in the Maybe.
    public function isNoneThen(consequent: fn()) {
        if this.isNone() { consequent() }
    }
    /// Returns a boolean indicating whether there is no value, or there is a value and it
    /// upholds a given predicate.
    /// ### Usage
    /// ```
    /// var predicate = fn(value: i32) value > 5
    /// 
    /// var maybeInt = some(10)
    /// assertThat(maybeInt.isNoneOr(predicate))
    /// 
    /// var maybeInt2: ?i32 = none()
    /// assertThat(maybeInt2.isNoneOr(predicate))
    /// 
    /// var maybeInt3 = some(4)
    /// assertThat(not maybeInt3.isNoneOr(predicate))
    /// ```
    public function isNoneOr(predicate: fn(value: T) -> boolean) -> boolean {
        this.isNone() or predicate(this.unwrap())
    }
    /// Maps a `Maybe<T>` to an `Outcome<T, E>` by passing in a fallback error
    /// value if there is nothing within.
    /// ### Usage
    /// ```
    /// ```
    public function someOr<E>(error: E) -> Outcome<T, E> {
        if this.isNone() { err(error) } else { ok(this.value) }
    }
    /// Maps a `Maybe<T>` to an `Outcome<T, E>` by computing a fallback error
    /// value if there is nothing within.
    /// ### Usage
    /// ```
    /// use core.math.parseInt
    /// var parseError = fn Error("Could not parse.")
    /// 
    /// var intErr = parseInt("a9s").someOrElse(parseError)
    /// 
    /// assert(intErr).equals(err(Error("Could not parse.")))
    /// ```
    public function someOrElse<E>(error: fn -> E) -> Outcome<T, E> {
        if this.isNone() { err(error()) } else { ok(this.value) }
    }
    /// Combines two intermediate values
    public function orElse(alternate: fn -> ?T) -> ?T {
        if this.isSome() { this } else { alternate() }
    }
    /// Ignores the maybe and returns the internal value. 
    /// It will throw an error if no value is present.
    /// <!--ignore-->
    /// ### Usage
    /// ```
    /// var numValue = some(89)
    /// assert(numValue.unwrap()).equals(89)
    /// ```
    /// <!--ignore-->
    /// ```
    /// noValue: ?number = none()
    /// noValue.unwrap() // Will panic with an error.
    /// ```
    /// ### Panics
    /// It panics if called on a `Maybe` with no value.
    public function unwrap -> T {
        if this.isNone() {
            fatal(some("Called Unwrap on a Maybe with no value."))
        }
        return this.value
    }
    /// Returns the internal value, or another given value.
    /// ### Usage
    /// ```
    /// var maybeVal = some(45)
    /// assert(maybeVal.unwrapOr(0)).equals(45)
    /// 
    /// maybeVal = none()
    /// assert(maybeVal.unwrapOr(69)).equals(69)
    /// ```
    public function unwrapOr(value: T) -> T {
        if this.isNone() { value } else { this.value }
    }
    /// Returns the internal value, or computes another given value.
    public function unwrapOrElse(fallback: fn -> T) -> T {
        if this.isNone() { fallback() } else { this.value }
    }
    /// Converts a `Maybe<T>` to a `Maybe<E>` by applying a transformation function.
    /// ### Usage
    /// ```
    /// var double = fn(x: number) x * 2
    /// var first = some(9).map(double)
    /// 
    /// assert(first!).equals(18)
    /// 
    /// var second: ?number = none().map(double)
    /// assertThat(double.isNone())
    /// ```
    public function map<U>(transform: fn(former: T) -> U) -> ?U {
        some(transform(this?))
    } 
    public function xor(other: ?T) -> ?T {
        if this.isSome() and other.isNone() {
            return this
        }
        if this.isNone() and other.isSome() {
            return other
        }
        return none()
    }
    /// Unwraps a Maybe and returns its internal value if it exists.
    /// 
    /// If it does not, it returns the default value of the internal type.
    /// ### Usage
    /// ```
    /// var i = some(50)
    /// assert(i.unwrapOrDefault()).equals(50)
    /// 
    /// var j: ?i32 = none()
    /// assert(j.unwrapOrDefault()).equals(0) // default value for i32.
    //  ```
    public function unwrapOrDefault|=(T implements Default) -> T {
        if this.isNone() {
            var default: T
            return default
        } 
        return this.value
    }
}