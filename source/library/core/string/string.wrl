module string

use core.{ 
    array.UInt8Array,
    bool.Bool,
    collections.Hash,
    interfaces.Default,
    iterate.{AsIterator, Iterable}, 
    numeric.Int32,
    ops.{Addition, Range},
    sentinels.todo,
}
public use display.Display
public use coloredstring.ColoredString
public use template.Template

/// Model for creating, manipulating and formatting text sequences.
public model String 
    implements Addition 
    + AsIterator<String, Chars> 
    + Default
    + Display
    + Hash
{
    var vec: UInt8Array
    /// Implementation of the Display trait.
    public function [Display.toStr] -> String {
       return '"' + this.replace('"', '\\"') + '"'
    }
    /// Implementation of the Default trait.
    static function [Default.init] -> This {
        return ""
    }
    /// Adds two strings together.
    /// ## Usage
    /// ```
    /// var str = "Hello" + ", world!"
    /// assert(str).equals("Hello, world!")
    /// ```
    public function [Addition.add](other: This) -> This {
        var newString = this
        newString.vec.append(this.vec)
        return newString
    }
    /// Creates an iterator from the contents of a string.
    /// ## Usage
    /// ```
    /// var str = "This is a string"
    /// for char in str {
    ///     print(char)
    /// }
    /// ```
    public function [AsIterator.iter] -> Chars {
        return Chars(this)
    }
    /// Adds text to the end of the string.
    /// ## Usage
    /// ```
    /// var str = "Hello"
    /// str.append(", world!")
    /// 
    /// assert(str).equals("Hello, world!")
    /// ```
    public function append(suffix: String) {
        this.vec.append(suffix.vec)
    }
    /// Converts the string to an array of bytes.
    /// ### Usage
    /// ```
    /// ```
    public function bytes -> UInt8Array {
        return this.vec
    }
    /// Changes the first character of every word in the string to upper case.
    /// ## Usage
    /// ```
    /// var str = "jonathan is a boy"
    /// var str2 = str.capitalCase()
    /// 
    /// assert(str2).equals("Jonathan Is A Boy")
    /// ```
    public function capitalCase -> String {
        todo()
    }
    /// Returns an iterator over the valid characters in the string.
    /// ## Usage
    /// ```
    /// var str = "adebola.io"
    /// 
    /// for char in str.chars() {
    ///     print(char)
    /// }
    /// ```
    public function chars -> Chars {
        return Chars(this)
    }
    /// Empties the string of its characters.
    /// ## Usage
    /// ```
    /// var str = "tralalalalaleeday"
    /// str.clear()
    /// 
    /// assert(str).equals("")
    /// assert(str.length()).equals(0)
    /// ```
    public function clear {
        this.vec = UInt8Array(this.vec.capacity)
    }
    /// Returns true if a substring is contained within the string.
    /// ## Usage
    /// ```
    /// var str = "This is a world premiere."
    /// 
    /// assertThat(str.contains("world"))
    /// assertThat(str.contains("premiere"))
    /// ```
    public function contains(substr: String) -> Bool {
       return this.vec.asArray().includes(substr.vec.asArray())
    }
    /// Returns true if the string ends with a given pattern.
    /// ### Usage
    /// ```
    /// var name = "Michael"
    /// assertThat(name.endsWith("l"))
    /// assertThat(name.endsWith("ael"))
    /// ```
    public function endsWith(pat: String) -> Bool {
        var thisIter = this.vec.asArray().reverse()
        var patternIter = pat.vec.asArray().reverse()
        thisIter.zip(patternIter).all(fn (tuple) {
            tuple.a == tuple.b
        })
    }
    /// Returns true if the string is made up entirely of alphabetic and numeric characters.
    /// ## Usage
    /// ```
    /// var str = "helloworld1234"
    /// assertThat(str.isAlphanumeric())
    /// 
    /// var str2 = "%hello_world$"
    /// assertThat(!str2.isAlphanumeric())
    /// ```
    public function isAlphanumeric -> Bool {
        todo()
    }
    /// Returns true if the string has no characters.
    /// ## Usage
    /// ```
    /// var str = ""
    /// assertThat(str.isEmpty())
    /// 
    /// str.append("Hello")
    /// assertThat(!str.isEmpty())
    /// ```
    public function isEmpty -> Bool {
        return this.vec.length == 0
    }
    /// Returns the number of characters in the string.
    /// ## Usage
    /// ```
    /// var str = "Hello"
    /// assert(str.length()).equals(5)
    /// ```
    public function length -> Int32 {
        return this.vec.length
    }
    /// Changes the case of all letters in the string to lower case.
    /// ## Usage
    /// ```
    /// var str = "HELLO, WORLD!"
    /// var str2 = str.lowerCase()
    /// 
    /// assert(str2).equals("hello, world!")
    /// ```
    public function lowerCase -> String {
        todo()
    }
    /// Returns a version of the string with padding on both sides.
    /// ## Usage
    /// ```
    /// var str = "Alright"
    /// var str2 = str.pad(3)
    /// 
    /// assert(str2).equals("   Alright   ") // 3 spaces before and after.
    /// ```
    public function pad(count: Int32) -> String {
        todo()
    }
    /// Returns a version of the string with left padding.
    /// ## Usage
    /// ```
    /// var str = "Alright"
    /// var str2 = str.padLeft(3)
    /// 
    /// assert(str2).equals("   Alright") // 3 spaces before.
    /// ```
    public function padLeft(count: Int32) -> String {
        todo()
    }
    /// Returns a version of the string with left padding.
    /// ## Usage
    /// ```
    /// var str = "Alright"
    /// var str2 = str.padRight(3)
    /// 
    /// assert(str2).equals("Alright   ") // 3 spaces before.
    /// ```
    public function padRight(count: Int32) -> String {
        todo()
    }
    /// Pads the string in place with whitespace on the left and right sides.
    /// ## Usage
    /// ```
    /// var str = "Hello, world!"
    /// str.padInPlace(3)
    /// 
    /// assert(str).equals("   Hello, world!   ")
    /// ```
    public function padInPlace(count: Int32) {
        this = this.pad(count)
    }
    /// Adds text to the start of the string.
    /// ## Usage
    /// ```
    /// var str = "world!"
    /// str.prepend("Hello, ")
    /// 
    /// assert(str).equals("Hello, world!")
    /// ```
    public function prepend(prefix: String) {
        var newString = prefix
        newString += this
        this = newString
    }
    /// Returns a String value that is made from a number of copies of the original string.
    /// If count is 0, the empty string is returned.
    /// ## Usage
    /// ```
    /// var str = "Whirlwind"
    /// 
    /// var str2 = str.repeat(3)
    /// assert(str2).equals("WhirlwindWhirlwindWhirlwind") // 3 copies.
    /// 
    /// var str3 = str.repeat(1)
    /// assert(str3).equals("Whirlwind") // One copy.
    /// 
    /// var str3 = str.repeat(0)
    /// assertThat(str2.IsEmpty()) // No copies.
    /// ```
    public function repeat(count: Int32) -> String {
        var str: String
        for {} in 0..count {
           str.append(this)
        }
        return str
    }
    /// Replaces all instances of a substring and returns the new string.
    /// ## Usage
    /// ```
    /// var str = "John goes to school. John buys a book."
    /// 
    /// var str2 = str.replace("John", "Mike")
    /// 
    /// assert(str2).equals("Mike goes to school. Mike buys a book.")
    /// ```
    public function replace(subStr: String, newStr: String) -> String {
        todo()
    }
    /// Returns a reversed version of the string.
    /// ## Usage
    /// ```
    /// var str = "pandemonium"
    /// 
    /// var str2 = str.reverse()
    /// 
    /// assert(str2).equals("muinomednap")
    /// ```
    public function reverse -> String {
        var newString = ""
        for char in this.chars() {
            newString = char + newString
        }
        return newString
    }
    /// Returns a section of the string.
    /// The range argument is exclusive, meaning it goes from the left index all the way to one before the right.
    /// ## Usage
    /// ```
    /// var str = "Hello, world!"
    /// 
    /// assert(str.slice(0..5)).equals(some("Hello")) // index 0 to 4.
    /// ```
    public function slice(bounds: Range<Int32>) -> ?String {
        todo()
    }
    /// Divides the string into a list of substrings based on a delimeter.
    /// ## Usage
    /// ```
    /// var str = "Ring around the rosy"
    /// var words = str.split(" ")
    /// 
    /// assert(words == ["Ring", "Around", "The", "Rosy"])
    /// ```
    public function split(delim: String) -> []String {
        todo()
    }
    /// Divides the string into a list of substrings based on a predicate.
    /// ## Usage
    /// ```
    /// var str = "Hello world. My name is James."
    /// var sentences = str.splitAt(fn(pat) pat == ". ")
    /// 
    /// assert(sentences).equals(["Hello world", "My name is James."])
    /// ```
    public function splitAt(predicate: fn(pattern: String) -> Bool) -> []String {
        todo()
    }
    /// Changes only the first character in the string to upper case.
    /// ## Usage
    /// ```
    /// var str = "nice to meet you, where you been?"
    /// var str2 = str.sentenceCase()
    /// 
    /// assert(str2).equals("Nice to meet you, where you been?")
    /// ```
    public function sentenceCase -> String {
        return this.chars()
            .next()
            .map(fn (c) c.upperCase() + this.slice(1..this.length()).unwrapOr(""))
            .unwrapOr("")
    }
    /// Returns a version of the string without left or right whitespace padding.
    /// ## Usage
    /// ```
    /// var str = "\n\n\nWhat then shall we say?  \n\n\n\r\t"
    /// 
    /// assert(str.trim()).equals("What then shall we say?")
    /// ```
    public function trim -> String {
        todo()
    }  
    /// Mutates the string in place and removes left or right whitespace padding.
    /// ## Usage
    /// ```
    /// var str = "\n\n\nWhat then shall we say?  \n\n\n\r\t"
    /// 
    /// str.trimInPlace()
    /// 
    /// assert(str).equals("What then shall we say?")
    /// ```
    public function trimInPlace {
        this = this.trim()
    }   
    /// Returns a version of the string without left whitespace padding.
    /// ## Usage
    /// ```
    /// var str = "\n\n\nWhat then shall we say?\n"
    /// 
    /// assert(str.trimStart()).equals("What then shall we say?\n")
    /// ```
    public function trimStart -> String {
        todo()
    } 
    /// Returns a version of the string without right whitespace padding.
    /// ## Usage
    /// ```
    /// var str = "\nWhat then shall we say?\n\n\n"
    /// 
    /// assert(str.trimEnd()).equals("\nWhat then shall we say?")
    /// ```
    public function trimEnd -> String {
        todo()
    }
    /// Changes the case of all letters in the string to upper case.
    /// ## Usage
    /// ```
    /// var str = "hello, world!"
    /// assert(str.upperCase()).equals("HELLO, WORLD!")
    /// ```
    public function upperCase -> String {
        todo()
    }
    /// Returns true if the string starts with a given pattern.
    /// 
    /// ### Usage
    /// ```
    /// var name = "Joshua"
    /// assertThat(name.startsWith("J"))
    /// assertThat(name.startsWith("Jo"))
    /// ```
    public function startsWith(pat: String) -> Bool {
        var iterA = this.vec.asArray().iter()
        var iterB = pat.vec.asArray().iter()
        return iterA.zip(iterB).all(fn (tuple) tuple.a == tuple.b)
    }
    /// Creates a string with at least the specified capacity.
    /// ### Usage
    /// ```
    /// ```
    public static function withCapacity(capacity: Int32) -> This {
        return String.fromUtf8(UInt8Array(capacity))
    }
    /// Creates a string from an array of bytes.
    /// ### Usage
    /// ```
    /// ```
    public static function fromUtf8(vec: UInt8Array) -> This {
        // return String { vec = array }
        todo()
    }
    /// Creates a string from a value that implements Display.
    /// ### Usage
    /// ```
    /// var value = 1234
    /// var valueStr = String.from(value)
    /// 
    /// assert(valueStr).equals("1234")
    /// ```
    public static function from<T implements Display>(value: T) -> This {
        value.toStr()
    }
    /// Creates a new formattable string template.
    /// ### Usage
    /// ```
    /// var greeting = String.fmt("Hello, %!")
    /// var greetingStr = greeting.add("John").finish()
    /// 
    /// assert(greetingStr).equals("Hello, John!")
    /// ```
    public static function fmt(template: String) -> Template {
        return Template(template)
    }
}


/// A simple iterator over the characters in a string.
public model Chars implements Iterable<String> {
    var idx: Int32
    var string: String
    new(string: String) {
        this.idx = 0
        this.string = string
    }
    /// Returns the next character.
    public function [Iterable.next] -> ?String {
        // var nextChar = this.string.at(this.idx)?
        // this.idx += 1
        // return some(nextChar)
        todo()
    }
}

/// Represents an interface for models that can be created from a string representation.
public interface FromStr {
    /// Parses a provided string and returns an instance of the implementing type.
    public static function fromStr(string: String) -> ?This
}