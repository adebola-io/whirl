module template

use core.{
    collections.HashMap,
    numeric.i32
}
use display.Display
use string.String


/// The Template model helps in the construction of dynamic strings by 
/// embedding expressions within a formatted template. It
/// works by defining and substituting characters with values retreived from
/// various sources, ensuring support for basic transformations and type safety.
public model Template implements Display {
    var template: String
    var arguments: []String
    var map: HashMap<String, String>
    var transforms: []fn(x: String) -> String
    
    new(origin: String) {
        this.map = HashMap()
        this.template = origin
        this.transforms = []
        this.arguments = []
    }
    public function [Display.toString] -> String {
        return this.finish()
    }
    /// Sets an argument based on the list of named parameters in the template String.
    /// ### Usage
    /// ```
    /// var weather = "bright"
    /// var emotion = "happy"
    /// 
    /// var template = String.fmt(
    ///            "The day is %{weather}, 
    ///             It's bright and fair,
    ///             Oh %{emotion} day,
    ///             The day of joy!")
    /// 
    /// var completed = template
    ///                 .set("weather", weather)
    ///                 .set("emotion", emotion)
    ///                 .finish()
    /// 
    /// assert(completed)
    ///    .equals("The day is bright, 
    ///             It's bright and fair,
    ///             Oh happy day,
    ///             The day of joy!")
    /// ```
    public function set<A implements Display>(param: String, value: A) -> This {
        this.map.set(param, value.toString())
        return this
    }
    /// Adds an argument according to the list of positional parameters
    /// in the template String.
    /// ### Usage
    /// ```
    /// var name = "Sefunmi"
    /// var age = 21
    /// 
    /// var template = String.fmt("My name is % and I am % years old.")
    /// var completed = template.add(name).add(age).finish()
    /// 
    /// assert(completed).equals("My name is Sefunmi and I am 21 years old.")
    /// ```
    public function add<A implements Display>(value: A) -> This {
        this.arguments.push(value.toString())
        return this
    }
    /// Appends new template text to the end of the template.
    /// ### Usage
    /// ```
    /// var name = String.fmt("Welcome, %!")
    /// name.add("Mark")
    /// 
    /// name.extend(" Good %.")
    /// name.add("Morning")
    /// 
    /// assert(name.finish()).equals("Welcome, Mark! Good Morning.")
    /// ```
    public function extend(suffix: String) -> This {
        this.template += suffix
        return this
    }
    /// Transforms a positional parameter with a function.
    /// The positional arguments are zero-based, meaning 0
    /// corresponds to the first argument.
    /// 
    /// If the argument index is not within the template, then the
    /// transformer is ignored until it is.
    /// ### Usage
    /// ```
    /// var template = String.fmt("Hello %!")
    /// 
    /// template.transform(0, fn(x) x.capitalCase())
    /// template.add("john")
    /// 
    /// assert(template.finish()).equals("Hello, John!")
    /// ```
    public function transform(arg: i32, transformer: fn(x: String) -> String) -> This {
        this.transforms.push(transformer)
        return this
    }
    /// Builds a `String` from the template with all the inputted values.
    /// ### Usage
    /// ```
    /// var city = "Paris"
    /// var country = "France"
    /// 
    /// var template = String.fmt("Welcome to %, the capital of %!")
    /// var completed = template.add(city).add(country).finish()
    /// 
    /// assert(completed).equals("Welcome to Paris, the capital of France!")
    /// ```
   public function finish -> String {
        var result = this.template
        var argIndex = 0
        
        // Handle named parameters first
        for { a as key, b as value} in this.map {
            result = result.replace("%{" + key + "}", value)
        }
        
        // Handle positional parameters
        while result.contains("%") {
            if argIndex >= this.arguments.length() {
                break
            }
            
            var value = this.arguments[argIndex]
            
            // Apply any transforms for this position
            for transform in this.transforms {
                value = transform(value)
            }
            
            result = result.replaceFirst("%", value)
            argIndex += 1
        }
        
        return result
}

}



test "create templates" {
    use core.testing.assertThat

    var template = Template("Hello, %!")
    template.add("world")
    assertThat(template.finish() == "Hello, world!")
}