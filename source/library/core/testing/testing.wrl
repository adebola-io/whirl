module testing

use core.{
    boolean.boolean,
    maybe.some,
    ops.{Orderable},
    sentinels.fatal,
    string.{Display, string}
}

/// Creates an assertion object.
public function assert<T implements Display>(value: T) -> Assertion<T> {
    return Assertion(value)
}

/// Tests that a condition is true.
public function assertThat(proposition: boolean) {
    if !proposition {
        var {} = fatal(some("Assertion failed due to false proposition."))
    }
}

/// Generates a string of an assertion error.
function assertionMessage<T implements Display>(mainMessage: string, left: T, right: T) -> string {
    var template = string.fmt(mainMessage)
    template.extend("Contained value: %\nOther: %")
    return template.add(left).add(right).finish()
}

/// This model represents an assertion object, 
/// which is the base object for many testing operations.
public model Assertion<T implements Display> {
    var value: T
    new(value: T) {
        this.value = value
    }
    /// Checks if the contained value equals another.
    public function equals(other: T) -> This {
        if other != this.value {
            var message = assertionMessage(
                        "Assertion failed on equality.", 
                        this.value, 
                        other)
            fatal(some(message))
        }
        return this
    }
    /// Checks that the contained value does not equal another.
    public function doesNotEqual(other: T) -> This {
        if other == this.value {
            var message = assertionMessage(
                        "Assertion failed on inequality.", 
                        this.value, 
                        other)
            fatal(some(message))
        }
        return this
    }
    /// Checks that the contained value is less than another.
    public function isLessThan|=(T implements Orderable)(other: T) -> This {
        if other <= this.value {
            var message = assertionMessage(
                        "Assertion failed for less than.", 
                        this.value, 
                        other)
            fatal(some(message))
        }
        return this
    }
    /// Checks that the contained value is greater than another.
    public function isGreaterThan|=(T implements Orderable)(other: T) -> This {
        if other >= this.value {
            var message = assertionMessage(
                        "Assertion failed for greater than.", 
                        this.value, 
                        other)
            fatal(some(message))
        }
        return this
    }
}