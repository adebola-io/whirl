/// ## The Whirlwind Prelude
/// 
/// The `core.prelude` module is a core module that exposes a set of 
/// fundamental types, functions and models, automatically available 
/// in the global namespace of every other module.
/// 
/// These functionalities are considered essential for writing clear, 
/// efficient code, and would be tedious to import again and again 
/// into other modules. Having a `prelude` reduces boilerplate 
/// by predefining these values, increasing code readability, 
/// consistency and productivity.
/// 
/// ### Note
/// Technically, the prelude is only available _outside_ the core library. 
/// The importing rules in Whirlwind are convoluted, and there are several
/// core modules with cyclical dependencies.e.g. `core.io` needs the `Display` 
/// interface from `core.prelude`, but `core.prelude` needs the 
/// `print` function from `core.io`.
/// 
/// Allowing a global scope within `core` would leads to ominous, disappearing errors, 
/// because depending on the import resolution path at build time, `core.prelude` might
/// not yet exist.
module prelude

public use core
public use core.{
    array.Array,
    boolean.boolean,
    collections.{HashMap, Set, Tuple, pair},
    concurrent.{Eventual, Prospect, toSync},
    interfaces.{
        Default, Guaranteed, Try
    },
    iterate.{Iterable, AsIterator},
    maybe.{none, some, Maybe},
    numeric.{number, i32, int, float, i64, f32, f64},
    outcome.{ok, err, Outcome},
    ops.Range,
    sentinels.{todo, fatal},
    string.{Display, FromStr, String},
    internals.never,
}
