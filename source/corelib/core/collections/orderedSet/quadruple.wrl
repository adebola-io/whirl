module quadruple;

use tuple.{Tuple, pair};
use orderedSet.OrderedSet;
use core.prelude.{never, some};


/// A set containing four individual items.
public model Quadruple<T, U, V, W> implements OrderedSet<T, U, V, W, never, never> {
    public var a: T;
    public var b: U;
    public var c: V;
    public var d: W;

    public function [OrderedSet.first](): ?T {
        return some(this.a);
    }
    public function [OrderedSet.second](): ?U {
        return some(this.b);
    }
    public function [OrderedSet.third](): ?V {
        return some(this.c);
    }
    public function [OrderedSet.fourth](): ?W {
        return some(this.d);
    }

    new(first: T, second: U, third: V, fourth: W) {
        this.a = first;
        this.b = second;
        this.c = third;
        this.d = fourth;
    }
    /// Groups the items in the quadruple to two tuples.
    /// ###  Usage
    /// ```
    /// use core.collections.{Quadruple, Tuple};
    /// 
    /// quadruple := new Quadruple(1, "Sefunmi", true, [35.5]);
    /// var { a as first, b as second } = quadruple.toTuple();
    /// 
    /// assert(first == new Tuple(1, "Sefunmi"));
    /// assert(second == new Tuple(true, [35.5]));
    /// ```
    public function toTuple(): Tuple<Tuple<T, U>, Tuple<V, W>> {
        return pair(pair(this.a, this.b), pair(this.c, this.d));
    }
}