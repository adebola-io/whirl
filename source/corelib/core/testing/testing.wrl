module testing;

use core.prelude.{Bool, Display, Array};
use core.process.fatalOnCaller;
use core.io.fmt;
use core.primitives.String;

/// Creates an assertion object.
public function assert<T implements Display>(value: T) -> Assertion<T> {
    return new Assertion(value);
}

/// Tests that a condition is true.
public function assertThat(proposition: Bool) {
    if !proposition {
        fatalOnCaller("Assertion failed due to false proposition.");
    }
}

/// Generates a string of an assertion error.
function assertionMessage<T implements Display>(mainMessage: String, left: T, right: T) -> String {
    template := fmt(mainMessage);
    template.extend("Contained value: %\nOther: %");
    return template.add(left).add(right).finish();
}

/// This model represents an assertion object, 
/// which is the base object for testing equality operations.
public model Assertion<T implements Display> {
    var value: T;
    new(value: T) {
        this.value = value;
    }
    /// Checks if the contained value equals another.
    public function equals(other: T) -> This {
        if other != this.value {
            message := assertionMessage(
                        "Assertion failed on equality.", 
                        this.value, 
                        other);
            fatalOnCaller(message);
        };
        return this;
    }
    /// Checks that the contained value does not equal another.
    public function doesNotEqual(other: T) -> This {
        if other == this.value {
            message := assertionMessage(
                        "Assertion failed on inequality.", 
                        this.value, 
                        other);
            fatalOnCaller(message);
        };
        return this;
    }
}


/// Checks that an array is empty.
public function arrayIsEmpty<T>(arr: Array<T>) {
    if arr.length() != 0 {
        message := fmt("Assertion failed because array is not empty.\n");
        message.extend("Array Length: %").add(arr.length());
        fatalOnCaller(message.finish());
    }
}


test "doStuff" {
   
}