module http;

use core.prelude.{
    Bool, todo, Outcome, Prospect, String,
    UnsignedInt, some, fatal,
};
public use request.{
    RequestParams, HttpRequest, HttpMethod, 
    HttpRequestError,
};
public use response.HttpResponse;

model Endpoints {
    new() {

    }
    /// Registers a GET route.
    public function register(
        method: HttpMethod, 
        route: String, 
        handler: fn(request: HttpRequest): Prospect<ServerOutcome>
    ) {
        todo()
    }
}

public type ServerOutcome = Outcome<HttpResponse, HttpRequestError>;

/// A simple model for an HTTP server.
public model HttpServer {
    var endpoints: Endpoints;
    var middleware: []Middleware;
    var isRunning: Bool;
    var port: UnsignedInt;
    new(name: String, port: UnsignedInt) {
        this.endpoints = new Endpoints();
        this.middleware = [];
        this.isRunning = false;
        this.port = port;
    }
    /// Registers a route for a request with a `GET` method. 
    public function get(
        route: String,
        handler: fn(request: HttpRequest): Prospect<ServerOutcome>
    ): This {
        this.assertInert();
        this.endpoints.register(HttpMethod.Get, route, handler);
        return this;
    }
    /// Registers a route for a request with a `POST` method.
    public function post(
        route: String, 
        handler: fn(request: HttpRequest): Prospect<ServerOutcome>
    ): This {
        this.assertInert();
        this.endpoints.register(HttpMethod.Post, route, handler);
        return this;
    }
    /// Asserts that the server is not yet running.
    function assertInert() {
        if this.isRunning {
            fatal(some("Server is already running."));
        }
    }
    /// Starts the server by listening at the specified port for changes.
    public async function start() {
        this.assertInert();
        this.isRunning = true;
        while true {
            todo()
        }
    }
    /// Registers a middleware for use in the server.
    /// Middlewares are executed in the order in which they are registered.
    public function useMiddleware(middleware: Middleware): This {
        this.middleware.push(middleware)
        return this;
    }
}


public type MiddlewareResponse = Outcome<HttpRequest, HttpRequestError>;
public model Middleware {
    var handlers: []fn(request: HttpRequest): Prospect<MiddlewareResponse>;
    new() {
        this.handlers = [];
    }
    /// Registers a middleware handler.
    public function addHandler(handler: fn(request: HttpRequest): Prospect<MiddlewareResponse>) {
        this.handlers.push(handler);
    }
}
