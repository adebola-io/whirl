/// ## Input/Output in Whirlwind
/// 
/// The `io` module provides a set of tools for fundamental input/output operations and streams.
/// These tools facilitate reading and writing data to various sources, such as files, 
/// network connections, or in-memory buffers. 
/// 
/// It abstracts the underlying details of the data source, allowing
/// for a consistent interface.
module io;


use core.prelude.{Outcome, UInt8};
use core.prelude.UnsignedInt;

public use terminal.{print, prompt, printFmt};
public use template.{fmt, Template};

/// This interface is implemented by any entity that can write
/// to streams of data.
public interface Writer {
    /// Writes into a byte stream and returns the number of bytes written.
    public async function write(bytes: []UInt8): Outcome<UnsignedInt, IoError>;
}

/// This interface is implemented by any entity that is capable of
/// reading streams of data. The primary method provided is the 
/// `.read` method, which reads bytes into a provided byte array.
public interface Reader {
    /// Reads data from a specified source.
    public async function read(bytes: []UInt8, offset?: UnsignedInt, length?: UnsignedInt);
}

public model IoError {
    var errorType: IoErrorType;
}
enum IoErrorType {}

