/// ## Input/Output in Whirlwind
/// 
/// The `io` module provides a set of tools for fundamental input/output operations and streams.
/// These tools facilitate reading and writing data to various sources, such as files, 
/// network connections, or in-memory buffers. 
/// 
/// It abstracts the underlying details of the data source, allowing
/// for a consistent interface.
module io;

use core.collections.HashMap;
use core.internals.invoke;
use core.internals.Injunction;
use core.primitives.String;
use core.prelude.{Display, Outcome, UInt8};
use core.prelude.todo;
use core.prelude.UnsignedInt;
use core.internals.builtin;

/// Prints a message or an object to the console, terminal 
/// or any predefined output interface.
public function print<T implements Display>(data: T) {
    dataStr := data.toStr();
    builtin.print(dataStr);
}

/// Displays an optional message to the console, terminal or
/// any predefined input interface, prompting the user to enter
/// text.
public function prompt(message?: String): String {
    todo()
}

/// Prints a message or an object to the console, terminal, 
/// or any predefined output interface.
public function printFmt<T implements Display>(data: T) {
    dataStr := data.toFmtStr();
    builtin.print(dataStr)
}

/// This interface is implemented by any entity that can write
/// to streams of data.
public interface Writer {
    /// Writes into a byte stream and returns the number of bytes written.
    public async function write(bytes: []UInt8): Outcome<UnsignedInt, IoError>;
}

/// This interface is implemented by any entity that is capable of
/// reading streams of data. The primary method provided is the 
/// `.read` method, which reads bytes into a provided byte array.
public interface Reader {
    /// Reads data from a specified source.
    public async function read(bytes: []UInt8, offset?: UnsignedInt, length?: UnsignedInt);
}

public model IoError {
    var errorType: IoErrorType;
}
enum IoErrorType {}

/// Creates a new formattable template.
public function fmt(template: String): Template {
    new Template(template)
}

/// The Template model helps in the construction of dynamic strings by 
/// embedding expressions within a formatted template. It
/// works by defining and substituting characters with values retreived from
/// various sources, ensuring support for basic transformations and type safety.
public model Template implements Display {
    var template: String;
    var arguments: []String;
    var map: HashMap<String, String>;
    var transforms: []fn(x: String): String;
    
    new(origin: String) {
        this.map = new HashMap();
        this.template = origin;
        this.transforms = [];
        this.arguments = [];
    }
    public function [Display.toStr](): String {
        return this.finish();
    }
    /// Sets an argument based on the list of named parameters in the template string.
    /// ### Usage
    /// ```
    /// weather := "bright";
    /// emotion := "happy";
    /// 
    /// template := core.io.fmt(
    ///            "The day is %{weather}, 
    ///             It's bright and fair,
    ///             Oh %{emotion} day,
    ///             The day of joy!");
    /// 
    /// completed := template
    ///                 .set("weather", weather)
    ///                 .set("emotion", emotion)
    ///                 .finish();
    /// 
    /// assert(completed)
    ///    .equals("The day is bright, 
    ///             It's bright and fair,
    ///             Oh happy day,
    ///             The day of joy!");
    /// ```
    public function set<T implements Display>(param: String, value: T): This {
        this.map.set(param, value.toStr());
        return this;
    }
    /// Adds an argument according to the list of positional parameters
    /// in the template string.
    /// ### Usage
    /// ```
    /// name := "Sefunmi";
    /// age := 21;
    /// 
    /// template := core.io.fmt("My name is % and I am % years old.");
    /// completed := template.add(name).add(age).finish();
    /// 
    /// core.io.print(completed); // Will print out "My name is Sefunmi and I am 21 years old."
    /// ```
    public function add<T implements Display>(value: T): This {
        this.arguments.push(value.toStr());
        return this;
    }
    /// Appends new template text to the end of the template.
    /// ### Usage
    /// ```
    /// name := core.io.fmt("Welcome, %!");
    /// name.add("Mark");
    /// 
    /// name.extend(" Good %.");
    /// name.add("Morning");
    /// 
    /// assert(name.finish()).equals("Welcome, Mark! Good Morning.");
    /// ```
    public function extend(suffix: String): This {
        this.template += suffix;
        return this;
    }
    /// Transforms a positional parameter with a function.
    /// The positional arguments are zero-based, meaning 0
    /// corresponds to the first argument.
    /// 
    /// If the argument index is not within the template, then the
    /// transformer is ignored until it is.
    /// ### Usage
    /// ```
    /// template := core.io.fmt("Hello %!");
    /// 
    /// template.transform(0, fn(x) x.capitalCase());
    /// template.add("john");
    /// 
    /// assert(template.finish()).equals("Hello, John!");
    /// ```
    public function transform(arg: UnsignedInt, transformer: fn(x: String): String): This {
        this.transforms.push(transformer);
        return this;
    }
    /// Builds a string from the template with all the inputted values.
    public function finish(): String {
        todo()
    }
}

test "create templates" {
    use core.testing.assert;

    template := new Template("Hello, %!");
    template.add("world");
    print(template)
}