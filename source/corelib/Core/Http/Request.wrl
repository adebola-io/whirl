module Request;

use Core.Prelude.{Todo, String, Bool, Maybe, UnsignedInt, Outcome, Display};
use Core.Memory.Buffer;
use Core.Collections.HashMap;
use Core.Io.IoError;
use Response.HttpResponse;

public enum HttpMethod {
    Get,
    Post,
    Put,
    Delete
}
  
public model HttpRequest {
    var url: String;
    var data: HashMap<String, String>;
    new(url: String) {
        this.url = url;
        this.data = new HashMap();
    }
    public function PathParams(): RequestParams {
        Todo()
    }
    /// Returns the method of the request,
    public function Method(): String {
        Todo()
    }
    /// Returns the URL route of the request.
    public function Url(): &String {
        return &this.url;
    }
    /// Gets the complete body buffer of the string asynchronously.
    public async function Body(): Buffer {
        Todo()
    }
    /// Returns true if the request was completed successfully.
    public function IsCompleted(): Bool {
        Todo()
    }
    /// Returns the headers stored in the request.
    public function Headers(): RequestHeaders {
        Todo()
    }
    /// Stores data on the request object.
    public function StoreData(key: String, value: String) {
        this.data.Set(key, value);
    }
    /// Creates a new response model from the request.
    public function Respond(): HttpResponse {
        return HttpResponse.From(this);
    }
    /// Returns an error based on this request.
    public function CreateError(message: String, statusCode?: UnsignedInt): HttpRequestError {
        return new HttpRequestError(message, this, statusCode);
    }
}

public model RequestHeaders {
    function Get(name: String): ?&String {
        Todo()
    }
    function Has(name: &String): Bool {
        Todo()
    }
    /// Returns the 
    public function GetOrErr(name: String): Outcome<&String, HttpRequestError> {
        Todo()
    }
}
public model RequestParams {
    public function Get(name: String): ?&String {
        Todo()
    }
    public function GetOrErr(name: String): Outcome<&String, HttpRequestError> {
        Todo()
    }
    function Has(name: &String): Bool {
        Todo()
    }
}


/// An error that occurs on the HTTP server while it is active.
/// 
/// The error is non-fatal, meaning that it does not lead to the crashing of the server when it happens.
public model HttpRequestError implements IoError + Display {
    var message: String;
    var route: String;
    var statusCode: UnsignedInt;
    new(message: String, request: &HttpRequest, statusCode?: UnsignedInt) {
        this.message = message;
        this.route = *request.Url();
        this.statusCode = statusCode.UnwrapOr(400);
    }
    public function [Display.ToStr](): String {
        return "Error: " + this.message;
    }
}