module Http;
use Super.Prelude.{
    Core, Bool, Todo, Outcome, Prospect, String,
    Maybe, UnsignedInt, Some, Array, None, Error
};
use Super.Primitives.Ops.Addition;
public use Request.{
    RequestParams, 
    HttpRequest, 
    HttpMethod, 
    HttpRequestError,
};
public use Response.HttpResponse;


model Endpoints {
    new() {

    }
    /// Registers a GET route.
    public function Register(
        method: HttpMethod, 
        route: String, 
        handler: fn(request: HttpRequest): Prospect<ServerOutcome>
    ) {
        Todo()
    }
}

public type ServerOutcome = Outcome<HttpResponse, HttpRequestError>;

/// A simple model for an HTTP server.
public model HttpServer {
    public var endpoints: Endpoints;
    var middleware: Array<Middleware>;
    var isRunning: Bool;
    var port: UnsignedInt;
    new(name: String, port: UnsignedInt) {
        this.endpoints = new Endpoints();
        this.middleware = [];
        this.isRunning = false;
        this.port = port;
    }
    /// Registers a route for a request with a `GET` method. 
    public function Get(
        route: String, 
        handler: fn(request: HttpRequest): Prospect<ServerOutcome>
    ): &This {
        this.AssertInert();
        this.endpoints.Register(HttpMethod.Get, route, handler);
        return this;
    }
    /// Registers a route for a request with a `POST` method.
    public function Post(
        route: String, 
        handler: fn(request: HttpRequest): Prospect<ServerOutcome>
    ): &This {
        this.AssertInert();
        this.endpoints.Register(HttpMethod.Post, route, handler);
        return this;
    }
    /// Asserts that the server is not yet running.
    function AssertInert() {
        if this.isRunning {
            Core.Process.Panic(Some("Server is already running."));
        }
    }
    /// Starts the server by listening at the specified port for changes.
    public async function Start() {
        this.AssertInert();
        this.isRunning = true;
        while true {
            Todo()
        }
    }
    /// Registers a middleware for use in the server.
    /// Middlewares are executed in the order in which they are registered.
    public function UseMiddleware(middleware: Middleware) {
        this.middleware.Push(middleware)
    }
}


public type MiddlewareResponse = Outcome<HttpRequest, HttpRequestError>;
public model Middleware {
    var handlers: Array<fn(request: HttpRequest): Prospect<MiddlewareResponse>>;
    new() {
        this.handlers = [];
    }
    /// Registers a middleware handler.
    public function Use(handler: fn(request: HttpRequest): Prospect<MiddlewareResponse>) {
        this.handlers.Push(handler);
    }
}


