module request;

use core.prelude.{todo, String, Bool, UnsignedInt, Outcome, Display};
use core.memory.Buffer;
use core.collections.HashMap;
use core.io.IoError;
use response.HttpResponse;

public enum HttpMethod {
    Get,
    Post,
    Put,
    Delete
}
  
public model HttpRequest {
    var _url: String;
    var data: HashMap<String, String>;
    new(url: String) {
        this._url = url;
        this.data = new HashMap();
    }
    public function pathParams(): RequestParams {
        todo()
    }
    /// Returns the method of the request,
    public function method(): String {
        todo()
    }
    /// Returns the URL route of the request.
    public function url(): String {
        return this._url;
    }
    /// Gets the complete body buffer of the string asynchronously.
    public async function body(): Buffer {
        todo()
    }
    /// Returns true if the request was completed successfully.
    public function isCompleted(): Bool {
        todo()
    }
    /// Returns the headers stored in the request.
    public function headers(): RequestHeaders {
        todo()
    }
    /// Stores data on the request object.
    public function storeData(key: String, value: String) {
        this.data.set(key, value);
    }
    /// Creates a new response model from the request.
    public function respond(): HttpResponse {
        return HttpResponse.from(this);
    }
    /// Returns an error based on this request.
    public function createError(
        message: String, 
        statusCode?: UnsignedInt
    ): HttpRequestError {
        return new HttpRequestError(message, this, statusCode);
    }
}

public model RequestHeaders {
    function get(name: String): ?String {
        todo()
    }
    function has(name: String): Bool {
        todo()
    }
    /// Returns the 
    public function getOrErr(name: String): Outcome<String, HttpRequestError> 
    {
        todo()
    }
}
public model RequestParams {
    public function get(name: String): ?String {
        todo()
    }
    public function getOrErr(name: String): Outcome<String, HttpRequestError> 
    {
        todo()
    }
    function has(name: String): Bool {
        todo()
    }
}


/// An error that occurs on the HTTP server while it is active.
/// 
/// The error is non-fatal, meaning that it does not lead to the
/// crashing of the server when it happens.
public model HttpRequestError implements IoError + Display {
    var message: String;
    var route: String;
    var statusCode: UnsignedInt;
    new(message: String, request: HttpRequest, statusCode?: UnsignedInt) {
        this.message = message;
        this.route = request.url();
        this.statusCode = statusCode.unwrapOr(400);
    }
    public function [Display.toStr](): String {
        return "Error: " + this.message;
    }
}