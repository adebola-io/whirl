module arrayStack;

use core.math.UINTMAX;
use core.prelude.{
    Array, UnsignedInt, Maybe, Int, Outcome, Bool, String,
    todo, err, ok,
};

/// An implementation of a stack using an array.
/// 
/// A stack is a LIFO (Last-in-First-out) data structure 
/// that stores items in one direction.
public model ArrayStack<T> {
    var items: Array<T>;
    var _capacity: UnsignedInt;
   
    new(capacity?: UnsignedInt) {
        this.items = [];
        this._capacity = capacity.unwrapOr(UINTMAX);
    }
    /// Dynamically change the number of items in the stack.
    ///
    /// If there are currently more items that the new capacity, then the stack will be truncated.
    /// ## Usage
    /// ```wrl
    /// use core.collections.ArrayStack;
    /// stack := new ArrayStack();
    ///
    /// AssertThat(stack.capacity() == 0);
    /// stack.setCapacity(1); // Sets the stack to contain only one item.
    /// 
    /// stack.push(10).unwrap();
    /// assertThat(stack.push(11).isErr()); // Cannot push since the stack is full.
    ///
    /// // Increasing the capacity.
    /// stack = new ArrayStack();
    /// stack.setCapacity(10);
    /// for item in 0..9 {
    ///     stack.push(item).Unwrap();   
    /// }
    /// assertThat(stack.push(99).isErr())
    /// stack.setCapacity(11);
    /// assertThat(stack.push(99).isOk());
    /// 
    /// // Reducing the capacity
    /// stack.setCapacity(2); // Shrinks the stack to only two items.
    /// assertThat(stack.size() == 2);
    /// ```
    public function setCapacity(value: UnsignedInt) {
        while value < this.items.length() {
            this.items.pop();
        }
        this._capacity = value;
    }
    /// Returns the top value in the stack without removing it.
    public function top(): ?T {
        this.items.last()
    }
    /// Removes the last item from the stack and returns it, if it exists.
    public function pop(): ?T {
        this.items.pop()
    }
    /// Enter data into the stack.
    ///
    /// This method will fail if the size of the stack is already at maximum length.
    public function push(data: T): Outcome<Bool, StackError> {
        if this.items.length() == this._capacity {
            err(StackError.AlreadyFull)
        } else {
            this.items.push(data);
            ok(true)
        }
    }
    /// Returns the capacity of the stack.
    public function capacity(): Int {
        this._capacity
    }
    /// Returns the size of the stack.
    public function size(): Int {
        this.items.length()
    }   
}

public enum StackError {
    AlreadyFull
}