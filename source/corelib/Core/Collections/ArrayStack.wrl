module ArrayStack;

/// An implementation of a stack using an array.
/// 
/// A stack is a LIFO (Last-in-First-out) data structure 
/// that stores items in one direction.
public model ArrayStack<T> {
    var items: Array<T>;
    var capacity: UnsignedInt;
   
    new(capacity?: UnsignedInt) {
        this.items = [];
        this.capacity = capacity.UnwrapOr(Todo());
    }
    /// Dynamically change the number of items in the stack.
    ///
    /// If there are currently more items that the new capacity, then the stack will be truncated.
    /// ## Usage
    /// ```wrl
    /// use Core.Collections.ArrayStack;
    /// stack := new ArrayStack();
    ///
    /// AssertThat(stack.Capacity() == 0);
    /// stack.SetCapacity(1); // Sets the stack to contain only one item.
    /// 
    /// stack.Push(10).Unwrap();
    /// AssertThat(stack.Push(11).IsErr()); // Cannot push since the stack is full.
    ///
    /// // Increasing the capacity.
    /// stack = new ArrayStack();
    /// stack.SetCapacity(10);
    /// for item in 0..9 {
    ///     stack.Push(item).Unwrap();   
    /// }
    /// AssertThat(stack.Push(99).IsErr())
    /// stack.SetCapacity(11);
    /// AssertThat(stack.Push(99).IsOk());
    /// 
    /// // Reducing the capacity
    /// stack.setCapacity(2); // Shrinks the stack to only two items.
    /// AssertThat(stack.Size() == 2);
    /// ```
    public function SetCapacity(value: UnsignedInt) {
        while value < this.items.Length() {
            this.items.Pop();
        }
        this.capacity = value;
    }
    /// Returns the top value in the stack without removing it.
    public function Top(): ?&T {
        this.items.Last()
    }
    /// Removes the last item from the stack and returns it, if it exists.
    public function Pop(): ?T {
        this.items.Pop()
    }
    /// Enter data into the stack.
    ///
    /// This method will fail if the size of the stack is already at maximum length.
    public function Push(data: T): Outcome<Bool, StackError> {
        if this.items.Length() == this.capacity {
            Err(new StackError("The stack is already full."))
        } else {
            this.items.Push(data);
            Ok(true)
        }
    }
    /// Returns the capacity of the stack.
    public function Capacity(): Int {
        this.capacity
    }
    /// Returns the size of the stack.
    public function Size(): Int {
        this.items.Length()
    }   
}

model StackError {
    var message: String;
    new(message: String){
        this.message = message;
    }   
}