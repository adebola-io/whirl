module OrderedSet;

use Super.Prelude.Todo;


/// A simple pair of items.
public model Tuple<T, U> {
    public var one: T;
    public var two: U;
    
    new(first: T, second: U) {
        this.one = first;
        this.two = second;
    }

    public function Swap(): Tuple<U, T> {
        new Tuple(this.two, this.one)
    }
}

public model Triple<T, U, V> {
    public var one: T;
    public var two: U;
    public var three: V;

    new(first: T, second: U, third: V) {
        this.one = first;
        this.two = second;
        this.three = third;
    }
}

/// A set containing four individual items.
public model Quadruple<T, U, V, S> {
    public var first: T;
    public var second: U;
    public var third: V;
    public var fourth: S;

    new(first: T, second: U, third: V, fourth: S) {
        this.first = first;
        this.second = second;
        this.third = third;
        this.fourth = fourth;
    }
    /// Groups the items in the quadruple to two tuples.
    /// ###  Usage
    /// ```
    /// use Core.Collections.{Quadruple, Tuple};
    /// 
    /// quadruple := new Quadruple(1, "Sefunmi", true, [35.5]);
    /// var { first, second } = quadruple.ToTuple();
    /// 
    /// Assert(first).Equals(new Tuple(1, "Sefunmi"));
    /// Assert(second).Equals(new Tuple(true, [35.5]));
    /// ```
    public function ToTuple(): Tuple<Tuple<T, U>, Tuple<V, S>> {
        Todo()
    }
}