module OrderedSet;

use Core.Prelude.Todo;
use Core.Primitives.Ops.Addition;


/// A simple ordered pair of items. Elements within a tuple can be of any type,
/// and the order in which they are defined is preserved.
public model Tuple<T, U> {
    public var a: T;
    public var b: U;
    
    new(first: T, second: U) {
        this.a = first;
        this.b = second;
    }
    /// Returns a new tuple with the position of the two items in the tuple reversed.
    /// ### Usage
    /// ```
    /// use Core.Collections.Tuple;
    /// 
    /// tuple := new Tuple(true, "story");
    /// swapped := tuple.Swap();
    /// Assert(swapped).Equals(new Tuple("story", true));
    /// ```
    public function Swap(): Tuple<U, T> {
        new Tuple(this.b, this.a)
    }
    /// Concatenates the elements of the pair into one.
    /// ### Usage
    /// ```
    /// tuple := Pair("John ", "Doe");
    /// joined := Tuple.Join(&tuple);
    /// 
    /// Assert(joined).Equals("John Doe");
    /// ```
    public static function Join<T implements Addition>(tuple: &Tuple<T, T>): T {
        tuple.a + tuple.b
    }
}
/// Takes two arguments of any type and returns a `Tuple` containing them.
/// 
/// It is useful for grouping related data or for passing multiple values 
/// as a single unit.
/// 
/// ### Usage
/// ```
/// pair1 := Pair(1, "apple");
/// pair2 := Pair(true, [1, 2, 3]);
/// 
/// // Accessing elements of the tuple.
/// first := pair1.a; 
/// Assert(first).Equals(1);
/// 
/// second := pair1.b;
/// Assert(second).Equals("apple");
/// ```
public function Pair<T, U>(a: T, b: U): Tuple<T, U> {
    return new Tuple(a, b);
}

public model Triple<T, U, V> {
    public var one: T;
    public var two: U;
    public var three: V;

    new(first: T, second: U, third: V) {
        this.one = first;
        this.two = second;
        this.three = third;
    }
}

/// A set containing four individual items.
public model Quadruple<T, U, V, S> {
    public var first: T;
    public var second: U;
    public var third: V;
    public var fourth: S;

    new(first: T, second: U, third: V, fourth: S) {
        this.first = first;
        this.second = second;
        this.third = third;
        this.fourth = fourth;
    }
    /// Groups the items in the quadruple to two tuples.
    /// ###  Usage
    /// ```
    /// use Core.Collections.{Quadruple, Tuple};
    /// 
    /// quadruple := new Quadruple(1, "Sefunmi", true, [35.5]);
    /// var { first, second } = quadruple.ToTuple();
    /// 
    /// Assert(first).Equals(new Tuple(1, "Sefunmi"));
    /// Assert(second).Equals(new Tuple(true, [35.5]));
    /// ```
    public function ToTuple(): Tuple<Tuple<T, U>, Tuple<V, S>> {
        Todo()
    }
}