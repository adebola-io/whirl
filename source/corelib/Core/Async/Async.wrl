/// The `Async` module contains all primitive constructs in the Whirlwind language for the creation 
/// and utilization of concurrent processes.
module Async;

use Super.Prelude.Bool;
use Super.Prelude.Todo;
use Super.Prelude.Guaranteed;
use Super.Process.Panic;
use Super.Internals.{Injunction, Invoke, Sequence};
use Super.Primitives.UnsignedInt;

/// Asynchronous functions do not run automatically in Whirlwind. Instead, calling an
/// async function produces a `Prospect`, which is essentially a lazy execution 
/// context for the called function.
/// 
/// A prospect provides an interface for specifying how and when the function should run,
/// the manner in which the values should be produced, the callbacks to be invoked,
/// interaction with other prospects, etc.
/// 
/// ## Usage
/// ```
/// use Core.Io.Print;
/// 
/// async function DoStuff(): UnsignedInt {
///     Println("Hello from a prospect!");
///     Core.Time.Sleep(5000); // Sleep for 5 seconds.
///     return 0;
/// }
/// 
/// function Main() {
///     prospect := DoStuff();
///     prospect.Run();
///     Print("Hello, world!"); // Will print before the prospect.
/// }
/// ```
public model Prospect<T> {
    public function Then<U>(next: fn (prior?: T): U): Prospect<U> {
        Todo()
    }
    /// Runs the prospect.
    public function Run(): Eventual<T> {
        Todo()
    }
    /// 
    public function Race(other: Prospect<T>): Prospect<T> {
        Todo()
    }
}


/// An eventual is an asynchronously running operation,
/// produced by calling `.Run()` on a `Prospect`.
public model Eventual<T> implements Guaranteed<T> {
    /// Whether or not the eventual is resolved.
    public var resolved: Bool;
    /// Whether or not the eventual has been aborted.
    public var aborted: Bool;
    /// The sequence running this eventual.
    var sequence: &Sequence;
    /// The final value. Until the eventual is resolved, the value remains empty.
    var value: T;
    public function [Guaranteed.guarantee](): T {
        this.Unwrap()
    }
    /// Cancels the running of the eventual and discards its value.
    public function Abort() {
        this.aborted = true;
    }
    /// Blocks the current execution thread until the eventual is resolved.
    public function Await(): T {
        if this.aborted {
            Panic(Some("Called Await on an aborted Eventual."));
        };
        Todo()
    }
    /// Forces the eventual to be resolved, and panics if it isn't.
    public function Unwrap(): T {
        if this.aborted {
            Panic(Some("Called Unwrap() on an aborted eventual."));
        };
        if not this.resolved or this.value is Core.Internals.Nullptr {
            Panic(Some("Called Unwrap() on an unresolved eventual."));
        };
        return this.value;
    }
}

/// Runs a prospect immediately, blocking the current execution context until it is finished.
public function ToSync<T>(prospect: Prospect<T>): T {
    prospect.Run().Await()
}

public model CurrentSequence {
    /// Forces the current running sequence to halt for a duration.
    public static function Sleep(timeout: UnsignedInt) {
        Todo()
    }
}