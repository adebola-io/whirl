module Injunction;

use Super.{
    Prelude.Range,
    Async.Eventual,
    Primitives.{
        String,
        Int,
        UnsignedInt,
    }
};
use Internals.{never, Sequence};
 
/// List of variants that can be called with `Invoke()`.
public enum Injunction {
    // Strings.
    StrAdd(String, String),
    StrAt(String, Int),
    StrAppend(String, String),
    StrBytes(String),
    StrClear(String),
    StrContains(String, String),
    StrLength(String),
    StrPad(String, UnsignedInt),
    StrPadLeft(String, UnsignedInt),
    StrPadRight(String, UnsignedInt),
    StrPadInPlace(String, UnsignedInt),
    StrPrepend(String, String),
    StrRepeat(String, UnsignedInt),
    StrReplace(String, String, String),
    StrReverse(String),
    StrSlice(String, Range<Int>),
    StrSplit(String, String),
    StrLowercase(String),
    StrCapitalCase(String),
    StrSentenceCase(String),
    StrUppercase(String),
    StrTrim(String),
    StrTrimInPlace(String),
    StrTrimStart(String),
    StrTrimEnd(String),
    // Eventuals.
    EventAwait(&Sequence),
    EventAbort(&Sequence),
    EventCreate(&Prospect),
    SeqId(&Sequence)
}

/// Function to perform intrinsic and builtin operations.
public function Invoke(command: Injunction): never {
   // The recursion here is false, and only exists to satisfy the
   // typechecker. Technically, all calls to `Invoke` are handled
   // outside the Whirlwind runtime.
   return Invoke(command);
}