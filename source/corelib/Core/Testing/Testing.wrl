module Testing;

use Core.Prelude.Bool;
use Core.Prelude.Todo;
use Core.Process.FatalOnCaller;
use Core.Io.Fmt;
use Core.Primitives.String;
use Core.Primitives.UInt8;
use Core.Prelude.Display;

/// Creates an assertion object.
public function Assert<T implements Display>(value: T): Assertion<T> {
    return new Assertion(value);
}

/// Tests that a condition is true.
public function AssertThat(proposition: Bool) {
    if !proposition {
        FatalOnCaller("Assertion failed due to false proposition.");
    }
}

/// Generates a string of an assertion error.
function AssertionMessage<T implements Display>(mainMessage: String, left: T, right: T): String {
    template := Fmt(mainMessage);
    template.Extend("Contained value: %\nOther: %");
    return template.Add(left).Add(right).Finish();
}

/// This model represents an assertion object, 
/// which is the base object for testing equality operations.
public model Assertion<T implements Display> {
    var value: T;
    new(value: T) {
        this.value = value;
    }
    /// Checks if the contained value equals another.
    public function Equals(other: T): This {
        if other != this.value {
            message := AssertionMessage(
                        "Assertion failed on equality.", 
                        this.value, 
                        other);
            FatalOnCaller(message);
        };
        return this;
    }
    /// Checks that the contained value does not equal another.
    public function DoesNotEqual(other: T): This {
        if other == this.value {
            message := AssertionMessage(
                        "Assertion failed on inequality.", 
                        this.value, 
                        other);
            FatalOnCaller(message);
        };
        return this;
    }
    /// Checks that an array is empty.
    public static function ArrayIsEmpty<T>(arr: Array<T>) {
        if arr.Length() != 0 {
            message := Core.Io.Fmt("Assertion failed because array is not empty.");
            message.Extend("Array Length: %").Add(arr.Length());
            FatalOnCaller(message.Finish());
        }
    }
}

