module Memory;

use Core.{
    Primitives.{UInt8, UnsignedInt},
    Prelude.{
        Iteratable, Maybe, None, Some, Display, 
        String, Todo, Bool
    },
};

/// Swaps the address of two values.
/// # Usage
/// ```
/// use Core.Memory.Swap;
/// 
/// a := 9;
/// b := 12;
/// Swap(a, b);
/// 
/// Assert(a).Equals(12);
/// Assert(b).Equals(9);
/// ```
public function Swap<T>(a: T, b: T) {
    temp := a;
    a = b;
    b = temp;
}

/// A weak reference 
public model WeakRef<T> {
    var reference: T;
    var exists: Bool;
    /// Retrieves the value in the reference.
    public function Value(): ?T {
        if this.exists {
            return Some(this.reference);
        } else None()
    }
}


public model Buffer implements Iteratable<UInt8> + Display {
    var values: []UInt8;
    var idx: UnsignedInt;

    new(values: []UInt8) {
        this.values = values;
        this.idx = 0;
    }

    public function [Iteratable.Next](): ?UInt8 {
        if this.idx == this.values.Length() {
            return None();
        };
        nextByte := this.values[this.idx];
        this.idx += 1;
        return Some(nextByte);
    }

    public function [Display.ToStr](): String {
        return Todo();
    }
}