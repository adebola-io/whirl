module Process;

use Core.{
    Primitives.String,
    Primitives.UnsignedInt,
    Async.CurrentSequence,
    Internals.{Invoke, Injunction},
};
use Core.Prelude.Maybe;

/// Unwinds the stack by one frame and crashes with a fatal error.
public function FatalOnCaller(message: String): never  {
    return Invoke(Injunction.SeqFatalOneStep(message));
}

/// Indicates that the current piece of code is unfinished.
/// 
/// Developers can use this function as a temporary marker for incomplete work.
/// It is also useful for satisfying the type system when implementing other functionality.
/// 
/// This function will *always* cause the sequence to crash.
/// ### Usage
/// ```
/// function PositiveSquare(a: Int): Outcome<Int, String> {
///     if a >= 0 {
///         return Ok(a * a);
///     } else {
///         Todo() // will implement later.
///     }
/// }
/// ```
public function Todo(message?: String): never {
    return FatalOnCaller(message.UnwrapOr("Entered unfinished code."));
}

/// Called when an execution sequence encounters an unrecoverable or
/// unexpected condition. It causes the sequence to
/// abruptly terminate or crash, unwinding the sequence's stack.
/// 
/// If the sequence has no recover callback attached, 
/// then the crash will bubble up, crashing the parent sequence, and then its parent,
/// up until it encounters a recovery, or it crashes the main program sequence.
///
/// ### Usage
/// ```
/// function Divide(number: Int, divisor: Int): Float {
///     if divisor == 0 {
///         Fatal("Cannot divide by zero!");
///     } else {
///         return a / b;
///     }
/// }
/// ```
public function Fatal(message?: String): never {
    return Invoke(Injunction.SeqFatal(message));
}

/// Returns the value of an environment variable.
public function GetEnv(varName: String): ?&String {
    Todo()
}


const CURRENT_WORKING_DIRECTORY: String = "";
/// Returns a string value corresponding to the path of the current working directory.
/// ### Usage
/// ```
/// currentDir := Core.Process.Cwd();
/// Print("The current directory is " + currentDir);
/// ```
public function Cwd(): String {
    return CURRENT_WORKING_DIRECTORY;
}

/// Schedules a function to run after a duration elapses.
public function WaitThen(callback: fn(), timeout: UnsignedInt) {
    CurrentSequence.Sleep(timeout);
    callback();
}