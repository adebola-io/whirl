module numeric;

use core.prelude.{Display, Default};
use core.internals.{invoke, Injunction};
use string.String;
use ops.{Addition, Sequenced};

/// An interface to be implemented by values that can be cast to an unsigned integer.
interface Unsigned {
    public function unsigned(): UnsignedInt;
}

/// An unsigned 8-bit integer.
public model UInt8 implements Display + Addition + Sequenced + Default + Unsigned {
    // Compiler built in.
}

/// An unsigned 16-bit integer.
public model UInt16 implements Display + Addition + Sequenced + Default + Unsigned {
    // Compiler built in.
}

/// An unsigned 32-bit integer.
public model UInt32 implements Display + Addition + Sequenced + Default + Unsigned {
    // Compiler built in.
}

/// An unsigned 64-bit integer.
public model UInt64 implements Display + Addition + Sequenced + Default + Unsigned {
    // Compiler built in.
}

/// An integer value with a direction sign.
public model SignedInt implements Display + Addition + Sequenced + Default + Unsigned {
    // Compiler built in.
}

/// A union data type to represent different unsigned integer values.
public type UnsignedInt = UInt8 | UInt16 | UInt32 | UInt64;

/// A union data type to represent different integer values.
public type Int = UnsignedInt | SignedInt;

/// An 32-bit floating number.
public model Float32 implements Display + Addition + Default {
    // Compiler built in.
}

/// A 64-bit floating number.
public model Float64 implements Display + Addition + Default {
    // Compiler built in.
}

/// A union data type to represent floating-point numbers.
public type Float = Float32 | Float64 | Int;

/// An arbitrarily large integer value.
public model BigInt implements Display + Addition + Default {
    // Compiler built in.
}

/// A union data type to represent a number.
public type Number = Int | Float | BigInt;
