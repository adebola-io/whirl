module bool;

use core.prelude.Display;
use string.String;
use core.prelude.{some, none};


/// A representation of boolean values, `true` or `false`.
// compiler built-in.
public model Bool implements Display {
    public function [Display.toStr](): String {
        if this {"true"} else "false"
    }
    /// Creates a `Maybe<T>` based on the value.
    /// ### Usage
    /// ```
    /// operationSuccessful := true;
    /// message := fn "Operation successful!";
    /// 
    /// optionalMessage := operationSuccessful.ifTrue(message);
    /// 
    /// assertThat(optionalMessage.isSome());
    /// ```
    public function ifTrue<T>(consequent: fn(): T): ?T {
        if this { some(consequent()) } else { none() }
    }
}