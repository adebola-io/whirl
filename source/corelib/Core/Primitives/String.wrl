module string;

use ops.{Addition, Sequenced};
use bool.Bool;
use core.{ 
    internals.builtin,
    collections.Hash,
    prelude.{
        Maybe, AsIterator, Iteratable, 
        Range, Display, some, none, Default
    },
    process.todo,
};
use numeric.{Int, UnsignedInt, UInt8, UInt16};
use array.Array;

/// Model for creating, manipulating and formatting text sequences.
public model String 
    implements Addition 
    + AsIterator<String, Chars> 
    + Default
    + Display
    + Hash
    + Sequenced
{
    var arr: []UInt8;
    new() {
        this.arr = [];
    }
    /// Returns the next character alphabetically in a sequence.
    function [Sequenced.nextItem](): ?String {
        if this.arr.length() > 1 { none() } else { todo() }
    }
    /// Implementation of the Display trait.
    public function [Display.toStr](): String {
        return this;
    }
    /// Implementation of the Default trait.
    static function [Default.init](): This {
        return new String();
    }
    /// Adds two strings together.
    /// ## Usage
    /// ```
    /// str := "Hello" + ", world!";
    /// assert(str).equals("Hello, world!");
    /// ```
    function [Addition.add](other: This): This {
        newStr := this;
        for char in other.arr {
            newStr.arr.push(char);
        }
        return newStr;
    }
    /// Creates an iterator from the contents of a string.
    /// ## Usage
    /// ```
    /// str := "This is a string";
    /// 
    /// for char in str {
    ///     print(char);
    /// }
    /// ```
    public function [AsIterator.iter](): Chars {
        return new Chars(this);
    }
    // /// Returns a `Maybe` with the character at a zero based index in the string.
    // ///
    // /// It also supports negative indexes, which will return values in reverse from the end of the string.
    // /// ## Usage
    // /// ```
    // /// str := "This is a string";
    // /// 
    // /// assert(str.at(0)).equals(some("T"));
    // /// assert(str.at(8)).equals(some("a"));
    // /// assert(str.at(11)).equals(some("t"));
    // /// ```
    // /// _Indexing from behind:_
    // /// 
    // /// ```
    // /// assert(str.at(-1)).equals(some("g"));
    // /// assert(str.at(-3)).equals(some("i"));
    // /// ```
    // /// It will return no value if the length of the string is exceeded.
    // public function at(position: Int): ?String {
    //     some(this.arr.at(position)?.toStr())
    // }
    /// Adds text to the end of the string.
    /// ## Usage
    /// ```
    /// str := "Hello";
    /// 
    /// str.append(", world!");
    /// 
    /// assert(str).equals("Hello, world!");
    /// ```
    public function append(suffix: String) {
        for unit in suffix.arr {
            this.arr.push(unit);
        }
    }
    /// Returns a copy of the bytes in the string.
    /// ## Usage
    /// ```
    /// ```
    public function bytes(): []UInt8 {
        return this.arr;
    }
    /// Changes the first character of every word in the string to upper case.
    /// ## Usage
    /// ```
    /// str := "jonathan is a boy";
    /// str2 := str.capitalCase();
    /// 
    /// assert(str2).equals("Jonathan Is A Boy");
    /// ```
    public function capitalCase(): String {
        return builtin.strings.capitalCase(this);
    }
    /// Returns an iterator over the valid characters in the string.
    /// ## Usage
    /// ```
    /// str := "adebola.io"
    /// 
    /// for char in str.chars() {
    ///     print(char);
    /// }
    /// ```
    public function chars(): Chars {
        return new Chars(this);
    }
    /// Empties the string of its characters.
    /// ## Usage
    /// ```
    /// str := "tralalalalaleeday";
    /// 
    /// str.clear();
    /// 
    /// assert(str).equals("");
    /// assert(str.length()).equals(0);
    /// ```
    public function clear() {
        this.arr = [];
    }
    /// Returns true if a substring is contained within the string.
    /// ## Usage
    /// ```
    /// str := "This is a world premiere.";
    /// 
    /// assertThat(str.contains("world"));
    /// assertThat(str.contains("premiere"));
    /// ```
    public function contains(substr: String): Bool {
       this.arr.includes(substr.arr)
    }
    /// Returns true if the string ends with a given pattern.
    /// ### Usage
    /// ```
    /// name := "Michael";
    /// assertThat(name.endsWith("l"));
    /// assertThat(name.endsWith("ael"));
    /// ```
    public function endsWith(pat: String): Bool {
        if pat.arr.length() > this.arr.length() {
            return false;
        }
        for { a as ch1, b as ch2 } 
          in this.arr.reverse().zip(pat.arr.reverse()) 
        {
            if ch1 != ch2 {
                return false;
            }
        }
        return true;
    }
    /// Returns true if the string is made up entirely of alphabetic and numeric characters.
    /// ## Usage
    /// ```
    /// str := "helloworld1234";
    /// assertThat(str.isAlphanumeric());
    /// 
    /// str2 := "%hello_world$";
    /// assertThat(!str2.isAlphanumeric());
    /// ```
    public function isAlphanumeric(): Bool {
        return builtin.strings.isAlphanumeric(this);
    }
    /// Returns true if the string has no characters.
    /// ## Usage
    /// ```
    /// str := "";
    /// assertThat(str.isEmpty());
    /// 
    /// str.append("Hello");
    /// assertThat(!str.isEmpty());
    /// ```
    public function isEmpty(): Bool {
        return this.arr.length() == 0;
    }
    /// Returns the number of characters in the string.
    /// ## Usage
    /// ```
    /// str := "Hello";
    /// 
    /// assert(str.length()).equals(5);
    /// ```
    public function length(): UnsignedInt {
        this.arr.length()
    }
    /// Changes the case of all letters in the string to lower case.
    /// ## Usage
    /// ```
    /// str := "HELLO, WORLD!";
    /// str2 := str.lowerCase();
    /// 
    /// assert(str2).equals("hello, world!");
    /// ```
    public function lowerCase(): String {
        return builtin.strings.lowerCase(this);
    }
    /// Returns a version of the string with padding on both sides.
    /// ## Usage
    /// ```
    /// str := "Alright";
    /// str2 := str.pad(3);
    /// 
    /// assert(str2).equals("   Alright   "); // 3 spaces before and after.
    /// ```
    public function pad(count: UnsignedInt): String {
        return builtin.strings.pad(this, count);
    }
    /// Returns a version of the string with left padding.
    /// ## Usage
    /// ```
    /// str := "Alright";
    /// str2 := str.padLeft(3);
    /// 
    /// assert(str2).equals("   Alright"); // 3 spaces before.
    /// ```
    public function padLeft(count: UnsignedInt): String {
        return builtin.strings.padLeft(this, count);
    }
    /// Returns a version of the string with left padding.
    /// ## Usage
    /// ```
    /// str := "Alright";
    /// str2 := str.padRight(3);
    /// 
    /// assert(str2).equals("Alright   "); // 3 spaces before.
    /// ```
    public function padRight(count: UnsignedInt): String {
        return builtin.strings.padRight(this, count);
    }
    /// Pads the string in place with whitespace on the left and right sides.
    /// ## Usage
    /// ```
    /// str := "Hello, world!";
    /// str.padInPlace(3);
    /// 
    /// assert(str).equals("   Hello, world!   ");
    /// ```
    public function padInPlace(count: UnsignedInt) {
        this = this.pad(count);
    }
    /// Adds text to the start of the string.
    /// ## Usage
    /// ```
    /// str := "world!"
    /// str.prepend("Hello, ");
    /// 
    /// assert(str).equals("Hello, world!");
    /// ```
    public function prepend(prefix: String) {
        this.arr.prepend(prefix.arr);
    }
    /// Returns a String value that is made from a number of copies of the original string.
    /// If count is 0, the empty string is returned.
    /// ## Usage
    /// ```
    /// str := "Whirlwind";
    /// 
    /// str2 := str.repeat(3);
    /// assert(str2).equals("WhirlwindWhirlwindWhirlwind"); // 3 copies.
    /// 
    /// str3 := str.repeat(1);
    /// assert(str3).equals("Whirlwind"); // One copy.
    /// 
    /// str3 := str.repeat(0);
    /// assertThat(str2.IsEmpty()); // No copies.
    /// ```
    public function repeat(count: UnsignedInt): String {
        str := new String();
        // for {} in 0..count {
        //    str.Append(this);
        // }
        return str;
    }
    /// Replaces all instances of a substring and returns the new string.
    /// ## Usage
    /// ```
    /// str := "John goes to school. John buys a book.";
    /// 
    /// str2 := str.replace("John", "Mike");
    /// 
    /// assert(str2).equals("Mike goes to school. Mike buys a book.")
    /// ```
    public function replace(subStr: String, newStr: String): String {
        return builtin.strings.replace(this, subStr, newStr);
    }
    /// Returns a reversed version of the string.
    /// ## Usage
    /// ```
    /// str := "pandemonium";
    /// 
    /// str2 := str.reverse();
    /// 
    /// assert(str2).equals("muinomednap");
    /// ```
    public function reverse(): String {
        newStr := new String();
        for unit in this.arr.reverse() {
            newStr.arr.push(unit);
        }
        return newStr;
    }
    /// Returns a section of the string.
    /// The range argument is exclusive, meaning it goes from the left index all the way to one before the right.
    /// ## Usage
    /// ```
    /// str := "Hello, world!";
    /// 
    /// assert(str.slice(0..5)).equals(some("Hello")); // index 0 to 4.
    /// ```
    public function slice(bounds: Range<UnsignedInt>): ?String {
        return builtin.strings.slice(this, bounds);
    }
    /// Divides the string into a list of substrings based on a delimeter.
    /// ## Usage
    /// ```
    /// str := "Ring around the rosy";
    /// words := str.split(" ");
    /// 
    /// assert(words == ["Ring", "Around", "The", "Rosy"]);
    /// ```
    public function split(delim: String): []String {
        return builtin.strings.split(this, delim);
    }
    /// Divides the string into a list of substrings based on a predicate.
    /// ## Usage
    /// ```
    /// str := "Hello world. My name is James.";
    /// sentences := str.splitAt(fn(pat) pat == ". ");
    /// 
    /// assert(sentences).equals(["Hello world", "My name is James."]);
    /// ```
    public function splitAt(predicate: fn(pattern: String): Bool): []String {
        return builtin.strings.splitAt(this, predicate);
    }
    /// Changes only the first character in the string to upper case.
    /// ## Usage
    /// ```
    /// str := "nice to meet you, where you been?";
    /// str2 := str.sentenceCase();
    /// 
    /// assert(str2).equals("Nice to meet you, where you been?");
    /// ```
    public function sentenceCase(): String {
        return builtin.strings.sentenceCase(this);
    }
    /// Returns a version of the string without left or right whitespace padding.
    /// ## Usage
    /// ```
    /// str := "\n\n\nWhat then shall we say?  \n\n\n\r\t";
    /// 
    /// assert(str.trim()).equals("What then shall we say?");
    /// ```
    public function trim(): String {
        return builtin.strings.trim(this);
    }  
    /// Mutates the string in place and removes left or right whitespace padding.
    /// ## Usage
    /// ```
    /// str := "\n\n\nWhat then shall we say?  \n\n\n\r\t";
    /// 
    /// str.trimInPlace();
    /// 
    /// assert(str).equals("What then shall we say?");
    /// ```
    public function trimInPlace() {
        this = this.trim()
    }   
    /// Returns a version of the string without left whitespace padding.
    /// ## Usage
    /// ```
    /// str := "\n\n\nWhat then shall we say?\n";
    /// 
    /// assert(str.trimStart()).equals("What then shall we say?\n");
    /// ```
    public function trimStart(): String {
        return builtin.strings.trimStart(this);
    } 
    /// Returns a version of the string without right whitespace padding.
    /// ## Usage
    /// ```
    /// str := "\nWhat then shall we say?\n\n\n";
    /// 
    /// assert(str.trimEnd()).equals("\nWhat then shall we say?");
    /// ```
    public function trimEnd(): String {
        return builtin.strings.trimEnd(this);
    }
    /// Changes the case of all letters in the string to upper case.
    /// ## Usage
    /// ```
    /// str := "hello, world!";
    /// assert(str.upperCase()).equals("HELLO, WORLD!");
    /// ```
    public function upperCase(): String {
        return builtin.strings.trimEnd(this);
    }
    /// Returns true if the string starts with a given pattern.
    /// 
    /// ### Usage
    /// ```
    /// name := "Joshua";
    /// assertThat(name.startsWith("J"));
    /// assertThat(name.startsWith("Jo"));
    /// ```
    public function startsWith(pat: String): Bool {
        if pat.arr.length() > this.arr.length() {
            return false;
        }
        for { a, b } in this.arr.iter().zip(pat.arr.iter()) 
        {
            if a != b {
                return false;
            }
        }
        return true;
    }
    /// Creates a string from a value that implements Display.
    /// ## Usage
    /// ```
    /// value := 1234;
    /// valueStr := String.from(value);
    /// 
    /// assert(valueStr).equals("1234");
    /// ```
    public static function from<T implements Display>(value: T): This {
        value.toStr()
    }
}


/// A simple iterator over the characters in a string.
public model Chars implements Iteratable<String> {
    var idx: UnsignedInt;
    var string: String;
    new(string: String) {
        this.idx = 0;
        this.string = string;
    }
    /// Returns the next character.
    public function [Iteratable.next](): ?String {
        // nextChar := this.string.at(this.idx)?;
        // this.idx += 1;
        // return some(nextChar);
        todo()
    }
}

/// Calculates the edit distance between two strings using the [Levenshtein's Algorithm](http://example.com).
public function LevenshteinEditRatio(str1: String, str2: String): Int {
    todo()
}