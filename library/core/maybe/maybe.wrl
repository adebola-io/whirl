module maybe;

use core.{
    bool.Bool,
    interfaces.{Guaranteed, Try, Default, Clonable},
    internals.{builtin, never},
    outcome.{ok, err, Outcome},
    string.{Display, fmt, String},
    sentinels.{fatal, fatalOnCaller},
};

/// Creates a `Maybe` with no value.
public function none<T>() -> ?T {
    return builtin.maybe.none();
}

/// Creates a `Maybe` with an internal value.
public function some<T>(value: T) -> ?T {
    return builtin.maybe.some(value);
}

/// A value that may or may not exist.
public model Maybe<T> 
    implements Clonable|=(T implements Clonable)
    + Default
    + Display|=(T implements Display)
    + Guaranteed<T> 
    + Try<T, ?never> 
{
    /// A simple flag for marking existence or non-existence.
    var _exists: Bool;
    /// The internal value.
    /// 
    /// This will point to unintialized memory if 
    /// if it is retrieved from an empty `Maybe`. 
    /// 
    /// It should **never** be accessed outside of the 
    /// internals of the model, or without first checking the
    /// flag.
    var value: T;
    /// Implementation of the Default interface.
    static function [Default.init]() -> This {
        return none();
    }
    /// Returns a clone of the Maybe.
    /// ### Usage
    /// ```
    /// maybeInt := some(42);
    /// maybeInt2 := maybeInt.clone();
    /// 
    /// assert(maybeInt2).equals(some(42));
    /// ```
    public function [Clonable.clone]|=(T implements Clonable)() -> This {
        // if this.isSome() {
        //     return some(this.value.clone());
        // }
        return none();
    }
    /// Converts the Maybe to a string.
    /// ### Usage
    /// ```
    /// maybeInt := some(90);
    /// assert(maybeInt.toStr()).equals("Maybe.some(90)");
    /// 
    /// maybeInt = none();
    /// assert(maybeInt.toStr()).equals("Maybe.none");
    /// ```
    public function [Display.toStr]|=(T implements Display)() -> String {
        if this.isNone() {
            return "Maybe.none";
        }
        core.sentinels.todo()
        // return fmt("Maybe.some(%)").add(this.value).finish();
    }
    /// Implementation of the `Guaranteed` interface.
    function [Guaranteed.guarantee]() -> T {
        return this.unwrap();
    }
    /// Implementation of the `Try` interface.
    function [Try.try]() -> Outcome<T, ?never> {
        if this.isSome() {
            return ok(this.value);
        } else {
            return err(none());
        }
    }
    /// Combines two `Maybe` values into one, computing the second from the first,
    /// if and only if the first exists, and nothing otherwise.
    /// ### Usage
    /// ```
    /// ```
    public function andThen<U>(conjunct: fn(former: T) -> ?U) -> ?U {
        if this.isSome() { conjunct(this.value) } else { none() }
    }
    /// Unwraps the Maybe value if it exists, or crashes the running sequence 
    /// if otherwise. 
    /// 
    /// It takes in an error message that will be displayed if the
    /// later is the case.
    /// ### Usage
    /// ```
    /// maybeVal := some("Hello, world!");
    /// assert(maybeVal.expect("No value in Maybe!!")).equals("Hello, world!");
    /// ```
    public function expect(error: String) -> T {
        if this.isNone() { fatal(some(error)) } else { this.value }
    }
    /// Returns a Bool indicating if the Maybe contains no value.
    /// ### Usage
    /// ```
    /// noValue: ?String := none();
    /// assertThat(noValue.isNone());
    /// 
    /// stringValue := some("boy");
    /// assertThat(!stringValue.isNone());
    /// ```
    public function isNone() -> Bool {
        this._exists
    }
    /// Returns a Bool indicating whether there is a value contained or not.
    /// ### Usage
    /// ```
    /// stringValue := some("boy");
    /// assertThat(stringValue.isSome());
    /// 
    /// noValue: ?String := none();
    /// assertThat(!noValue.isSome());
    /// ```
    public function isSome() -> Bool {
       !this._exists
    }
    /// Returns a Bool indicating whether there is a value contained, and it
    /// upholds a given predicate.
    /// ### Usage
    /// ```
    /// predicate := fn(value: Int32) value == 42;
    /// 
    /// maybeInt := some(42);
    /// assertThat(maybeInt.isSomeAnd(predicate));
    /// 
    /// maybeInt2 := some(100);
    /// assertThat(!maybeInt2.isSomeAnd(predicate));
    /// 
    /// maybeInt3: ?Int32 := none()
    /// assertThat(!maybeInt3.isSomeAnd(predicate));
    /// ```
    public function isSomeAnd(predicate: fn(value: T) -> Bool) -> Bool {
        this.isSome() and predicate(this.value)
    }
    /// Performs a computation if there is an internal value contained.
    /// ### Usage
    /// ```
    /// use core.io.fmt;
    /// maybeValue := some(42);
    /// 
    /// maybeValue.isSomeThen(fn(value) {
    ///     message := fmt("The value is %").add(value).finish();
    ///     print(message);
    /// })
    /// ```
    public function isSomeThen(consequent: fn(value: T)) {
        if this.isNone() {
            return;
        };
        consequent(this.value);
    }
    /// Performs a computation if there is no value contained in the Maybe.
    public function isNoneThen(consequent: fn()) {
        if this.isNone() { consequent() };
    }
    /// Returns a Bool indicating whether there is no value, or there is a value and it
    /// upholds a given predicate.
    /// ### Usage
    /// ```
    /// predicate := fn(value: Int32) value > 5;
    /// 
    /// maybeInt := some(10);
    /// assertThat(maybeInt.isNoneOr(predicate));
    /// 
    /// maybeInt2: ?Int32 := none();
    /// assertThat(maybeInt2.isNoneOr(predicate));
    /// 
    /// maybeInt3 := some(4);
    /// assertThat(not maybeInt3.isNoneOr(predicate));
    /// ```
    public function isNoneOr(predicate: fn(value: T) -> Bool) -> Bool {
        this.isNone() or predicate(this.unwrap())
    }
    /// Maps a `Maybe<T>` to an `Outcome<T, E>` by passing in a fallback error
    /// value if there is nothing within.
    /// ### Usage
    /// ```
    /// ```
    public function someOr<E>(error: E) -> Outcome<T, E> {
        if this.isNone() { err(error) } else { ok(this.value) }
    }
    /// Maps a `Maybe<T>` to an `Outcome<T, E>` by computing a fallback error
    /// value if there is nothing within.
    /// ### Usage
    /// ```
    /// use core.math.parseInt;
    /// parseError := fn new Error("Could not parse.");
    /// 
    /// intErr := parseInt("a9s").someOrElse(parseError);
    /// 
    /// assert(intErr).equals(err(new Error("Could not parse.")));
    /// ```
    public function someOrElse<E>(error: fn() -> E) -> Outcome<T, E> {
        if this.isNone() { err(error()) } else { ok(this.value) }
    }
    /// Combines two intermediate values
    public function orElse(alternate: fn() -> ?T) -> ?T {
        if this.isSome() { this } else { alternate() }
    }
    /// Ignores the maybe and returns the internal value. 
    /// It will throw an error if no value is present.
    /// <!--ignore-->
    /// ### Usage
    /// ```
    /// numValue := some(89);
    /// assert(numValue.unwrap()).equals(89);
    /// ```
    /// <!--ignore-->
    /// ```
    /// noValue: ?Number = none();
    /// noValue.unwrap(); // Will panic with an error.
    /// ```
    /// ### Panics
    /// It panics if called on a `Maybe` with no value.
    public function unwrap() -> T {
        if this.isNone() {
            fatalOnCaller("Called Unwrap on a Maybe with no value.")
        }
        return this.value;
    }
    /// Returns the internal value, or another given value.
    public function unwrapOr(value: T) -> T {
        if this.isNone() { value } else { this.value }
    }
    /// Returns the internal value, or computes another given value.
    public function unwrapOrElse(fallback: fn() -> T) -> T {
        if this.isNone() { fallback() } else { this.value }
    }
    /// Converts a `Maybe<T>` to a `Maybe<E>` by applying a transformation function.
    /// ### Usage
    /// ```
    /// double := fn(x: Number) x * 2;
    /// 
    /// first := some(9).map(double);
    /// assert(first.unwrap()).equals(18);
    /// 
    /// second: ?Number := none().map(double);
    /// assertThat(double.isNone());
    /// ```
    public function map<U>(transform: fn(former: T) -> U) -> ?U {
        some(transform(this?))
    } 
    public function xor(other: ?T) -> ?T {
        if this.isSome() and other.isNone() {
            return this;
        }
        if this.isNone() and other.isSome() {
            return other;
        }
        return none();
    }
    /// Unwraps a Maybe and returns its internal value if it exists.
    /// 
    /// If it does not, it returns the default value of the internal type.
    /// ### Usage
    /// ```
    /// i := some(50);
    /// assert(i.unwrapOrDefault()).equals(50);
    /// 
    /// j: ?Int32 := none();
    /// assert(j.unwrapOrDefault()).equals(0); // default value for Int32.
    //  ```
    public function unwrapOrDefault|=(T implements Default)() -> T {
        // if this.isNone() {
        //     var default: T;
        //     return default;
        // } 
        return this.value;
    }
    /// Tranforms a `Maybe<Maybe<T>>` to a `Maybe<T>`.
    public function flatten<U>|=(T is ?U)() -> ?U {
        core.sentinels.todo()
        // if this.isNone() { none() } else { this.value }
    }
}