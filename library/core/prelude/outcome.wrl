module outcome;

use core.{
    primitives.Bool,
    prelude.{Try, Guaranteed, todo},
    internals.{never, builtin},
    process.sentinels.fatalOnCaller
};
use maybe.{some, none};

/// An `Outcome` is a generic model 
/// that represents the possible results of an operation. 
/// 
/// It has two possible states:
/// - `ok(T)`: The operation was successful and returned a value of type `T`.
/// - `err(E)`: The operation failed and returned an error of type `E`.
/// 
/// The Outcome can be used to represent the results of fallible operations,
/// such as:
/// - reading a file, 
/// - parsing a string,
/// - executing a database query, or
/// - connecting to a server.
/// 
/// It presents a way to handle errors predictably.
public model Outcome<T, E> implements Guaranteed<T> + Try<T, Outcome<never, E>> {
    /// flag representing the type of outcome.
    var flag: OutcomeType;
    var value: T | E;

    /// Implementation of the Guarantee interface.
    function [Guaranteed.guarantee]() -> T {
        this.unwrap()
    }
    /// Implementation of the `Try` interface.
    function [Try.try]() -> Outcome<T, Outcome<never, E>> {
        if this.isOk() {
            return ok(this.unwrap());
        } else {
            return todo();
        }
    }
    
    /// Returns the inner value if the operation was a success, or causes a runtime error otherwise.
    /// ### Usage
    /// ```
    /// outcome := ok(9);
    /// value := outcome.unwrap();
    /// assert(value).equals(9);
    /// ```
    /// <!--ignore-->
    /// ```
    /// outcome := err("This was an error");
    /// outcome.unwrap(); // Will cause a runtime error.
    /// ```
    public function unwrap() -> T {
        if this.isErr() {
            fatalOnCaller("Called Unwrap on an Err value.")
        }
        return builtin.outcome.unwrap(this);
    }
    /// Returns the inner error value if the outcome is an error, or causes a runtime error otherwise.
    /// ### Usage
    /// ```
    /// outcome := err("An error occured.");
    /// value := outcome.asErr();
    /// assert(value).equals("An error occured.");
    /// ```
    public function asErr() -> E {
        if this.isOk() {
            fatalOnCaller("Called AsErr on an Ok value.");
        }
        return builtin.outcome.unwrapError(this);
    }
    /// Returns true if the outcome is `ok` 
    /// i.e. The operation was successful.
    /// ### Usage
    /// ```
    /// outcome := ok(9)
    /// assertThat(outcome.isOk())
    /// ```
    public function isOk() -> Bool {
        return this.flag == OutcomeType.Ok;
    }

    /// Returns true if the outcome is an `err`.
    /// i.e. The operation failed.
    /// ### Usage
    /// ```
    /// outcome := err("Something went wrong.");
    /// AssertThat(outcome.isErr())
    /// ```
    public function isErr() -> Bool {
        return this.flag == OutcomeType.Err;
    }
    /// Checks if the outcome was successful and checks its internal value as well.
    /// ### Usage
    /// ```
    /// outcome := ok(42);
    /// assertThat(outcome.isOkAnd(fn(value) value == 42));
    /// ```
    public function isOkAnd(predicate: fn(value: T) -> Bool) -> Bool {
        this.isOk() and predicate(this.unwrap())
    }
    /// Checks if the outcome failed and checks the error value as well.
    /// ### Usage
    /// ```
    /// outcome := err("Something went wrong.");
    /// assertThat(outcome.isErrAnd(fn(error) error == "Something went wrong."));
    /// ```
    public function isErrAnd(predicate: fn(value: E) -> Bool) -> Bool {
        this.isErr() and predicate(this.asErr())
    }
    /// Converts an `Outcome<T, E>` to a `Maybe<T>`.
    public function ok() -> ?T {
        if this.isOk() { some(this.unwrap()) } else { none() }
    }
    /// Converts an `Outcome<T, E>` to an `Outcome<U, E>` by applying a function.
    /// ### Usage
    /// ```
    /// okValue := ok(69);
    /// errValue := err("Error occurred.");
    /// 
    /// newOk := okValue.map(fn(value) value / 3);
    /// newErr := errValue.map(fn(value) value / 3);
    /// 
    /// assertThat(newOk == ok(23));
    /// assertThat(newErr == err("Error occurred."));
    /// ```
    public function map<U>(predicate: fn(former: T) -> U) -> Outcome<U, E> {
        ok(predicate(this?))
    }   

}

enum OutcomeType {
    Ok,
    Err
}

/// Returns an `Outcome` with a value.
/// ### Usage
/// ```
/// outcome := ok(9)
/// assertThat(outcome.isOk())
/// ```
public function ok<T, U>(value: T) -> Outcome<T, U> {
    // new Outcome(OutcomeVal.Ok(value))
    todo()
}

/// Returns an `Outcome` with an error.
/// ### Usage
/// ```
/// outcome := err("Something went wrong.");
/// assertThat(outcome.isErr())
/// ```
public function err<T, U>(error: U) -> Outcome<T, U> {
    // new Outcome(OutcomeVal.Err(errorValue))
    todo()
}