module tuple;

use orderedSet.OrderedSet;
use core.prelude.{some, Display, String};
use core.primitives.ops.Addition;

/// A simple ordered pair of items. Elements within a tuple can be of any type,
/// and the order in which they are defined is preserved.
/// 
/// ### Constructor Parameters.
/// - a : The first item in the pair.
/// - b : The second item in the pair.
public model Tuple<T, U> implements OrderedSet<T, U> {
    public var a: T;
    public var b: U;
    
    new(first: T, second: U) {
        this.a = first;
        this.b = second;
    }

    public function [OrderedSet.first]() -> ?T {
        return some(this.a);
    }
    public function [OrderedSet.second]() -> ?U {
        return some(this.b);
    }

    /// Returns a new tuple with the position of the two items in the tuple reversed.
    /// ### Usage
    /// ```
    /// use core.collections.Tuple;
    /// 
    /// tuple := new Tuple(true, "story");
    /// swapped := tuple.swap();
    /// assertThat(swapped == new Tuple("story", true));
    /// ```
    public function swap() -> Tuple<U, T> {
        new Tuple(this.b, this.a)
    }
    /// Concatenates the elements of the pair into one.
    /// ### Usage
    /// ```
    /// tuple := pair("John ", "Doe");
    /// joined := Tuple.join(tuple);
    /// 
    /// assert(joined).equals("John Doe");
    /// ```
    public static function join
        <T implements Addition>
        (tuple: Tuple<T, T>)
        -> T 
    {
        tuple.a + tuple.b
    }
    /// Converts the tuple to a string, provided that its elements implement
    /// Display.
    /// ### Usage
    /// ```
    /// tuple := Pair("hello", 123);
    /// str := Tuple.toStr(tuple);
    /// 
    /// assert(str).equals("(hello, 123)");
    /// ```
    public static function toStr
        <T implements Display, U implements Display>
        (tuple: Tuple<T, U>)
        -> String 
    {
        str := "(";
        str.append(tuple.a.toStr());
        str.append(", ");
        str.append(tuple.b.toStr());
        str.append(")")
        return str;
    }
}

/// Takes two arguments of any type and returns a `Tuple` containing them.
/// 
/// It is useful for grouping related data or for passing multiple values 
/// as a single unit.
/// 
/// ### Usage
/// ```
/// pair1 := pair(1, "apple");
/// pair2 := pair(true, [1, 2, 3]);
/// 
/// // Accessing elements of the tuple.
/// first := pair1.a; 
/// assert(first).equals(1);
/// 
/// second := pair1.b;
/// assert(second).equals("apple");
/// ```
public function pair<T, U>(a: T, b: U) -> Tuple<T, U> {
    return new Tuple(a, b);
}