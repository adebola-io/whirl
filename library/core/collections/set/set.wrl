module set;

use core.{
    bool.Bool,
    iterate.{AsIterator, Iteratable},
    interfaces.Clonable,
    numeric.Int32,
    sentinels.todo,
    string.{Display, String}
};
use super.{Hash, HashMap};


public model SetIterator<T> implements Iteratable<T> {
    public function [Iteratable.next]() -> ?T {
        todo()
    }
}

/// An unordered data structure that stores a collection 
/// of unique elements, akin to the mathematical concept of a set.
public model Set<T implements Hash> 
    implements AsIterator<T, SetIterator<T>> 
    + Clonable|=(T implements Clonable)
    + Display|=(T implements Display)
    + Hash
{
    var items: HashMap<T, Bool>;
    new(data?: []T) {
        // dataVal := data.unwrapOrDefault();
        this.items = new HashMap();
        // for element in dataVal {
        //     this.items.set(element, true);
        // }
    }

    public function [AsIterator.iter]() -> SetIterator<T> {
        todo()
    }
    public function [Clonable.clone]|=(T implements Clonable)() -> This {
        todo()
    }
    public function [Display.toStr]|=(T implements Display)() -> String {
        str := "Set { ";
        // for { a as idx, b as tuple } in this.items.iter().enumerate() {
        //     var { a as item } = tuple;
        //     str += item.toStr();
        //     if idx + 1 != this.items.length() {
        //         str += ", "
        //     }
        // }
        // str += " }";
        str
    }
    /// Adds an element to the set.
    /// 
    /// ### Usage
    /// ```
    /// use core.collections.Set;
    /// 
    /// set := new Set();
    /// set.add("hello");
    /// 
    /// assertThat();
    /// ```
    public function add(element: T) {
        this.items.set(element, true);
    }
    /// Checks if an element is contained within the current set.
    public function has(element: T) -> Bool {
        this.items.get(element).isSome()
    }
    /// Returns true if the set has no elements.
    public function isEmpty() -> Bool {
        this.items.length() == 0
    }
    /// Removes an element from the set. 
    /// If the element is not in the set, then nothing happens.
    /// ### Usage
    /// ```
    /// use core.collections.Set;
    /// set = new Set();
    /// 
    /// set.add(1);
    /// set.add(2);
    /// set.remove(1);
    /// 
    /// assertThat(!set.has(1));
    /// ```
    public function remove(element: T) {
        this.items.remove(element);
    }
    /// Returns true if the current set contains the exact same 
    /// elements as the other.
    public function equals(other: This) -> Bool {
        for { a as element } in this.items {
            if !other.has(element) {
                return false;
            }
        }
        return true;
    }
    /// Returns a new set consisting of the elements from the current
    /// set that are not in another set.
    public function difference(other: This) -> This {
        difference := new Set();
        for { a as element } in this.items {
            if !other.has(element) {
                difference.add(element);
            }
        }
        return difference;
    }
    /// Returns true if the current set has no elements in common with 
    /// another set.
    public function isDisjointFrom(other: This) -> Bool {
        this.intersection(other).isEmpty()
    }
    /// Generates a union set by combining the elements of the 
    /// current set with the elements of another set.
    /// ### Usage
    /// ```
    /// use core.collections.Set;
    /// 
    /// setA := new Set([1, 2, 3, 4]);
    /// setB := new Set([3, 4, 5, 6]);
    /// 
    /// union := setA.union(setB);
    /// 
    /// assertThat(union.equals(new Set([1, 2, 3, 4, 5, 6])));
    /// ```
    public function union(other: This) -> This {
        unionSet := new Set();
        this.items
            .iter()
            .chain(other.items.iter())
            .forEach(fn (item) unionSet.add(item.a));
        return unionSet;
    }
    /// Generates an intersection set by selecting the common elements
    /// between the current set and another set.
    /// ### Usage
    /// ```
    /// use core.collections.Set;
    /// 
    /// setA := new Set([1, 2, 3, 4]);
    /// setB := new Set([3, 4, 5, 6]);
    /// 
    /// union := setA.intersection(setB);
    /// 
    /// assertThat(union.equals(new Set([3, 4])));
    /// ```
    public function intersection(other: This) -> This {
        unionSet := this;
        for { a as element} in other.items {
            if !other.has(element) {
                unionSet.remove(element)
            }
        }
        return unionSet;
    }
    /// Returns the count of elements in the set.
    /// ### Usage
    /// ```
    /// use core.collections.Set;
    /// 
    /// set := new Set([1, 2, 8, 9]);
    /// 
    /// assert(set.cardinality()).equals(4);
    /// ```
    public function cardinality() -> Int32 {
        this.items.length()
    }
    /// Returns the number of elements in the set.
    /// ### Usage
    /// ```
    /// ```
    public function length() -> Int32 {
        this.items.length()
    }
    /// Returns the power set of the current set, i.e.
    /// the set of all possible subsets.
    public function powerSet() -> Set<Set<T>> {
        todo()
    }
    /// Returns true if the current set can be found within
    /// another.
    /// ### Usage
    /// ```
    /// use core.collections.Set;
    /// 
    /// setA := new Set([1, 2, 3, 4, 5]);
    /// setB := new Set([2, 3, 5]);
    /// 
    /// assertThat(setB.isSubsetOf(setA));
    /// ```
    public function isSubsetOf(other: This) -> Bool {
        for { a as element } in this.items {
            if !other.has(element) {
                return false;
            }
        }
        return true;
    }
    /// Returns true if the current set contains all the elements
    /// from another.
    /// ### Usage
    /// ```
    /// use core.collections.Set;
    /// 
    /// setA := new Set([1, 2, 3, 4, 5]);
    /// setB := new Set([2, 3, 5]);
    /// 
    /// assertThat(setA.isSupersetOf(setB));
    /// ```
    public function isSupersetOf(other: This) -> Bool {
        other.isSubsetOf(this)
    }
}
