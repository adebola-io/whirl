module quintuple;

use core.maybe.some;
use core.interfaces.Clonable;
use core.string.{Display, String};
use core.sentinels.todo;
use ntuple.NTuple;


/// A set containing five individual items.
public model Quintuple<T, U, V, W, X> 
    implements Clonable|=(
            T implements Clonable
            and U implements Clonable
            and V implements Clonable
            and W implements Clonable
            and X implements Clonable
        ) + Display|=(
            T implements Display
            and U implements Display 
            and V implements Display
            and W implements Display
            and X implements Display
        ) + NTuple<T, U, V, W, X>
{
    public var a: T;
    public var b: U;
    public var c: V;
    public var d: W;
    public var e: X;

    new(first: T, second: U, third: V, fourth: W, fifth: X) {
        this.a = first;
        this.b = second;
        this.c = third;
        this.d = fourth;
        this.e = fifth;
    }

    public function [Clonable.clone]|=(
            T implements Clonable
            and U implements Clonable
            and V implements Clonable
            and W implements Clonable
            and X implements Clonable
        )() -> This 
    {
        todo()
        // return new Quintuple(
        //     this.a.clone(),
        //     this.b.clone(),
        //     this.c.clone(),
        //     this.d.clone(),
        //     this.e.clone()
        // );
    }

    public function [Display.toStr]|=(
            T implements Display 
            and U implements Display
            and V implements Display
            and W implements Display
            and X implements Display
        )() -> String
    {
        todo()
        // return fmt("Quintuple(%, %, %, %, %)")
        //     .add(this.a.toStr())
        //     .add(this.b.toStr())
        //     .add(this.c.toStr())
        //     .add(this.d.toStr())
        //     .add(this.e.toStr())
        //     .finish();
    }

    public function [NTuple.first]() -> ?T {
        return some(this.a);
    }
    public function [NTuple.second]() -> ?U {
        return some(this.b);
    }
    public function [NTuple.third]() -> ?V {
        return some(this.c);
    }
    public function [NTuple.fourth]() -> ?W {
        return some(this.d);
    }
    public function [NTuple.fifth]() -> ?X {
        return some(this.e);
    }
}