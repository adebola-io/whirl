module sort

use core.ops.Orderable
use core.numeric.Int32
use core.math.floor

/// Performs an in-place Quicksort on the given array. 
/// ### Usage
/// ```
/// use core.collections.quickSort
/// 
/// var arr = [5, 6, 7, 8, 2]
/// quickSort(arr)
/// assert(arr).equals([2, 5, 6, 7, 8])
/// ```
public function quickSort<T implements Orderable>(array: []T) {
    quickSortInner(array, 0, array.length() - 1)   
}

function quickSortInner<T implements Orderable>(arr: []T, left: Int32, right: Int32) {
    if left >= right { 
        return
    } 
    var pivot = arr[floor((left + right) / 2)]
    var i = left
    var j = right
    while i <= j {
        while arr[i] < pivot { i += 1 }
        while arr[j] > pivot { j -= 1 }
        if i <= j {
            var temp = arr[j]
            arr[j] = arr[i]
            arr[i] = temp
            i += 1
            j -= 1
        }
    }
    quickSortInner(arr, left, j)
    quickSortInner(arr, i, right)
}

/// Implementation of the MergeSort algorithm in Whirlwind.
public function mergeSort<T implements Orderable>(array: []T) {
    core.sentinels.todo()
}

/// Performs an merging sort on a given array. 
/// ### Usage
/// ```
/// use core.collections.quickSort
/// 
/// var arr = [5, 6, 7, 8, 2]
/// quickSort(arr)
/// assert(arr).equals([2, 5, 6, 7, 8])
/// ```
function mergeArrays<T implements Orderable>(leftArray: []T, rightArray: []T) -> []T {
    var array = []
    while leftArray.length() > 0 && rightArray.length() > 0 {
        if leftArray[0] < rightArray[0] {
            array.push(leftArray.shift()!)
        } else {
            array.push(rightArray.shift()!)
        }
    }
    return array + leftArray + rightArray
}