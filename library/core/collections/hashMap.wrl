module hashMap;

use core.{
    sentinels.todo,
    interfaces.Default, 
    iterate.{AsIterator, Iteratable},
    numeric.Int32,
};
use ntuple.Tuple;

public interface Hash {}

/// An interface to be implemented by models that can be transformed into
/// a hashmap of sorts.
public interface ToMap<K implements Hash, V> {
    public function toMap() -> HashMap<K, V>;
}

public model HashMap<K implements Hash, V> 
    implements AsIterator<Tuple<K, V>, HashMapIteratable<K, V>> 
    + Default
{
    new(){}

    public function [AsIterator.iter]() -> HashMapIteratable<K, V> {
        return HashMapIteratable(this);
    }
    static function [Default.init]() -> This {
        return HashMap();
    }
    /// Inserts a key-value pair into the hashmap.
    /// 
    /// If the key is already present in the map, then it will be replaced.
    /// ### Usage
    /// ```
    /// ```
    public function set(key: K, value: V) -> V {
        todo()
    }
    /// Retrieves a value from the hashmap.
    /// ### Usage
    /// ```
    /// ```
    public function get(key: K) -> ?V {
        todo()
    }
    /// Removes a key-value pair from the hashmap.
    /// ### Usage
    /// ```
    /// ```
    public function remove(key: K) -> ?V {
        todo()
    }
    /// Returns the number of elements in the map.
    public function length() -> Int32 {
        todo()
    }
}

public model HashMapIteratable<K implements Hash, V> implements Iteratable<Tuple<K, V>> {
    var _map: HashMap<K, V>;

    new(map: HashMap<K, V>) {
        this._map = map;
    }

    public function [Iteratable.next]() -> ?Tuple<K, V> {
        todo()
    }
}
