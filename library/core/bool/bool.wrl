/// Contains the primitive `Bool` model for representing
/// boolean values.
module bool;

use core.{
    maybe.{some, none},
    interfaces.{Clonable, Default},
    string.{Display, FromStr, String}
};

/// A representation of boolean values, `true` or `false`.
public model Bool 
    implements Display 
    + Default 
    + Clonable 
    + FromStr 
{
    public function [Clonable.clone]() -> This {
        return this; // boolean values are copied by default.
    }

    static function [Default.init]() -> This {
        return false;
    }

    public function [Display.toStr]() -> String {
        if this { "true" } else "false"
    }

    public static function [FromStr.fromStr](string: String) -> ?This {
        if string == "true" { some(true) } 
        else if string == "false" { some(false) }
        else none()
    }
    /// Creates a `Maybe<T>` based on the value.
    /// ### Usage
    /// ```
    /// operationSuccessful := true;
    /// message := fn "Operation successful!";
    /// 
    /// optionalMessage := operationSuccessful.ifTrue(message);
    /// 
    /// assertThat(optionalMessage.isSome());
    /// ```
    public function ifTrue<T>(consequent: fn() -> T) -> ?T {
        if this { some(consequent()) } else { none() }
    }
}