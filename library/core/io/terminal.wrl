module terminal;

use core.prelude.{Display, Maybe, some};
use core.primitives.{String, UInt8};
use core.internals.builtin;
use core.process.sentinels.todo;


/// Prints a message or an object to the console, terminal 
/// or any predefined output interface.
public function print<T implements Display>(data: T) {
    dataStr := data.toStr();
    builtin.print(dataStr);
}

/// Displays an optional message to the console, terminal or
/// any predefined input interface, prompting the user to enter
/// text.
public function prompt(message?: String) -> String {
    todo()
}

/// Prints a message or an object to the console, terminal, 
/// or any predefined output interface.
public function printFmt<T implements Display>(data: T) {
    dataStr := data.toFmtStr();
    builtin.print(dataStr)
}

/// A string intended for display on a terminal, 
/// that may have custom colors and styles applied to it.
/// ### Constructor Arguments.
/// - @param (text?: String) The string to display.
public model TerminalString implements Display {
    public var text: String;
    var codes: []UInt8;

    new(text?: String) {
        this.text = Maybe.unwrapOrDefault(text);
        this.codes = [];
    }

    /// Changes the color of the terminal text to blue.
    public function blue() -> This {
        todo()
    }

    ///
    public function red() -> This {
        todo()
    }

    public function [Display.toStr]() -> String {
        todo()
    }

    public static function from<T implements Display>(value: T) -> This {
        text := value.toStr();
        new TerminalString(some(text))
    }
}