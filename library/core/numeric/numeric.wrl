module numeric;

use core.{
    bool.Bool,
    interfaces.{Default, Clonable},
    ops.{
        Addition, Sequenced, Subtraction, 
        Multiplication, Division, Orderable,
        Bitwise
    },
    string.{Display, FromStr},
};

/// An 32-bit integer.
public model Int32 
    implements Display 
        + Addition 
        + Subtraction
        + Multiplication
        + Division
        + Bitwise
        + Sequenced 
        + Default 
        + Orderable 
        + FromStr
        + Clonable
{
    /// Returns true if the value is less than 0.
    /// ### Usage
    /// ```
    /// x := -1;
    /// assertThat(x.isNegative());
    /// ```
    public function isNegative() -> Bool {
        this < 0
    }
    // Compiler built in.
}

public model Int64
    implements Display 
        + Addition 
        + Subtraction
        + Multiplication
        + Division
        + Bitwise
        + Sequenced 
        + Default 
        + Orderable 
        + FromStr
        + Clonable
{
    /// Returns true if the value is less than 0.
    /// ### Usage
    /// ```
    /// x := -1;
    /// assertThat(x.isNegative());
    /// ```
    public function isNegative() -> Bool {
        this < 0
    }
    // Compiler built-in.
}

/// A 32-bit floating number.
public model Float32
    implements Display 
    + Addition
    + Subtraction
    + Multiplication
    + Division 
    + Default 
    + Orderable 
    + FromStr
{
    // Compiler built in.
}


/// A 64-bit floating number.
public model Float64 
    implements Display 
    + Addition
    + Subtraction
    + Multiplication
    + Division 
    + Default 
    + Orderable 
    + FromStr
{
    // Compiler built in.
}

/// A union data type to represent a number.
public type Number = Int32 | Float64;
