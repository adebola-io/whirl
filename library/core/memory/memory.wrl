module memory;

use core.{
    primitives.{UInt8, UnsignedInt},
    prelude.{
        Guaranteed, Iteratable, none, some, Display, 
        String, todo,
    },
    internals.builtin,
};

/// Swaps the address of two values.
/// # Usage
/// ```
/// use core.memory.wwap;
/// 
/// a := 9;
/// b := 12;
/// swap(a, b);
/// 
/// assert(a).equals(12);
/// assert(b).equals(9);
/// ```
public function swap<T>(a: T, b: T) {
    builtin.swap(a, b)
}

/// An intrinsic model that provides a way to hold a weak reference to a value of type `T`.
/// 
/// Unlike regular references, weak references don't prevent the underlying
/// value from being dropped by the runtime. This means that if the 
/// object is no longer reachable through other strong references, it will
/// be cleared and the WeakRef will point to empty memory.
/// 
/// It is useful for circumventing Whirlwind's disallowance for
/// circular references, while still preventing memory leaks.
public model WeakRef<T> implements Guaranteed<T> {

    /// Implementation of the Guaranteed interface.
    function [Guaranteed.guarantee]() -> T {
        this.unwrap()
    }

    /// Forcefully retrieves the value in the reference.
    /// 
    /// It is useful when there is a surety that the value
    /// contained has not been dropped by the runtime.
    public function unwrap() -> T {
        this.deref().unwrap()
    }    

    /// Retrieves the value in the reference.
    public function deref() -> ?T {
        return builtin.deref(this);
    }

    /// Creates a weak reference to an object.
    public static function to(value: T) -> This {
        builtin.weakref(value)
    }
}


public model Buffer implements Iteratable<UInt8> + Display {
    var values: []UInt8;
    var idx: UnsignedInt;

    new(values: []UInt8) {
        this.values = values;
        this.idx = 0;
    }

    public function [Iteratable.next]() -> ?UInt8 {
        if this.idx == this.values.length() {
            return none();
        };
        nextByte := this.values[this.idx];
        this.idx += 1;
        return some(nextByte);
    }

    public function [Display.toStr]() -> String {
        return todo();
    }
}

