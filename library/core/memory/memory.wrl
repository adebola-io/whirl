module memory;

use core.internals.builtin;
use core.numeric.Int32;
use core.sentinels.todo;
use core.interfaces.Clonable;

public use region.Region;
public use ref.WeakRef;

public model Ptr implements Clonable {
    public var offset: Int32;
    public var size: Int32;

    new(offset: Int32, size: Int32){
        this.offset = offset;
        this.size = size;
    }

    /// Returns a copy of the pointer.
    public function [Clonable.clone]() -> This {
        return new Ptr(this.offset, this.size);
    }

    /// Write a value into an address, starting
    /// at a particular offset.
    public static function write<T>(offset: Int32, value: T) {
        todo()
    }
    /// Reads a length of bytes from memory starting from an address.
    public static function read<T>(offset: Int32, len: Int32) -> T {
        todo()
    }
}
/// Returns a piece of data as a pointer.
public function asPtr() -> ?Ptr {
    todo()
}


/// Swaps the address of two values.
/// # Usage
/// ```
/// use core.memory.wwap;
/// 
/// a := 9;
/// b := 12;
/// swap(a, b);
/// 
/// assert(a).equals(12);
/// assert(b).equals(9);
/// ```
public function swap<T>(a: T, b: T) {
    builtin.swap(a, b)
}