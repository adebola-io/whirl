module memory

use core.bool.Bool
use core.internals.builtin
use core.numeric.Int32
use core.sentinels.todo

public use ref.WeakRef

/// Returns the address of an object instance in linear memory.
public function getOffset<T>(value: T) -> Int32 {
    todo()
}


/// Determines whether two variables point to the same location in memory
/// by comparing their pointer values.
/// 
/// This function is unlike regular equality with the `==` operator, which 
/// compares values by matching their bytes.
/// ### Usage
/// ```
/// use core.memory.same
/// arr1 := []
/// arr2 := arr1
/// 
/// assertThat(same(arr1, arr2))
/// assertThat(same(arr2, arr1))
/// ```
public function same<T>(left: T, right: T) -> Bool {
    todo()
}


/// Swaps the memory address of two values.
/// # Usage
/// ```
/// use core.memory.swap
/// 
/// a := [1, 2, 3]
/// b := [4, 5, 6]
/// swap(a, b)
/// 
/// assert(a).equals([4, 5, 6])
/// assert(b).equals([1, 2, 3])
/// ```
public function swap<T>(a: T, b: T) {
    builtin.swap(a, b)
}