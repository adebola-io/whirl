module json;

use core.prelude.{Bool, String, Number, none, some};
use core.process.sentinels.todo;
use core.collections.HashMap;

public use jsonParsing.JsonParseError;
public use jsonParsing.stringify;

/// An simple union type that abstracts over underlying JSON values.
public type RawJsonVal = 
    | JsonString 
    | JsonArray 
    | JsonBool 
    | JsonNumber 
    | JsonObject;

public enum JsonValueType {
    String,
    Array,
    Bool,
    Number,
    Object,
    Null
}

/// A unifying, general interface for any value in the JSON format.
public interface JsonValue {
    /// Returns the type of the JSON value.
    /// ### Usage
    /// ```
    /// use core.data.JsonString;
    /// 
    /// str := new JsonString();
    /// assert(str.getType()).equals(JsonValueType.String);
    /// ```
    public function getType() -> JsonValueType;
    /// Returns true if the JSON value is null.
    /// ### Usage
    /// ```
    /// use core.data.JsonNull;
    /// 
    /// null := new JsonNull();
    /// assertThat(null.isNull());
    /// ```
    public function isNull() -> Bool {
        return this.getType() == JsonValueType.Null;
    }
    /// Returns true if the JSON value is a string.
    /// ### Usage
    /// ```
    /// use core.data.JsonString;
    /// 
    /// str := new JsonString();
    /// assertThat(str.isString());
    /// ```
    public function isString() -> Bool {
        return this.getType() == JsonValueType.String;
    }
    /// Returns true if the JSON value is numeric.
    /// ### Usage
    /// ```
    /// use core.data.JsonNumber;
    /// 
    /// num := new JsonNumber(some(42));
    /// assertThat(num.isNumber());
    /// ```
    public function isNumber() -> Bool {
        return this.getType() == JsonValueType.Number;
    }
    /// Returns true if the JSON value is an array.
    /// ### Usage
    /// ```
    /// use core.data.JsonArray;
    /// 
    /// arr := new JsonArray();
    /// assertThat(arr.isArray());
    /// ```
    public function isArray() -> Bool {
        return this.getType() == JsonValueType.Array;
    }
    /// Masks the underlying value as a raw json value.
    public function asValue() -> RawJsonVal {
        if this.isString() { return new JsonString(this.asString()); };
        if this.isArray() { return new JsonArray(this.asArray()); };
        if this.isNumber() {return new JsonNumber(this.asNumber()); };
        todo()
    }
    /// Converts a JSON array to its underlying value.
    /// If the underlying value is not an array, the method returns `None()`.
    /// ### Usage
    /// ```
    /// use core.data.{JsonArray, JsonString};
    /// 
    /// arr := new JsonArray();
    /// Assert(arr.asArray()).equals(some([]));
    /// 
    /// str := new JsonString();
    /// assert(str.asArray()).equals(none());
    /// ```
    public function asArray() -> ?[]RawJsonVal {
        return none();
    }
    /// Converts a JSON string to its underlying value.
    /// If the underlying value is not a string, the method return `None()`.
    /// ### Usage
    /// ```
    /// use core.data.{JsonString, JsonBool};
    /// 
    /// str := new JsonString();
    /// assert(str.asString()).equals(some(""));
    /// 
    /// bool := new JsonBool(some(true));
    /// assert(str.asString()).equals(none());
    /// ```
    public function asString() -> ?String {
        return none();
    }
    /// Converts a JSON boolean to its underlying value.
    public function asBool() -> ?Bool {
        return none();
    }
    /// Converts a JSON number to its underlying value.
    public function asNumber() -> ?Number {
        return none();
    }
    /// Converts a JSON object to its underlying value.
    public function asObject() -> ?HashMap<String, RawJsonVal> {
        return none();
    }
}

/// A string value that adheres to the JSON data format.
public model JsonString implements JsonValue {
    public var value: String;
    new(value?: String) {
        this.value = value.unwrapOr("");
    }
    public function [JsonValue.getType]() -> JsonValueType {
        return JsonValueType.String;
    }
    public function [JsonValue.asString]() -> ?String {
        return some(this.value);
    }
}

/// An ordered collection of values in the JSON format.
public model JsonArray implements JsonValue {
    public var value: []RawJsonVal;
    new(value?: []RawJsonVal) {
        this.value = value.unwrapOr([]);
    }
    public function [JsonValue.getType]() -> JsonValueType {
        return JsonValueType.Array;
    }
    public function [JsonValue.asArray]() -> ?[]RawJsonVal {
        return some(this.value);
    }
}

/// A boolean value in the JSON format.
public model JsonBool implements JsonValue {
    public var value: Bool;
    new(value?: Bool) {
        this.value = value.unwrapOr(false);
    }
    public function [JsonValue.getType]() -> JsonValueType {
        return JsonValueType.Bool;
    }
    public function [JsonValue.asBool]() -> ?Bool {
        return some(this.value);
    }
}

/// A numeric value in the JSON format.
public model JsonNumber implements JsonValue {
    public var value: Number;
    new(value?: Number) {
        this.value = value.unwrapOr(0);
    }
    public function [JsonValue.getType]() -> JsonValueType {
        return JsonValueType.Number;
    }
    public function [JsonValue.asNumber]() -> ?Number {
        return some(this.value);
    }
}

/// An object in the JSON format.
public model JsonObject implements JsonValue {
    public var map: HashMap<String, RawJsonVal>;
    new(map?: HashMap<String, RawJsonVal>) {
        this.map = map.unwrapOr(new HashMap());
    }
    public function [JsonValue.getType]() -> JsonValueType {
        return JsonValueType.Object;
    }
    public function [JsonValue.asObject]() -> ?HashMap<String, RawJsonVal> {
        return some(this.map);
    }      
}