module never;

/// ### The Never Type
/// `never` is a type representing the set of values that _cannot_ occur.
/// 
/// Examples of never types are:
/// - the return value of a function that exits the program,
/// - the type of an exception that crashes sequence execution, or
/// - self referential infinitely recursive types (e.g. `type T = T;`).
/// 
/// The exact definition is that it is the type of a value that cannot be
/// modelled by the type system. For example, the bridge between builtin
/// methods and the runtime returns a type of never. The null pointer
/// stub has a type of never. Generic values have their types
/// coerced to never if they are returned before being resolved.
/// 
/// Because it is a placeholder for something conceptual, _the `never` type is assignable to
/// all types, including itself._ This makes it useful for writing unfinished code that
/// compiles because it satisfies the typechecker.
/// 
/// This means that the following are all semantically valid;
/// <!--#ignore-->
/// ```
/// function blackHole() -> never {
///     core.process.exit(1) // Exits the program and never returns.
/// }
/// num: Int32 := blackHole(); // valid.
/// str: String := blackHole(); // valid.
/// 
/// function produceValue() -> String {
///     return blackHole(); // valid.
/// }
/// ```
/// However, due to its abstract nature, _no other type is assignable to `never`, except itself._
/// This means that the following statements will produce errors.
/// <!--#ignore-->
/// ```
/// neverNum: never := 0; // will not compile.
/// type Recursive = Recursive;
/// neverBool: Recursive = true; // will not compile.
/// 
/// function outsideReality() -> never {
///     return "Hello, world"; // will not compile.
/// }
/// ```
/// As a matter of fact, `never` types are preemptively disallowed in variable type labels.
/// They are only allowed in return types for functions.
public type never = never;
