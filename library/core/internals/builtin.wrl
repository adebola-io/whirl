module builtin

use core.{
    array.Array, 
    bool.Bool, 
    concurrent.{Prospect, Eventual, Sequence},
    maybe.some,
    memory.WeakRef,
    numeric.Int32,
    ops.Range, 
    outcome.Outcome, 
    string.String, 
}
use injunction.{InjunctionType, Injunction, invoke}
use never.never

/// The native injunction in Whirlwind.
public model BuiltIn implements Injunction {
    var injunctionType: InjunctionType

    new(injunctionType: InjunctionType) {
        this.injunctionType = injunctionType
    }

    public function [Injunction.getType] -> InjunctionType {
        return this.injunctionType
    }
}


function builtin(_type: InjunctionType) -> BuiltIn {
    return BuiltIn(_type)
}

public model arrays<T> {

    public static function at(array: Array<T>, index: Int32) -> ?T {
        invoke(builtin(InjunctionType.ArrayAt), some(array), some(index))
    }
    public static function contains(array: Array<T>, value: T) -> Bool {
        invoke(builtin(InjunctionType.ArrayContains), some(array), some(value))
    }

    public static function clear(array: Array<T>) {
        invoke(builtin(InjunctionType.ArrayClear), some(array))
    }

    public static function includes(array: Array<T>, subarray: Array<T>) -> Bool {
        invoke(builtin(InjunctionType.ArrayIncludes), some(array), some(subarray))
    }

    public static function indexOf(array: Array<T>, value: T) -> ?Int32 {
        invoke(builtin(InjunctionType.ArrayIndexOf), some(array), some(value))
    }

    public static function insert(array: Array<T>, index: Int32, value: T) {
        invoke(builtin(InjunctionType.ArrayInsert), some(array), some(index), some(value))
    }

    public static function prepend(array: Array<T>, prefix: []T) {
        invoke(builtin(InjunctionType.ArrayPrepend), some(array), some(prefix))
    }

    public static function penultimate(array: Array<T>) -> ?T {
        invoke(builtin(InjunctionType.ArrayPenultimate), some(array))
    }

    public static function partition(array: Array<T>, check: fn(item: T) -> Bool) -> [][]T {
        invoke(builtin(InjunctionType.ArrPartition), some(check))
    }

    public static function length(array: Array<T>) -> Int32 {
        invoke(builtin(InjunctionType.ArrLen), some(array))
    }

    public static function push(array: Array<T>, value: T) {
        invoke(builtin(InjunctionType.ArrayPush), some(array), some(value))
    }

    public static function pop(array: Array<T>) -> ?T {
        invoke(builtin(InjunctionType.ArrayPop), some(array))
    }
}

public model eventual<T> {
    public static function create(prospect: Prospect<T>) -> Eventual<T> {
        invoke(builtin(InjunctionType.EventualCreate), some(prospect))
    }

    public static function abort(eventual: Eventual<T>) {
        invoke(builtin(InjunctionType.EventualAbort), some(eventual))
    }
    
    public static function await(eventual: Eventual<T>) -> T {
        invoke(builtin(InjunctionType.EventualAwait), some(eventual))
    }
}

public model maybe<T> {
    public static function none -> ?T {
        invoke(builtin(InjunctionType.MaybeNone))
    }

    public static function some(value: T) -> ?T {
        invoke(builtin(InjunctionType.MaybeSome), some(value))
    }
}

public model outcome<T, U> {
    public static function unwrap(outcome: Outcome<T, U>) -> T {
        invoke(builtin(InjunctionType.OutcomeUnwrap), some(outcome))
    }

    public static function unwrapError(outcome: Outcome<T, U>) -> U {
        invoke(builtin(InjunctionType.OutcomeUnwrapError), some(outcome))
    }
}

public model sequence {
    public static function sequenceId(sequence: Sequence) -> Int32 {
        invoke(builtin(InjunctionType.SequenceId), some(sequence))
    }

    public static function crashOneStep(message: String) -> never {
        invoke(builtin(InjunctionType.SequenceCrashOneStep), some(message))
    }

    public static function crash(message?: String) -> never {
        invoke(builtin(InjunctionType.SequenceCrash), some(message))
    }

    public static function cwd -> String {
        invoke(builtin(InjunctionType.SequenceCwd))
    }
}

public model strings {
    public static function concat(left: String, right: String) -> String {
        invoke(builtin(InjunctionType.StringConcat))
    }
    public static function capitalCase(string: String) -> String {
        invoke(builtin(InjunctionType.StringCapitalCase), some(string))
    }
    
    public static function isAlphanumeric(string: String) -> Bool {
        invoke(builtin(InjunctionType.StringIsAlphanumeric), some(string))
    }

    public static function lowerCase(string: String) -> String {
        invoke(builtin(InjunctionType.StringLowercase), some(string))
    }

    public static function pad(string: String, count: Int32) -> String {
        invoke(builtin(InjunctionType.StringPad), some(string), some(count))
    }

    public static function padLeft(string: String, count: Int32) -> String {
        invoke(builtin(InjunctionType.StringPadLeft), some(string), some(count))
    }

    public static function padRight(string: String, count: Int32) -> String {
        invoke(builtin(InjunctionType.StringPadRight), some(string), some(count))
    }

    public static function replace(string: String, subStr: String, newStr: String) -> String {
        invoke(builtin(InjunctionType.StringReplace), some(string), some(subStr), some(newStr))
    }

    public static function slice(string: String, bounds: Range<Int32>) -> ?String {
        invoke(builtin(InjunctionType.StringSlice), some(string), some(bounds))
    }

    public static function split(string: String, delim: String) -> []String {
        invoke(builtin(InjunctionType.StringSplit), some(string), some(delim))
    }

    public static function splitAt(string: String, predicate: fn(pattern: String) -> Bool) -> []String {
        invoke(builtin(InjunctionType.StringSplitAt), some(string), some(predicate))
    }

    public static function sentenceCase(string: String) -> String {
        invoke(builtin(InjunctionType.StringSentenceCase), some(string))
    }

    public static function trim(string: String) -> String {
        invoke(builtin(InjunctionType.StringTrim), some(string))
    }

    public static function trimStart(string: String) -> String {
        invoke(builtin(InjunctionType.StringTrimStart), some(string))
    }

    public static function trimEnd(string: String) -> String {
        invoke(builtin(InjunctionType.StringTrimEnd), some(string))
    }

    public static function upperCase(string: String) -> String {
        invoke(builtin(InjunctionType.StringUpperCase), some(string))
    }
}

public function swap<T>(a: T, b: T) {
    invoke(builtin(InjunctionType.Swap), some(a), some(b))
}

public function weakref<T>(value: T) -> WeakRef<T> {
    invoke(builtin(InjunctionType.Ref), some(value))
}

public function deref<T>(value: WeakRef<T>) -> ?T {
    invoke(builtin(InjunctionType.Deref), some(value))
}

public function exit(code?: Int32) -> never {
    invoke(builtin(InjunctionType.SequenceExit), some(code))
}