use Core.Internals.{NULL, IsNull};
use Core.Process.Panic;

/// Creates a `Maybe` with no value.
public function None<T>(): Maybe<T> {
    new Maybe(NULL)
}

/// Creates a `Maybe` with an internal value.
public function Some<T>(value: T): Maybe<T> {
    new Maybe(value)
}

/// A value that may or may not exist.
public class Maybe<T> {
    value: T;

    new(value: T) {
        this.value = value;
    }

    /// Returns a boolean indicating if the Maybe contains no value.
    IsNone(): Boolean {
        IsNull(this.value)
    }

    /// Returns a boolean indicating whether there is a value contained or not.
    IsSome(): Boolean {
        !IsNull(this.value)
    }

    Unwrap(): T {
        if this.IsNone() {
            Panic(new Error("Called Unwrap on a None Value"))
        } else { 
            this.value 
        }
    }

    UnwrapOr(value: T): T {
        if this.IsNone() { value } else { this.value }
    }
}


trait PartialEq<T> {
    Equals: fn(other: T): Boolean;
}

class EmployeeList implements PartialEq<This> {
    items: ArrayOf<Employee>;

    new() {
        this.items = [];
    }

    [PartialEq.Equals](other: This): Boolean {
        this.items == other.items
    }
}

