///! This module is auto generated.
use super::Opcode;

/// The formatting spacing between opcode and operands for the disassembler output.
pub const DISASSEMBLER_SPACING: usize = 20;

impl From<Opcode> for u8 {
    fn from(value: Opcode) -> Self {
        match value {
            Opcode::LoadInt8 => 0,
            Opcode::LoadInt16 => 1,
            Opcode::LoadFloat32 => 2,
            Opcode::LoadFloat64 => 3,
            Opcode::LoadBool => 4,
            Opcode::LoadFunctionPtr => 5,
            Opcode::MoveInt8 => 6,
            Opcode::MoveInt16 => 7,
            Opcode::MoveFloat32 => 8,
            Opcode::MoveFloat64 => 9,
            Opcode::MoveBool => 10,
            Opcode::MoveAddr => 11,
            Opcode::MoveEther => 12,
            Opcode::StoreInt8 => 13,
            Opcode::StoreInt16 => 14,
            Opcode::StoreFloat32 => 15,
            Opcode::StoreFloat64 => 16,
            Opcode::StoreBool => 17,
            Opcode::StoreFunctionPtr => 18,
            Opcode::StoreAddr => 19,
            Opcode::RetrieveInt8 => 20,
            Opcode::RetrieveInt16 => 21,
            Opcode::RetrieveFloat32 => 22,
            Opcode::RetrieveFloat64 => 23,
            Opcode::RetrieveBool => 24,
            Opcode::RetrieveFunctionPtr => 25,
            Opcode::RetrieveAddr => 26,
            Opcode::MovRetVal => 27,
            Opcode::Add => 28,
            Opcode::Sub => 29,
            Opcode::Mul => 30,
            Opcode::Div => 31,
            Opcode::Mod => 32,
            Opcode::RightShift => 33,
            Opcode::LeftShift => 34,
            Opcode::EqInt8 => 35,
            Opcode::EqInt16 => 36,
            Opcode::EqFloat32 => 37,
            Opcode::EqFloat64 => 38,
            Opcode::EqBool => 39,
            Opcode::EqFunctionPtr => 40,
            Opcode::EqAddr => 41,
            Opcode::Negate => 42,
            Opcode::JumpIfTrue => 43,
            Opcode::JumpConditional => 44,
            Opcode::LoopFor => 45,
            Opcode::Stall => 46,
            Opcode::BreakLoop => 47,
            Opcode::Goto => 48,
            Opcode::Call => 49,
            Opcode::Return => 50,
            Opcode::NewInstanceValueA => 51,
            Opcode::StoreValueAToFrame => 52,
            Opcode::NewInstanceValueB => 53,
            Opcode::NewArrayAddrA => 54,
            Opcode::NewArrayAddrE => 55,
            Opcode::GetPropertyOffset => 56,
            Opcode::MoveToRet => 57,
            Opcode::SpawnSeq => 58,
            Opcode::SyncSeq => 59,
            Opcode::HaltSeq => 60,
            Opcode::Invoke => 61,
            Opcode::Exit => 62,
        }
    }
}

impl From<u8> for Opcode {
    fn from(value: u8) -> Self {
        match value {
            0 => Self::LoadInt8,
            1 => Self::LoadInt16,
            2 => Self::LoadFloat32,
            3 => Self::LoadFloat64,
            4 => Self::LoadBool,
            5 => Self::LoadFunctionPtr,
            6 => Self::MoveInt8,
            7 => Self::MoveInt16,
            8 => Self::MoveFloat32,
            9 => Self::MoveFloat64,
            10 => Self::MoveBool,
            11 => Self::MoveAddr,
            12 => Self::MoveEther,
            13 => Self::StoreInt8,
            14 => Self::StoreInt16,
            15 => Self::StoreFloat32,
            16 => Self::StoreFloat64,
            17 => Self::StoreBool,
            18 => Self::StoreFunctionPtr,
            19 => Self::StoreAddr,
            20 => Self::RetrieveInt8,
            21 => Self::RetrieveInt16,
            22 => Self::RetrieveFloat32,
            23 => Self::RetrieveFloat64,
            24 => Self::RetrieveBool,
            25 => Self::RetrieveFunctionPtr,
            26 => Self::RetrieveAddr,
            27 => Self::MovRetVal,
            28 => Self::Add,
            29 => Self::Sub,
            30 => Self::Mul,
            31 => Self::Div,
            32 => Self::Mod,
            33 => Self::RightShift,
            34 => Self::LeftShift,
            35 => Self::EqInt8,
            36 => Self::EqInt16,
            37 => Self::EqFloat32,
            38 => Self::EqFloat64,
            39 => Self::EqBool,
            40 => Self::EqFunctionPtr,
            41 => Self::EqAddr,
            42 => Self::Negate,
            43 => Self::JumpIfTrue,
            44 => Self::JumpConditional,
            45 => Self::LoopFor,
            46 => Self::Stall,
            47 => Self::BreakLoop,
            48 => Self::Goto,
            49 => Self::Call,
            50 => Self::Return,
            51 => Self::NewInstanceValueA,
            52 => Self::StoreValueAToFrame,
            53 => Self::NewInstanceValueB,
            54 => Self::NewArrayAddrA,
            55 => Self::NewArrayAddrE,
            56 => Self::GetPropertyOffset,
            57 => Self::MoveToRet,
            58 => Self::SpawnSeq,
            59 => Self::SyncSeq,
            60 => Self::HaltSeq,
            61 => Self::Invoke,
            62 => Self::Exit,

            _ => panic!("Undefined opcode conversion. No opcode maps to value {value}."),
        }
    }
}
