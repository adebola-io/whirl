module tangent;

use core.collections.HashMap;

type Style {
    var properties: HashMap<String, String>;

    public function display(value: String) -> This {
        return this;
    }
    public function justifyContent(value: String) -> This {
        return this;
    }
    public function alignItems(value: String) -> This {
        return this;
    }
    public function color(value: String) -> This {
        return this;
    }
    public function borderRadius(value: String) -> This {
        return this;
    }
    public function background(value: String) -> This {
        return this;
    }
    public function height(value: String) -> This {
        return this;
    }
    public function width(value: String) -> This {
        return this;
    }
    public function margin(value: String) -> This {
        return this;
    }
}

public type View {
    new(root: RootElement) {
        this.root = root;
    }
}

type Attributes {
    public function set(key: String, value: String) {
        todo();
    }
}



public interface Component {
    /// Returns the base element of the component.
    public function base() -> Element;
    
    /// Sets the id of the string.
    public function id(string: String) -> This {
        this.base().setAttribute("id", string);
        return this;
    }
    
    /// Sets the class of the string.
    public function class(string: String) -> This {
        this.base().setAttribute("class", string);
        return this;
    }

    public function append<T implements Component>(child: T) -> This {
        this.base().children().push(child);
        return this;
    }

    public function style(style: Style) -> This {
        return this;
    }
}

type Div implements Component {
    public function [Component.base]() -> Element {
        return this;
    }
}



