module region;

use core.{
    bool.Bool,
    interfaces.Clonable,
    numeric.Int32,
    outcome.Outcome,
    sentinels.todo
};
use ref.Ptr;

public enum RegionOperationError {
    OutOfMemory,
    AlreadyDestroyed,
}

/// ## Regions and Deterministic Memory Management.
/// A memory region is a defined scope for confining the lifetimes of allocated
/// data in a Whirlwind program.
///
/// Regions provide explicit control over memory allocation and deallocation within their
/// boundaries. Objects created in the scope of a region are considered local to that region
/// and automatically freed when the region is destroyed. This approach should simplify
/// memory management compared to manual creation and deletion of each individual item in memory.
/// 
/// Internally regions are stacked on top of each other, meaning that the newest created region
/// is the current region in use, and that regions can be nested within each other.
/// 
/// A region handle provides a list of methods for interacting directly with data within the region, 
/// such as:
/// - prematurely freeing data that is no longer in use,
/// - escaping data so that it can outlive the current region.
/// - fine grained allocation of memory blocks.
/// - capturing data from parent region scopes, etc.
/// 
/// A region handle is usually denoted ending with a dollar sign ($) to distinguish it
/// from other variable types.
public type RegionHandle {
    /// Tries to allocates a internal memory block with the specified size 
    /// inside of the memory region's arena. If the operation is successful, it returns 
    /// the offset of the block's start.
    /// 
    /// ### Usage
    /// ```
    /// ```
    public function alloc(size: Int32) -> Outcome<Int32, RegionOperationError> {
        todo()
    }
    /// Moves an object instance from the current region to a parent region,
    /// basically extending its lifetime, and ensuring that it is not deallocated when
    /// the current region is destroyed.
    /// ### Usage
    /// ```
    /// r$ := startregion();
    /// array := [1, 2, 3]; // Created in region r$.
    /// array = r$.escape(array)!;
    /// 
    /// endregion(r$);
    /// array[1]; // Still valid, because array is no longer owned by region r$.
    /// ```
    /// The method is recursive, meaning that escaping an object will also escape all
    /// its internal values and attributes, as well as other variables that point to the
    /// same data.
    /// ```
    /// r2$ := startregion();
    /// 
    /// name := "Michael"; // Created inside region r2$.
    /// nameList := [name]; // Created inside region r2$.
    /// 
    /// r2$.escape(nameList)!;
    /// endregion(r2$)
    /// 
    /// nameList; // Valid because nameList was escaped.
    /// name; // Valid because name is an item in nameList, inheriting its escaped state.
    /// ```
    /// **Note**: A region can only escape variables that are currently owned by it. If the
    /// variable is owned by another region, the operation fails with a RegionOperationError.
    public function escape<T>(instance: T) -> Outcome<T, RegionOperationError> {
        todo()
    }
    /// Moves the lifetime of an object instance into the current region. This means that whenever
    /// the region gets destroyed, the object instance will be destroyed along with it.
    /// ### Usage
    /// <!--ignore-->
    /// ```
    /// $parent := startregion();
    /// 
    /// str := new String();
    /// child$ := startregion();
    /// child$.capture(str);
    /// endregion(child$);
    /// 
    /// str; // Fails because the string was captured by child$, and child$ was destroyed.
    /// ```
    public function capture<T>(instance: T) -> T {
        maybePtr := Ptr.from(instance);
        if maybePtr.isNone() {
            // instance is most likely a primitive.
            // return it as is.
            return instance;
        }
        ptr := maybePtr!;
        todo()
    }
    /// Creates a clone of an object instance that is local to the current region.
    /// ### Usage
    /// ```
    /// 
    /// ```
    public function localize<T implements Clonable>(instance: T) -> T {
        return instance.clone();
    }
    /// Returns true if the lifetime of a given instance is bound to the scope
    /// of the current region.
    /// ### Usage
    /// ```
    /// r$ := startregion();
    /// 
    /// name := "Hello, world";
    /// endregion(r$)
    /// ```
    public function contains<T>(instance: T) -> Bool {
        todo()
    }
    /// Frees all memory in the region.
    public function clear() {
        todo()
    }
    /// Deallocates the memory in an instance of an object.
    public function free<T>(instance: T) {
        todo()
    }
    public function capacity() -> Int32 {
        todo()
    }
    public function grow(newCapacity: Int32) {
        todo()
    }
    public function shrinkToFit() {
        todo()
    }
    /// Scoping provides an easier way to encapsulate the lifetime of objects by creating a temporary region 
    /// for the execution of a function.
    /// 
    /// ### Usage
    /// <!--ignore-->
    /// ```
    /// // Approach One:
    /// r$ := startregion();
    /// performComputation(); // creates data in region r.
    /// endregion(r$)
    /// 
    /// // Approach Two:
    /// Region.scope(performComputation);
    /// ```
    /// The above snippets are equivalent, but the scope is easier to reason about, because region destruction
    /// happens automatically.
    public static function scope<T>(executor: fn -> T) -> T {
        r$ := startregion();
        value := executor();
        r$.escape(value);
        endregion(r$)
        return value;
    }
}


/// Creates a new, isolated memory region and returns a handle to it.
/// Once the region is created it is pushed on top of the region stack, becoming the current
/// memory region for subsequent allocations.
/// ### Usage
/// ```
/// r$ := startregion();
/// a := new String();
/// 
/// assertThat(r$.contains(a));
/// ```
/// Regions are nested implicitly based on their creation order, forming a stack-like hierarchy.
/// ```
/// r2$ := startregion();
/// r3$ := startregion(); // is created as a child of r2$.
/// 
/// endregion(r2$) // r3$ is not reachable.
/// ```
public function startregion() -> RegionHandle {
    todo()
}

/// Returns a handle to the current active region.
/// ### Usage
/// ```
/// use core.memory.areSame;
/// r$ := startregion();
/// s$ := startregion();
/// 
/// current$ := currentregion();
/// 
/// assertThat(areSame(current$, s$));
/// endregion(s$);
/// 
/// currentR$ := currentregion();
/// assertThat(areSame(currentR$, r$));
/// ```
public function currentregion() -> RegionHandle {
    todo()
}

/// Returns the memory region in charge of the internal contents of a variable.
/// 
/// This method will only return a valid region for values that are stored.
/// i.e. checking the owner of a primitive value is not defined, because primitive values
/// are not owned.
public function ownerregion<T>(value: T) -> ?RegionHandle {
    todo()
}


/// Releases all resources associated with the specified memory region.
/// It frees allocated memory and cleans up any data structures used.
/// ### Usage
/// ```
/// ```
public function endregion(region$: RegionHandle) {
    todo()
}