module lib


/// Implementation of the Fibonacci function
/// ### Usage
/// ```
/// use algorithms.fibonacci
/// 
/// var fifth = fibonacci(5)
/// assert(fifth).equals(5)
/// 
/// var tenth = fibonacci(10)
/// assert(tenth).equals(55)
/// 
/// var sixth = fibonacci(6)
/// assert(sixth).equals(8)
/// ```
public function fibonacci(n: Int32) -> Int32 {
    if n == 0 or n == 1 {
        return n
    }
    return fibonacci(n - 1) + fibonacci(n - 2)
}

/// A function that checks if a string is a palindrome
/// ### Usage
/// ```
/// use algorithms.isPalindrome
/// 
/// var str = "racecar"
/// assertThat(isPalindrome(input))
/// 
/// var str2 = "hello"
/// assertThat(!isPalindrome(input))
/// ```
public function isPalindrome(input: String) -> Bool {
    return input == input.reverse()
}

/// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
/// 
/// You may assume that each input would have exactly one solution, and you may not use the same element twice.
/// You can return the answer in any order.
/// 
/// ## Example 1:
/// Input: nums = `[2, 7, 11, 15]`, target = 9
/// 
/// Output: [0, 1]
/// 
/// Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
/// 
/// ## Example 2:
/// Input: nums = `[3, 2, 4]`, target = 6
/// 
/// Output: [1, 2]
/// 
/// ## Example 3:
/// Input: nums = `[3, 3]`, target = 6
/// 
/// Output: [0, 1]
public function twoSum(nums: []Int32, target: Int32) -> []Int32 {
    var map = HashMap()

    for { a as i, b as num } in nums.iter().enumerate() {
        var complement = target - num;
        var maybeSolution: ?Int32 = map.get(complement);
        if maybeSolution.isSome() {
            return [maybeSolution.unwrap(), num]
        }
        map.set(num, i);
    }
    core.sentinels.unreachable()
}