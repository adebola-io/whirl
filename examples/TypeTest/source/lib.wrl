module lib

test "Testing types." {
    use core.collections.Tuple
    use core.testing.assert

    /// Returns the value itself.
    function identity<T>(value: T) -> T {
        return value
    }

    // generic model methods.
    swap := fn <T, U>(tuple: Tuple<T, U>) tuple.swap()

    tuple := Tuple(true, "hello")
    swapped := tuple.swap()
    assert(swap(tuple)).equals(tuple.swap())

 
    // Coercion.
    stringItself := identity("String") // Should have type String.
    result := err(true)
    result = ok(none())
    result = ok(some("hello, world"))
    // result should coerce to type Outcome<Maybe<String>, Bool>

    // Opaque types.
    model Football {
        new(){}
        /// Bounce for a football.
        public function bounce -> String {
            return "Football is bouncing..."
        }
    }
    model Tennisball {
        new(){}
        /// Bounce for a tennisball.
        public function bounce -> String {
            return "Tennisball is bouncing..."
        }
    }
    model Basketball {
        new(){}
        /// Bounce for a basketball.
        public function bounce -> String {
            return "Basketball is bouncing..."
        }
    }
    type Ball = Football | Tennisball | Basketball
    ball: Ball := Football()
    ball.bounce()
    ball = Basketball()
    ball.bounce()

    interface Bounceable {
        public function bounce -> String
    }
    function Nested<T implements Bounceable>(newBall: T) {
        type InnerBall = T | Ball
        ball: InnerBall := Football()
        ball.bounce()
        ball = newBall
        _ := ball.bounce()
    }

    // Opaque types with interfaces.
    interface TransformableTo<T> {
        public function transform -> T
    }
    model Box<T> implements TransformableTo<T> {
        new(value: T){}
        public function [TransformableTo.transform] -> T {
            todo()
        }
    }
    model Sphere<T> implements TransformableTo<T> {
        new(value: T){}
        public function [TransformableTo.transform] -> T {
            todo()
        }
    }
    type Transformable<T> = Box<T> | Sphere<T>
    entity := Box(Sphere("hello"))
    entity.transform()

    // Numeric types.
    number := 90
    number = 12
    array := [1, 2, 3, 4, number, 255, 900]

    numeric := 0
    numeric = 900 // should coerce to UInt16.

    // function type coercion.
    strArray := ["hello", "world"]
    strArrayHasHello := strArray.iter().any(fn(element) element == "hello")
    functor: fn -> fn(value: String) -> String := fn() fn(value) value.toStr()


    // Auto inferred generics.
    arr := []
    arr = ["Hello", "world"] // arr should infer type Array<String>
    firstItem := arr[0] // Should infer type string.
    arr2 := []
    arr2.push(some(true)) // arr2 should infer type Array<Maybe<Bool>>.
    arr3 := []
    num: Number := 99
    arr3[0] = num // arr3 should infer type Array<Number> 

    arr4 := []
    arr4 == [none(), some(true)] // arr4 should infer type Array<Maybe<Bool>>


    // Destructuring.
    model Person implements Default {
        public var name: String
        public var age: Int32 // Set automatically.
        new(name: String, age?: Int32) {
            this.name = name
            this.age = age.unwrapOrDefault()
        }
        static function [Default.init] -> This {
            return Person("{unknown}")
        }
    }
    var person: Person // possible because Person implements Default.
    var { name, age }: Person
    var { name as johnsName} = Person("John Doe")

    // Destructuring in loops.
    people := [Person("Susan Micheals"), Person("Aaron Michaels")]
    for { name} in people {
        // print(name)
    }

    function anyType<T>(value: T) {}

    // Generic Invariance.
    function hello<T>(value: T, factory: fn(value: T) -> T) -> T {
        value = factory(value) // valid.
        if true {
            return value // valid.
        }
        return factory(value)
    }

    function ad<a>(value: a) -> a {
        todo()
    }
}