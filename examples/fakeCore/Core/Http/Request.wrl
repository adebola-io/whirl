module Request;

use Super.Prelude.{Todo, String, Bool, Maybe, UnsignedInt, Outcome, Display};
use Super.Memory.Bytes;
use Core.Io.IoError;

public enum HttpMethod {
    Get,
    Post,
    Put,
    Delete
}

public model HttpRequest {
    new() {
        Todo()        
    }
    public function PathParams(): RequestParams {
        Todo()
    }
    /// Returns the method of the request,
    public function Method(): String {
        Todo()
    }
    /// Returns the URL route of the request.
    public function Url(): String {
        Todo()
    }
    /// Gets the complete body buffer of the string asynchronously.
    public async function Body(): Bytes {
        Todo()
    }
    /// Returns true if the request was completed successfully.
    public function IsCompleted(): Bool {
        Todo()
    }
    /// Returns the headers stored in the request.
    public function Headers(): RequestHeaders {
        Todo()
    }
    /// Stores data on the request object.
    public function StoreData(key: String, value: String) {
        Todo()
    }
}

public model RequestHeaders {
    function Get(name: String): Maybe<&String> {
        Todo()
    }
    function Has(name: &String): Bool {
        Todo()
    }
    /// Returns the
    function GetOrErr(name: String): Outcome<&String, HttpRequestError> {
        Todo()
    }
}

public model RequestParams {
    function Get(name: String): Maybe<&String> {
        Todo()
    }
    function GetOrErr(name: String): Outcome<&String, HttpRequestError> {
        Todo()
    }
    function Has(name: &String): Bool {
        Todo()
    }
}


/// An error that occurs on the HTTP server while it is active.
/// The error is non-fatal, meaning that it does not lead to the crashing of the server when it happens.
public model HttpRequestError implements IoError + Display {
    var message: String;
    var route: String;
    var statusCode: UnsignedInt;
    new(message: String, request: HttpRequest) {
        this.message = message;
        this.route = request.Url();
    }
    public function [Display.ToStr](): &String {
        return Todo();
    }
}