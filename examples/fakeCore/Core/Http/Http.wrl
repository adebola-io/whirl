module Http;

use Super.Prelude.String;
use Super.Prelude.Outcome;
use Super.Prelude.UnsignedInt;
use Super.Prelude.Prospect;
use Super.Prelude.Todo;
use Super.Prelude.Some;
use Super.Prelude.Maybe;
use Super.Primitives.Ops.Addition;

enum HttpMethod {
    Get,
    Post,
    Put,
    Delete
}

model Endpoints {
    public function Register(
        method: HttpMethod, 
        route: String, 
        handler: fn(request: Request): Prospect<ServerOutcome>
    ) {
        Todo()
    }
}

public type ServerOutcome = Outcome<Response, ServerError>;

public model Server {
    public var endpoints: Endpoints;
    var middleware: Middleware;

    new(name: String, port: UnsignedInt) {
 
    }

    /// Registers a route for a request with a `GET` method.
    public function Get(
        route: String, 
        handler: fn(request: Request): Prospect<ServerOutcome>
    ) {
        this.endpoints.Register(HttpMethod.Get, route, handler);
    }

    /// Registers a route for a request with a `POST` method.
    public function Post(route: String, handler: fn(request: Request): Prospect<Outcome<Response>>) {
        this.endpoints.Register(HttpMethod.Post, route, handler);
    }

    /// Starts the server by listening at the specified port for changes.
    public async function Start() {
        Todo()
    }

    public function UseMiddleware(middleware: Middleware) {
        this.middleware = Some(middleware);
    }
}

public model Response {
    var status: UnsignedInt;
    /// Build a response object from a request.
    public static function From(request: Request): This {

    }
    /// Sets the status code value of the response.
    function Status(value: UnsignedInt): &This {
        this.status = value;
        return &this;
    }
    /// Sets the response type to HTML Text.
    function Html(string: String): &This {
        this.headers.Set("Content-Type", "text/html");
        this.Write(string);
        return &this;
    }
}

model RequestParams {
    function Get(name: String): Maybe<String> {
        Todo()
    }
}

public model Request {
    function PathParams(): RequestParams {

    }
}

public model ServerError {
    new(message: String) {
        
    }
}

public model Middleware {
    new() {
        
    }
}