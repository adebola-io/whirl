module Http;

use Super.Prelude.String;
use Super.Prelude.Outcome;
use Super.Prelude.UnsignedInt;
use Super.Prelude.Prospect;
use Super.Prelude.Todo;
use Super.Primitives.Ops.Addition;

model Endpoints {

}

public type ServerOutcome = Outcome<Response, ServerError>;

public model Server {
    public var endpoints: Endpoints;

    new(name: String, port: UnsignedInt) {
 
    }

    /// Registers a `GET` route.
    public function Get(
        route: String, 
        handler: fn(request: Request): Prospect<ServerOutcome>
    ) {
        this.endpoints.register("GET", route, handler);
    }

    public function Post(route: String, handler: fn(): Prospect<Outcome<Response>>) {
        Todo()
    }

    /// Starts the server by listening at the specified port for changes.
    public async function Start() {
        Todo()
    }

    public function UseMiddleware(middleware: Middleware) {
        
    }
}

public model Response {
    /// Build a response object from a request.
    public static function From(request: Request): This {

    }
}

public model Request {

}

public model ServerError {
    new() {
        
    }
}

public model Middleware {
    new() {
        
    }
}