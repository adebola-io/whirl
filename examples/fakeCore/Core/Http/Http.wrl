module Http;
use Super.Prelude.{
    Bool, Todo, Outcome, Prospect, String,
    Maybe, UnsignedInt, Some
};
use Super.Primitives.Ops.Addition;
public use Request.{RequestParams, HttpRequest, HttpMethod, HttpRequestError};


model Endpoints {
    /// Registers a GET route.
    public function Register(
        method: HttpMethod, 
        route: String, 
        handler: fn(request: HttpRequest): Prospect<ServerOutcome>
    ) {
        Todo()
    }
}

public type ServerOutcome = Outcome<HttpResponse, HttpRequestError>;

public model HttpServer {
    public var endpoints: Endpoints;
    var middleware: Middleware;

    new(name: String, port: UnsignedInt) {
 
    }

    /// Registers a route for a request with a `GET` method. 
    public function Get(
        route: String, 
        handler: fn(request: HttpRequest): Prospect<ServerOutcome>
    ) {
        this.endpoints.Register(HttpMethod.Get, route, handler);
    }

    /// Registers a route for a request with a `POST` method.
    public function Post(route: String, handler: fn(request: HttpRequest): Prospect<ServerOutcome>) {
        this.endpoints.Register(HttpMethod.Post, route, handler);
    }

    /// Starts the server by listening at the specified port for changes.
    public async function Start() {
        Todo()
    }

    public function UseMiddleware(middleware: Middleware) {
        this.middleware = Some(middleware);
    }
}

public model HttpResponse {
    var status: UnsignedInt;
    /// Build a response object from a request.
    public static function From(request: HttpRequest): This {
        return Todo();
    }
    /// Sets the status code value of the response.
    function Status(value: UnsignedInt): &This {
        this.status = value;
        return &this;
    }
    /// Sets the response type to HTML Text.
    function Html(string: String): &This {
        this.headers.Set("Content-Type", "text/html");
        this.data = string;
        return &this;
    }
}

public model Middleware {
    new() {
        
    }

    /// Adds a validator before the route handler of a route is run.
    /// The restrictor will not run if the path is not registered by the server.
    function Restrict(route: String, protector: fn (request: HttpRequest): MiddlewareResponse) {

    }
}

public enum MiddlewareResponse {
    Continue,
    Stop(HttpRequestError)
}

