module Io;

use Super.Primitives.String;
use Super.Prelude.Display;
use Super.Internals.Invoke;
use Super.Internals.Injunction;

/// Creates a new format object.
public function Fmt(template: String): TemplateString {
    new TemplateString(template)
}

model FormatError implements IoError {

}

/// The format object is a 
public model TemplateString {
    var template: String;
    var positions: Array<String>;
    new(template: String) {
        this.template = template;
        this.positions = [];
    }
    /// Add an argument according to the list of predefined arguments in the template
    /// string.
    /// ### Usage
    /// ```
    /// name := "Sefunmi";
    /// age := 21;
    /// 
    /// template := Core.Io.Fmt("My name is % and I am % years old.");
    /// completed := template.Add(name).Add(age).Finish();
    /// 
    /// Core.Io.Print(completed); // Will print out "My name is Sefunmi and I am 21 years old."
    /// ```
    public function Add<T implements Display>(value: T): &This {
        this.positions.Push(value.ToStr())
    }
    /// Builds a string from the template with all the inputted values.
    public function Finish(): String {
        Todo()
    }
}

/// Prints a message or an object to the console, terminal or any predefined output interface.
public function Print<T implements Display>(message: T) {
    messageAsStr := message.ToStr();
    // Invoke(Injunction.Print(messageAsStr));
}

public trait IoError {}