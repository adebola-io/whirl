module Outcome;

use Super.Primitives.Bool;

/// An `Outcome` is a generic (enumerated) model 
/// that represents the possible results of an operation. 
/// 
/// It has two possible inner variants:
/// - `Ok(T)`: The operation was successful and returned a value of type `T`.
/// - `Err(E)`: The operation failed and returned an error of type `E`.
/// 
/// The Outcome can be used to represent the results of fallible operations,
/// such as:
/// - reading a file, 
/// - parsing a string,
/// - executing a database query, or
/// - connecting to a server.
/// 
/// It presents a way to handle errors predictably.
public model Outcome<T, U> {
    var inner: T;

    /// Returns true if the outcome is `Ok` 
    /// i.e. The operation was successful.
    public function IsOk(): Bool {
        !this.IsErr
    }

    /// Returns true if the outcome is an `Err`.
    /// i.e. The operation failed.
    public function IsErr(): Bool {
        this.isErr
    }

    /// Checks if the outcome was successful and checks its internal value as well. 
    public function IsOkAnd(predicate: fn(value: T): Bool): Bool {
        return this.IsOk() and predicate(this.inner);
    }

    /// Checks if the outcome failed and checks the error value.
    public function IsErrAnd(predicate: fn(value: U): Bool): Bool {
        return this.Err() and predicate(this.inner);
    }
}

/// Returns an `Outcome` with a value;
/// ### Usage
/// ```
/// outcome := Ok(9)
/// Assert(outcome.IsErr())
/// ```
public function Ok<T, U>(value: T): Outcome<T, U> {
    Outcome.Ok(value)
}

/// Returns an `Outcome` with an error.
public function Err<T, U>(errorValue: T): Outcome<T, U> {
    Outcome.Err(errorValue)
}

enum OutcomeInner<T, U> {
    Ok(T),
    Err(U)
}