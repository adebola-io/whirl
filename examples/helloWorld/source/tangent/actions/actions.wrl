module actions;

public use state.stateful;

/// An action is simply an interactive activity that should
/// be carried out on the client, rather than the server.
public interface Actionable {
    public function toAction() -> Action;
}

public enum ActionKind {
    Increment,
    Decrement,
    SetTitle
}

public function actionKindToString(kind: ActionKind) -> String {
    if kind == ActionKind.Increment {
        "INCREMENT"
    } else {
        "DECREMENT"
    }
}


public model Action implements Display {
    public var kind: ActionKind;
    public var argument: ?String;
    public var target: ?String;

    new(kind: ActionKind, argument?: String, target?: String) {
        this.kind = kind;
        this.argument = argument;
        this.target = target;
    }

    public function toStr() -> String {
        template := '{"kind":%,"argument":"%","target":"%"}';
        return String.fmt(template)
            .add(actionKindToString(this.kind))
            .add(this.argument)
            .add(this.target)
            .finish()
    }
}

/// Creates a state update action that increments the state value with a specified name.
/// ### Usage
/// ```
/// use tangent.actions;
/// 
/// button := button().onClick(actions.increment("@counter.value"));
/// ```
public function increment(name: String, count?: Int32) -> Action {
    Action(ActionKind.Increment, some(count.unwrapOr(1).toStr()), some(name))
}

/// Creates a state update action that decrements the state value with a specified name.
/// ### Usage
/// ```
/// use tangent.actions;
/// 
/// btn := button().onClick(actions.decrement("@counter.value"));
/// ```
public function decrement(name: String, count?: Int32) -> Action {
    Action(ActionKind.Decrement, some(count.unwrapOr(1).toStr()), some(name))
}

/// Creates a state updata action that changes the title of a container view.
public function setTitle(title: String) -> Action {
    Action(ActionKind.SetTitle, none(), some(title))   
}