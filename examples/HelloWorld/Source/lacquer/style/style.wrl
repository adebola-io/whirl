module style;

use core.collections.HashMap;

/// Enumerates the different layout options for
/// arranging subviews within a view container.
public enum Layout {
    Horizontal,
    Vertical,
    Diagonal
}

public enum StrokeType {
    Solid,
    Dashed,
    Dotted
}

public enum Alignment {
    Left,
    Right,
    Center,
}

public type NumericStyleVal = Float64;

/// A style instance is an encapsulation of the styling properties and layout
/// configuration for a given View. It provides methods to customize the
/// appearance of elements.
public model Style {
    var values: HashMap<String, String>;
    new() {}
    /// Specifies the layout behaviour of the style, determining
    /// how the elements of the applied View will be arranged.
    /// 
    /// ### Usage
    /// ```
    /// use tangent.{Style, Layout};
    /// 
    /// Style().layout(Layout.Vertical);
    /// ```
    public function layout(layout: Layout) -> This {
        todo()
    }
    /// Sets the alignment of content within the applied View.
    /// It can be:
    /// - `Alignment.Left`: Content will be aligned to the left edge of 
    ///    the container view.
    /// - `Alignment.Right`: Content will be aligned to the right edge of
    ///    the container view.
    /// - `Alignment.Center`: Content will be centered within the container 
    ///    view.
    /// 
    /// ### Usage
    /// ```
    /// use tangent.{Style, Layout};
    /// 
    /// Style().alignment(Alignment.Center);
    /// ```
    public function alignment(alignment: Alignment) -> This {
        todo()
    }
    /// 
    public function size(width: NumericStyleVal, height: NumericStyleVal) -> This {
        todo()
    }
    public function corners(radius: NumericStyleVal) -> This {
        todo()
    }
    public function stroke(strokeType: StrokeType, strokeWidth: NumericStyleVal) -> This {
        todo()
    }
    public function textColor(color: String) -> This {
        todo()
    }
    public function backgroundColor(color: String) -> This {
        todo()
    }
}