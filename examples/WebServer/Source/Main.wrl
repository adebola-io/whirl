// Define the main module.
module Main;

// Import necessary modules from the Core library.
use Core.{
    Http.{ 
        HttpServer, ServerOutcome, HttpResponse, HttpRequest, 
        Middleware, MiddlewareResponse, HttpRequestError
    },
    Io.{Fmt, Print},
    Crypto.JwtEncryptor,
    Process.ReadEnv
};

/// Entry point into the program.
public function Main() { 
    // Set up server configurations.
    name := "simple-server";
    port := 8080;

    app := new HttpServer(name, port);
    middleware := new Middleware();
    printMessage := fn() {
        template := Fmt("% is listening on %.");
        message := template.Add(name).Add(port).Finish();
        Print(message);
    };
    // Register authentication.
    middleware.Use(AuthenticationHandler);

    // Apply middleware to the server.
    app.UseMiddleware(middleware);
    // Define routes.
    // Route 1: Basic "Hello, World!" response.
    app.Get("/hello", HelloHandler);
    // Route 2: Parameterized greeting.
    app.Get("/greet/:name", GreetHandler);
    // Route 3: Static file serving.
    app.Get("/static/::filename", StaticFileHandler);
    // Start the server and handle subsequent actions.
    app.Start().Then(printMessage).Run();
}

/// Handler function for the "/hello" endpoint.
async function HelloHandler(request: HttpRequest): ServerOutcome {
    response := HttpResponse.From(request);
    response.Status(200).Html("<h1>Hello, world!</h1>");
    Ok(response)
}

/// Handler function for authenticating users.
async function AuthenticationHandler(request: HttpRequest): MiddlewareResponse {
    if request.Url().StartsWith("/user/") {
        auth := request.Headers().GetOrErr("auth")?;
        token := if !auth.StartsWith("Bearer ") {
            return Err(new HttpRequestError("Invalid authentication header", request));
        } else {
            auth.Slice(7..auth.Length()).Unwrap()
        };
        maybeSecret := ReadEnv("JWT_SECRET");
        if maybeSecret.IsNone() {
            return Err(new HttpRequestError("Unathorized Request", request));
        };
        secret := maybeSecret.Unwrap();
        decoded := JwtEncryptor.Decode(*token, *secret);
        request.StoreData("user-id", decoded);
        return Ok(request);
    }
    return Ok(request);
}

/// Handler function for the "/greet/:name" endpoint.
async function GreetHandler(request: HttpRequest): ServerOutcome {
    name := request.PathParams().GetOrErr("name")?;
    response := HttpResponse.From(request);
    response.Status(200).Html("<h1>Hello, " + name + "!</h1>");
    return Ok(response);
}

// Handler function for serving static files.
async function StaticFileHandler(request: HttpRequest): ServerOutcome {
    filename := request.PathParams().Get("filename");
    // Implement logic to read and serve the specified static file.
    response := HttpResponse.From(request);
    return Ok(response);
}