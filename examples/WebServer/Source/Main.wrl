// Define the main module.
module Main;

// Import necessary modules from the Core library.
use Core.Http.{ 
   HttpServer, ServerOutcome, HttpResponse, HttpRequest, 
   Middleware, MiddlewareResponse, HttpRequestError
};
use Core.Io.Print;

/// Entry point into the program.
public function Main() {
    // Set up server configurations.
    name := "simple-server";
    port := 8080;
    app := new HttpServer(name, port);
    middleware := new Middleware();

    // Apply middleware to the server.
    app.UseMiddleware(middleware);
    // Define routes.
    // Route 1: Basic "Hello, World!" response.
    app.Get("/hello", HelloHandler);
    // Route 2: Parameterized greeting.
    app.Get("/greet/:name", GreetHandler);
    // Route 3: Static file serving.
    app.Get("/static/::filename", StaticFileHandler);
    // Start the server and handle subsequent actions.
    app.Start()
      .Then(fn() Print(name + " is listening on port " + port.ToStr()))
      .Run()
      .Await()!;
}

/// Handler function for the "/hello" endpoint.
async function HelloHandler(request: HttpRequest): ServerOutcome {
    response := HttpResponse.From(request);
    response.Status(200).Html("<h1>Hello, world!</h1>");
    Ok(response)
}

function AuthenticationHandler(request: HttpRequest): MiddlewareResponse {
    return Todo();
}

/// Handler function for the "/greet/:name" endpoint.
async function GreetHandler(request: HttpRequest): ServerOutcome {
    name := request.PathParams().Get("name"); 
    response := HttpResponse.From(request);
    response.Status(200).Html("<h1>Hello, " + name.Unwrap() + "!</h1>");
    return Ok(response);
}

// Handler function for serving static files.
async function StaticFileHandler(request: HttpRequest): ServerOutcome {
    filename := request.PathParams().Get("filename");
    // Implement logic to read and serve the specified static file.
    response := HttpResponse.From(request);
    return Ok(response);
}