// Define the main module.
module Main;

// Import necessary modules from the Core library.
use core.{
    net.http.{
        HttpServer, ServerOutcome, HttpRequest, HttpResponse,
        Middleware, MiddlewareResponse, HttpRequestError
    },
    io.{fmt, print},
    crypto.JwtEncryptor,
    process.getEnv
};

/// Entry point into the program.
public function main() { 
    // Set up server configurations.
    name := "simple-server";
    port := 8080;
    app := new HttpServer(name, port);
    middleware := new Middleware();
    printMessage := fn() {
        template := fmt("% is listening on %.");
        message := template.add(name).add(port).finish();
        print(message)
    };
    // Register authentication.
    middleware.useHandler(authenticationHandler);
    // Apply middleware to the server.
    app.useMiddleware(middleware);
    // Define routes.
    // Route 1: Basic "Hello, World!" response.
    app.get("/hello", helloHandler);
    // Route 2: Parameterized greeting.
    app.get("/greet/:name", greetHandler);
    // Route 3: Static file serving.
    app.get("/static/::filename", staticFileHandler);
    // Start the server and handle subsequent actions.
    app.start().then(printMessage).run();
}

/// Handler function for the "/hello" endpoint.
async function helloHandler(request: HttpRequest): ServerOutcome {
    response := HttpResponse.from(request);
    response.status(200).html(`<h1>Hello, world!</h1>`);
    ok(response)
}

/// Handler function for authenticating users.
async function authenticationHandler(req: HttpRequest): MiddlewareResponse {
    if req.url().startsWith("/user/") {
        auth := req.headers().getOrErr("auth")?;
        token := if !auth.startsWith("Bearer ") {
            return err(req.createError("Invalid authentication header."));
        } else {
            auth.slice(7..auth.Length()).unwrap()
        };
        maybeSecret := getEnv("JWT_SECRET");
        if maybeSecret.isNone() {
            return err(req.createError("Unauthorized Request."));
        };
        secret := maybeSecret.unwrap();
        decoded := JwtEncryptor.decode(token, secret);
        req.storeData("user-id", decoded);
        return ok(req);
    }
    return ok(req);
}

/// Handler function for the "/greet/:name" endpoint.
async function greetHandler(req: HttpRequest): ServerOutcome {
    name := req.pathParams().getOrErr("name")?;
    response := req.respond();
    response.status(200).html(`<h1>Hello, ` + name + `!</h1>`);
    return ok(response);
}

// Handler function for serving static files.
async function staticFileHandler(req: HttpRequest): ServerOutcome {
    filename := req.pathParams().get("filename");
    // Implement logic to read and serve the specified static file.
    response := req.respond();
    return ok(response);
}
