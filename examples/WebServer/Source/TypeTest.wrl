module TypeTest;

test "Testing types." {
    use Core.Testing.Assert;
    use Core.Collections.Tuple;
    use Core.Primitives.Ops.Addition;
    use Core.Primitives.UInt8;
    use Core.Primitives.Ops.Sequenced;

    /// Returns the value itself.
    function Identity<T implements Addition>(value: T): T {
        return value;
    }
    /// Swaps the elements of a tuple.
    function Swap<T, U>(tuple: Tuple<T, U>): Tuple<U, T> {
        tuple.Swap()
    }

    function Main() {
        // swapping variables.
        tuple := new Tuple(true, "hello");
        newTuple := tuple.Swap();
        Assert(tuple.Swap()).Equals(newTuple);
        Assert(Swap(tuple)).Equals(tuple.Swap());

        // Coercion.
        maybe := Err(true);
        maybe = Ok(None());
        maybe = Ok(Some("hello, world"));
        // maybe should have type Outcome<Maybe<String>, Bool>;


    }

}

