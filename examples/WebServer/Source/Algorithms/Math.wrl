module Math;

use Core.Primitives.Ops.Orderable;

/// Returns the nth Fibonacci number.
/// ### Usage
/// ```
/// Assert(Fibonacci(1) == 1);
/// Assert(Fibonacci(2) == 1);
/// Assert(Fibonacci(3) == 2);
/// Assert(Fibonacci(10) == 55);
/// ```
public function Fibonacci(n: UnsignedInt): UnsignedInt {
    return 
        if n == 0 {0} 
        else if n == 1 {1} 
        else Fibonacci(n-1) + Fibonacci(n-2);
}


/// Calculates the factorial of a given number.
/// ### Usage
/// ```
/// Assert(Factorial(3) == 6); // 3 * 2 * 1;
/// Assert(Factorial(5) == 120); // 5 * 4 * 3 * 2 * 1;
/// ```
public function Factorial(n: UnsignedInt): UnsignedInt {
    if n == 1 or n == 0 {
        return 1;
    };
    return n * Factorial(n - 1);
}


